{
    "pipes": [
        {
            "name": "KebabCasePipe",
            "id": "pipe-KebabCasePipe-332c93780deaca77f269238c8e00593156f2b02788f5dbec7d5739a5d92804fa7749e178161cdcef0629b834f071112f791094c88011be5c7eee63ee9926c85d",
            "file": "src/app/shared/kebab-case.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "kebabcase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'kebabcase'\n})\nexport class KebabCasePipe implements PipeTransform {\n\n  transform(value: string, ...args: unknown[]): unknown {\n    let output = '';\n    if (value) {\n      output = value.replace(new RegExp(/(?![a-zA-Z0-9\\s])./, 'g'), '');\n      output = output.replace(new RegExp(/ /, 'g'), '-').toLowerCase();\n    }\n    return output;\n  }\n\n}\n"
        },
        {
            "name": "TournamentNameTransformerPipe",
            "id": "pipe-TournamentNameTransformerPipe-7c40fbd245d9ae51b95b4d9843c9e3c1cc6706d5b3c03a85d8d6cb8e18a8493951cdba167a035be2580db364b27319e97382bc044e488987efb0336eb60bbce1",
            "file": "src/app/tournament-name-transformer.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tournamentNameTransformer",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'tournamentNameTransformer'\n})\nexport class TournamentNameTransformerPipe implements PipeTransform {\n\n  transform(value: any, ...args: any[]): any {\n    return value.replace(/_/g, ' ').replace(/^[a-z]|\\s[a-z]/g, (match: string) => match.toUpperCase());\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ApplicationDetails",
            "id": "interface-ApplicationDetails-cc336103c953869c90cff210e629e42b3cc80a5476e0446a5728e523f7db37ec8e8722722898021200853694957aba7301352c477e62b29f59a6728be650017a",
            "file": "src/app/interfaces/application-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ClashTournaments} from \"./clash-tournaments\";\nimport {DiscordGuild} from \"./discord-guild\";\n\nexport interface ApplicationDetails {\n  currentTournaments?: ClashTournaments[],\n  defaultGuild?: string,\n  userGuilds?: DiscordGuild[]\n}\n",
            "properties": [
                {
                    "name": "currentTournaments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTournaments[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "defaultGuild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userGuilds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ChampionData",
            "id": "interface-ChampionData-74f85bf1f25c2b4b6b23250fadb30df5fd2c8aeaa81bd0ab29057328066651105aac239674235e71d4b45a095781f4ca31ee1547dd531bd183183074eaf45bce",
            "file": "src/app/interfaces/championData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ChampionData {\n  type: string,\n  format: string,\n  version: string,\n  data: any\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotGenericResponse",
            "id": "interface-ClashBotGenericResponse-a7d5dfcf59ce3852b1d08ac707405e588e7b93381d5b7433f07bc1308f452a1469d1507783d1a46b0c17e02028088e9be1aae0ce3f86dd17a3afe2955766cbce",
            "file": "src/app/interfaces/clash-bot-generic-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ClashTeam} from \"./clash-team\";\n\nexport interface ClashBotGenericResponse {\n  registeredTeam: ClashTeam,\n  unregisteredTeams: ClashTeam[]\n}\n",
            "properties": [
                {
                    "name": "registeredTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTeam",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "unregisteredTeams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotTentativeDetails",
            "id": "interface-ClashBotTentativeDetails-33cbe4f16e68de1363660cc7e6c8cb745a77c29f9487fc9a069e9bdd9f06fd92f1dbc52bb4230642f0bb9162aca4aefca7eac37674f2778b9fe675e3c844c4d4",
            "file": "src/app/interfaces/clash-bot-tentative-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotTentativeDetails {\n  serverName: string,\n  tentativePlayers: string[],\n  tournamentDetails: TournamentDetails\n  isMember?: boolean\n}\n\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "isMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "serverName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tentativePlayers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tournamentDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetails",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotTentativeRequest",
            "id": "interface-ClashBotTentativeRequest-7f5ffa9cb7344e51b46dd19dabe96b233d145a72c605f5f746f9c6227917f1304e60c231091ae99f6bfeab038d5c6d9ea6ec1bfff897fdb84a6cb5a8536e8e5c",
            "file": "src/app/interfaces/clash-bot-tentative-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotTentativeRequest {\n  id: string,\n  serverName: string,\n  tournamentDetails: TournamentDetails\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "serverName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tournamentDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetails",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotUserDetails",
            "id": "interface-ClashBotUserDetails-1b5443ab5e20d86fe485fc6fd32f0ab4e906984f17894095b0f09445f9444fb018705330e974708af4d426f595544bea6c1f4b44305ddf651eaa3ef8c001b862",
            "file": "src/app/interfaces/clash-bot-user-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotUserDetails {\n  id: number,\n  username: string,\n  serverName: string,\n  preferredChampions: string[],\n  subscriptions: {[key: string]: boolean}\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "preferredChampions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "serverName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "subscriptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotUserRegister",
            "id": "interface-ClashBotUserRegister-9b5c0d429e13aa19be2652d4f6a3e28e4268fb87f578c9b3ca2a2f0f3cf81bc97b6456f7ac1155cec8b959aa384fc3ed5240bf365305fbff22fa34cef77f24a9",
            "file": "src/app/interfaces/clash-bot-user-register.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotUserRegister {\n  teamName?: string,\n  role?: string,\n  tournamentDetails?: TournamentDetails,\n  serverName?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\ninterface TournamentDetails {\n  tournamentName?: string,\n  tournamentDay?: string\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "serverName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "teamName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tournamentDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetails",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashTeam",
            "id": "interface-ClashTeam-208995fe8433a1240aff79271aee451b1fc9406a4d7ac311df00407a964d01cab9bdff8f48e1e82a547279f4919833b018104d378e42341094230cf00f030910",
            "file": "src/app/interfaces/clash-team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTeam {\n  teamName?: string,\n  playersDetails?: PlayerDetails[]\n  tournamentDetails?: TournamentDetails,\n  serverName?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\nexport interface PlayerDetails {\n  name: string,\n  id: number,\n  role: string,\n  champions?: string[],\n  isUser?: boolean\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "playersDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerDetails[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "serverName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "teamName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tournamentDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetails",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashTournaments",
            "id": "interface-ClashTournaments-113f987f4f06a3344a53fd506ce8330c9dff7fa2448803dd51a869dc7b5193612f0d6db15c5fa073597b8968bcea429abe3dadcf58e9f46972ad38709ef1e7ba",
            "file": "src/app/interfaces/clash-tournaments.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTournaments {\n  tournamentName: string,\n  tournamentDay: string,\n  startTime: string,\n  registrationTime: string\n}\n",
            "properties": [
                {
                    "name": "registrationTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-3b30361dc25cece8a0f4b6ad98330152fa9b7eee5fc9229f542fb0eb9388dddc2632d65e8468616957d1542097c3c57586581e2c16530c03ae171df937fb7e87",
            "file": "src/app/interfaces/dialog-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DialogData {\n  message?: string\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DiscordGuild",
            "id": "interface-DiscordGuild-d9452e1ca3a66e545108199f261bf786f74665797f88de40f33a5c24fb6550438840ad2841e0c5c8b3fb002bcdf5574163c88fb87267f520f647df2fa1e732bd",
            "file": "src/app/interfaces/discord-guild.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DiscordGuild {\n  features: string[]\n  icon: string\n  id: string\n  name: string\n  owner: boolean\n  permissions: number,\n  permissions_new: string\n}\n",
            "properties": [
                {
                    "name": "features",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "permissions_new",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PlayerDetails",
            "id": "interface-PlayerDetails-208995fe8433a1240aff79271aee451b1fc9406a4d7ac311df00407a964d01cab9bdff8f48e1e82a547279f4919833b018104d378e42341094230cf00f030910",
            "file": "src/app/interfaces/clash-team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTeam {\n  teamName?: string,\n  playersDetails?: PlayerDetails[]\n  tournamentDetails?: TournamentDetails,\n  serverName?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\nexport interface PlayerDetails {\n  name: string,\n  id: number,\n  role: string,\n  champions?: string[],\n  isUser?: boolean\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "champions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Server",
            "id": "interface-Server-9e67de95c71acb7ee66e8c4f8afeb5666454b2862127af5087c72c78cfc30e47d4c820f1a6a651f7d54b5c2506ab00179d317a6f4cfe6664e96c029d470a594f",
            "file": "src/app/interfaces/server.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Server {\n  name: string,\n  state: boolean\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TeamFilter",
            "id": "interface-TeamFilter-baf9fd2645463f66a9fc241e089742ec13bb8efab417ceb58aadd2afe39ef273c278cfee28c23f403e0cfdcbe62f040cbd4ffb64f477aeb9a93dc17a5a09db67",
            "file": "src/app/interfaces/team-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FilterType} from \"./filter-type\";\n\nexport interface TeamFilter {\n  value: string,\n  type: FilterType\n  state: boolean,\n  id: string\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TournamentDetails",
            "id": "interface-TournamentDetails-7f5ffa9cb7344e51b46dd19dabe96b233d145a72c605f5f746f9c6227917f1304e60c231091ae99f6bfeab038d5c6d9ea6ec1bfff897fdb84a6cb5a8536e8e5c",
            "file": "src/app/interfaces/clash-bot-tentative-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotTentativeRequest {\n  id: string,\n  serverName: string,\n  tournamentDetails: TournamentDetails\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n\n",
            "properties": [
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TournamentDetails",
            "id": "interface-TournamentDetails-33cbe4f16e68de1363660cc7e6c8cb745a77c29f9487fc9a069e9bdd9f06fd92f1dbc52bb4230642f0bb9162aca4aefca7eac37674f2778b9fe675e3c844c4d4-1",
            "file": "src/app/interfaces/clash-bot-tentative-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotTentativeDetails {\n  serverName: string,\n  tentativePlayers: string[],\n  tournamentDetails: TournamentDetails\n  isMember?: boolean\n}\n\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TournamentDetails-1"
        },
        {
            "name": "TournamentDetails",
            "id": "interface-TournamentDetails-208995fe8433a1240aff79271aee451b1fc9406a4d7ac311df00407a964d01cab9bdff8f48e1e82a547279f4919833b018104d378e42341094230cf00f030910-2",
            "file": "src/app/interfaces/clash-team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTeam {\n  teamName?: string,\n  playersDetails?: PlayerDetails[]\n  tournamentDetails?: TournamentDetails,\n  serverName?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\nexport interface PlayerDetails {\n  name: string,\n  id: number,\n  role: string,\n  champions?: string[],\n  isUser?: boolean\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "TournamentDetails-2"
        },
        {
            "name": "TournamentDetails",
            "id": "interface-TournamentDetails-9b5c0d429e13aa19be2652d4f6a3e28e4268fb87f578c9b3ca2a2f0f3cf81bc97b6456f7ac1155cec8b959aa384fc3ed5240bf365305fbff22fa34cef77f24a9-3",
            "file": "src/app/interfaces/clash-bot-user-register.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashBotUserRegister {\n  teamName?: string,\n  role?: string,\n  tournamentDetails?: TournamentDetails,\n  serverName?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\ninterface TournamentDetails {\n  tournamentName?: string,\n  tournamentDay?: string\n}\n",
            "properties": [
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "TournamentDetails-3"
        },
        {
            "name": "UserDetails",
            "id": "interface-UserDetails-3568e18391ea17de4aeacfbba3ecb8b3dc896ff14b75222cb830e81e112ff05a754f25519404ee26bd7670461867e1f8661e542273ee911a505708e8d021359f",
            "file": "src/app/interfaces/user-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserDetails {\n  id: number,\n  username: string,\n  discriminator: string,\n  avatar?: string,\n  bot?: boolean,\n  system?: boolean,\n  mfa_enabled?: boolean,\n  locale?: string,\n  verified?: boolean,\n  email?: string,\n  flags?: Number,\n  premium_type?: Number,\n  public_flags?: Number\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "bot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "discriminator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "flags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mfa_enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "premium_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "public_flags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "system",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApplicationDetailsService",
            "id": "injectable-ApplicationDetailsService-129142a3e6de78d4c5f42a5a9c17ebc285fc57ee380bf0ae90fa187ebbf9fa7c07df6a89dbfe79153079f5fc86c1227fb9015b3e5f139a11015574b43f6d6ea0",
            "file": "src/app/services/application-details.service.ts",
            "properties": [
                {
                    "name": "applicationDetails",
                    "defaultValue": "new BehaviorSubject<ApplicationDetails>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ApplicationDetails>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getApplicationDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<ApplicationDetails>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setApplicationDetails",
                    "args": [
                        {
                            "name": "applicationDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicationDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {ApplicationDetails} from \"../interfaces/application-details\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApplicationDetailsService {\n\n    applicationDetails: BehaviorSubject<ApplicationDetails> = new BehaviorSubject<ApplicationDetails>({});\n\n    constructor() {}\n\n    getApplicationDetails(): BehaviorSubject<ApplicationDetails> {\n        return this.applicationDetails;\n    }\n\n    setApplicationDetails(applicationDetails: ApplicationDetails) {\n        this.applicationDetails.next(applicationDetails);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "ClashBotService",
            "id": "injectable-ClashBotService-2c3e601e75623d380134161f018d681e2530b8879966b74641b49f2bef4694bf446bb69891227ffef3b9b67a9b7de2d4202853a8689c4cdca513ed6028506710",
            "file": "src/app/services/clash-bot.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildHostUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewTeam",
                    "args": [
                        {
                            "name": "userDetail",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamRequest",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotGenericResponse>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userDetail",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamRequest",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClashTeams",
                    "args": [
                        {
                            "name": "server",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashTeam[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "server",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClashTournaments",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ClashTournaments[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getServerTentativeList",
                    "args": [
                        {
                            "name": "serverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotTentativeDetails[]>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserDetails",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotUserDetails>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postTentativeList",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "serverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tournamentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tournamentDay",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotTentativeDetails>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "serverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tournamentName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tournamentDay",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postUserDetails",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "serverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "preferredChampionList",
                            "type": "Set<string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subscriptions",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotUserDetails>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "serverName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "preferredChampionList",
                            "type": "Set<string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subscriptions",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "playerName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerUserForTeam",
                    "args": [
                        {
                            "name": "userDetail",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamRequest",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotGenericResponse>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userDetail",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamRequest",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterUserFromTeam",
                    "args": [
                        {
                            "name": "userDetail",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamRequest",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ClashBotGenericResponse>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userDetail",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamRequest",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {ClashTeam} from \"../interfaces/clash-team\";\nimport {Observable} from \"rxjs\";\nimport {ClashTournaments} from \"../interfaces/clash-tournaments\";\nimport {UserDetails} from \"../interfaces/user-details\";\nimport {ClashBotGenericResponse} from \"../interfaces/clash-bot-generic-response\";\nimport {ClashBotUserDetails} from \"../interfaces/clash-bot-user-details\";\nimport {ClashBotTentativeDetails} from \"../interfaces/clash-bot-tentative-details\";\nimport {ClashBotTentativeRequest} from \"../interfaces/clash-bot-tentative-request\";\nimport {ClashBotUserRegister} from \"../interfaces/clash-bot-user-register\";\n\n@Injectable()\nexport class ClashBotService {\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getClashTeams(server: string): Observable<ClashTeam[]> {\n    return this.httpClient.get<ClashTeam[]>(this.buildHostUrl(`/api/v2/teams/${server}`));\n  }\n\n  getClashTournaments(): Observable<ClashTournaments[]> {\n    return this.httpClient.get<ClashTournaments[]>(this.buildHostUrl('/api/tournaments'));\n  }\n\n  registerUserForTeam(userDetail: UserDetails, teamRequest: ClashBotUserRegister): Observable<ClashBotGenericResponse> {\n    let payload = {\n      id: userDetail.id,\n      role: teamRequest.role,\n      teamName: teamRequest.teamName,\n      serverName: teamRequest.serverName,\n      tournamentName: teamRequest.tournamentDetails?.tournamentName,\n      tournamentDay: teamRequest.tournamentDetails?.tournamentDay\n    }\n    return this.httpClient.post<ClashBotGenericResponse>(this.buildHostUrl('/api/v2/team/register'), payload);\n  }\n\n  unregisterUserFromTeam(userDetail: UserDetails, teamRequest: ClashTeam): Observable<ClashBotGenericResponse> {\n    let payload = {\n      id: userDetail.id,\n      teamName: teamRequest.teamName,\n      serverName: teamRequest.serverName,\n      tournamentName: teamRequest.tournamentDetails?.tournamentName,\n      tournamentDay: teamRequest.tournamentDetails?.tournamentDay\n    };\n    return this.httpClient.delete<ClashBotGenericResponse>(this.buildHostUrl('/api/v2/team/register'), { body: payload});\n  }\n\n  getServerTentativeList(serverName: string): Observable<ClashBotTentativeDetails[]> {\n    return this.httpClient.get<ClashBotTentativeDetails[]>(this.buildHostUrl('/api/tentative'), { params: new HttpParams({fromString: `serverName=${serverName}`}) });\n  }\n\n  postTentativeList(userId: string, serverName: string, tournamentName: string, tournamentDay: string): Observable<ClashBotTentativeDetails> {\n    let payload : ClashBotTentativeRequest = {\n        id: userId,\n      serverName: serverName,\n      tournamentDetails: {\n          tournamentName: tournamentName,\n        tournamentDay: tournamentDay\n      }\n    };\n    return this.httpClient.post<ClashBotTentativeDetails>(this.buildHostUrl('/api/v2/tentative'), payload);\n  }\n\n  buildHostUrl(url: string): string {\n    if (window.location.hostname === 'localhost') {\n      return `${window.location.protocol}//${window.location.hostname}:80${url}`;\n    }\n    return url;\n  }\n\n  createNewTeam(userDetail: UserDetails, teamRequest: ClashTeam, role: string): Observable<ClashBotGenericResponse> {\n    let payload = {\n      id: userDetail.id,\n      role: role,\n      teamName: teamRequest.teamName,\n      serverName: teamRequest.serverName,\n      tournamentName: teamRequest.tournamentDetails?.tournamentName,\n      tournamentDay: teamRequest.tournamentDetails?.tournamentDay,\n      startTime: teamRequest.startTime\n    };\n    return this.httpClient.post<ClashBotGenericResponse>(this.buildHostUrl('/api/v2/team'), payload);\n  }\n\n  getUserDetails(id: number): Observable<ClashBotUserDetails> {\n    const opts = { params: new HttpParams({fromString: `id=${id}`}) };\n    return this.httpClient.get<ClashBotUserDetails>(this.buildHostUrl('/api/user'), opts);\n  }\n\n  postUserDetails(id: number, serverName: string, preferredChampionList: Set<string>, subscriptions: any, playerName: string): Observable<ClashBotUserDetails> {\n    let payload = {\n      id: id,\n      playerName: playerName,\n      serverName: serverName,\n      preferredChampions: Array.from(preferredChampionList),\n      subscriptions: subscriptions\n    };\n    return this.httpClient.post<ClashBotUserDetails>(this.buildHostUrl('/api/user'), payload);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DevModeService",
            "id": "injectable-DevModeService-eb20083e0164bc629d61d1e783e8bfe676e9f54afaa558baf84333693e05e8f7ae33b59f4e8a0571c6df14a418e3dcc331f44dc6d39dc0c22a91c23551be1548",
            "file": "src/app/services/dev-mode.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isDevMode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DevModeService {\n\n  constructor() { }\n\n  isDevMode() {\n    return isDevMode();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "DiscordService",
            "id": "injectable-DiscordService-68a0f92d86090d0a149638fbd168a6566529141413c7be49d85365fc072cda2e26191fda6dfd8964193ea834533db1c5c1efabe6b6cfbf8de2c47ee3512c7144",
            "file": "src/app/services/discord.service.ts",
            "properties": [
                {
                    "name": "hostName",
                    "defaultValue": "'https://discord.com/api'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "getGuilds",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserDetails>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {UserDetails} from \"../interfaces/user-details\";\n\n@Injectable()\nexport class DiscordService {\n\n  hostName: string = 'https://discord.com/api';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getGuilds(): Observable<any[]> {\n    return this.httpClient.get<any[]>(`${this.hostName}/users/@me/guilds`);\n  }\n\n  getUserDetails(): Observable<UserDetails> {\n    return this.httpClient.get<UserDetails>(`${this.hostName}/users/@me`);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GoogleAnalyticsService",
            "id": "injectable-GoogleAnalyticsService-06653919e3484b2da64d114486580600bbf3123bbd7960bfd25a95a432399727a2700b76b4633d681f179e8e883b64845bd88bffbab957356867bb4e4123eb03",
            "file": "src/app/google-analytics.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "sendPageNavigationEvent",
                    "args": [
                        {
                            "name": "pageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {environment} from \"../environments/environment\";\ndeclare let gtag: Function;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAnalyticsService {\n\n  constructor() { }\n\n  sendPageNavigationEvent(pageUrl: string): void {\n    if (environment.gTag) {\n        console.log('Google event invoked...');\n          gtag('config', environment.gTag, {'page_path': pageUrl});\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "RiotDdragonService",
            "id": "injectable-RiotDdragonService-aea9395c39bc4cacdcce1ad4167571804c80521ae32221a8547e177daa87035d6cf8cc7887f45d7819ab9970ec5da67571c383dae4ab15b3ebc4603f480333c9",
            "file": "src/app/services/riot-ddragon.service.ts",
            "properties": [
                {
                    "name": "host",
                    "defaultValue": "'https://ddragon.leagueoflegends.com/cdn/12.2.1/data/en_US'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "getListOfChampions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ChampionData>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {ChampionData} from \"../interfaces/championData\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RiotDdragonService {\n\n  host: string = 'https://ddragon.leagueoflegends.com/cdn/12.2.1/data/en_US';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getListOfChampions(): Observable<ChampionData> {\n      return this.httpClient.get<ChampionData>(`${this.host}/champion.json`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamsWebsocketService",
            "id": "injectable-TeamsWebsocketService-4ff637802aa11a18d422f2bd2b082edb22b1e3bd298ffec011c908a3902194ebced8749ebda3756776b709cc7916486acd1a8cc1245730d9b1e5deb6e055cf47",
            "file": "src/app/services/teams-websocket.service.ts",
            "properties": [
                {
                    "name": "subject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildLocalhostUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubject",
                    "args": [],
                    "optional": false,
                    "returnType": "WebSocketSubject<ClashTeam | string>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {webSocket, WebSocketSubject} from \"rxjs/webSocket\";\nimport {ClashTeam} from \"../interfaces/clash-team\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamsWebsocketService {\n\n  private readonly subject;\n\n  constructor() {\n    if (window.location.hostname === 'localhost') {\n      this.subject = webSocket<ClashTeam|string>(`ws://${this.buildLocalhostUrl('/api/ws/teams')}`);\n    } else {\n      this.subject = webSocket<ClashTeam|string>(`wss://${window.location.hostname}/api/ws/teams`);\n    }\n  }\n\n  getSubject() : WebSocketSubject<ClashTeam|string>{\n   return this.subject;\n  }\n\n  buildLocalhostUrl(url: string): string {\n      return `${window.location.hostname}:80${url}`;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "UserDetailsService",
            "id": "injectable-UserDetailsService-6d8325922d952fb18a35d53499b27f07f75d2f4536a516c0bf04644b44b1679002a1740a7a8261aaef22231e7f96fbaf31b1c4d7318c682f1c0e78826288198b",
            "file": "src/app/services/user-details.service.ts",
            "properties": [
                {
                    "name": "user",
                    "defaultValue": "new BehaviorSubject<UserDetails>({ id: 0, username: '', discriminator: ''})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<UserDetails>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<UserDetails>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setUserDetails",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {UserDetails} from \"../interfaces/user-details\";\nimport {BehaviorSubject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDetailsService {\n\n  user: BehaviorSubject<UserDetails> = new BehaviorSubject<UserDetails>({ id: 0, username: '', discriminator: ''});\n\n  constructor() {}\n\n  getUserDetails(): BehaviorSubject<UserDetails> {\n    return this.user;\n  }\n\n  setUserDetails(user: UserDetails) {\n    this.user.next(user);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "DiscordInterceptor",
            "id": "injectable-DiscordInterceptor-e49d80f8e0ad8726966219e80b6143249ce38a305e8e88ca6e484898727be91aa84cdd18ca620d99376291abb116a78a5a032a02ba585d35ed031aba8a9ce750",
            "file": "src/app/services/discord-interceptor.service.ts",
            "properties": [
                {
                    "name": "discordHostname",
                    "defaultValue": "'discord.com/api'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {OAuthService} from \"angular-oauth2-oidc\";\n\n@Injectable()\nexport class DiscordInterceptor implements HttpInterceptor {\n\n  discordHostname = 'discord.com/api'\n\n  constructor(private oauthService: OAuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (request.url.includes(this.discordHostname)) {\n      const Authorization = `Bearer ${this.oauthService.getAccessToken()}`;\n      request = request.clone({ setHeaders: { Authorization }});\n    }\n    return next.handle(request);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "ImageFallbackDirective",
            "id": "directive-ImageFallbackDirective-4c67956706ea5aedb8b495f41ea6bae938edb5b75f492c98405c203546959fd7aee1d1c459d8d2a52c2f50bfe51d97435adf5a7e657a40908fcce80be690f6bb",
            "file": "src/app/shared/image-fallback.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, HostListener, Input} from '@angular/core';\n\n@Directive({\n  selector: 'img[appImageFallback]'\n})\nexport class ImageFallbackDirective {\n\n  @Input() fallbackUrl: string = '';\n\n  constructor(private eRef: ElementRef) { }\n\n  @HostListener('error')\n  loadOnFallbackError() {\n    const element: HTMLImageElement = <HTMLImageElement>this.eRef.nativeElement;\n    element.src = this.fallbackUrl || 'https://img.pokemondb.net/sprites/black-white/anim/normal/ditto.gif';\n  }\n}\n",
            "selector": "img[appImageFallback]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "fallbackUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "error",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loadOnFallbackError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'error'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f97ef0f903f485a9b0653849df8bf660c8eb6fcab2226c9e21098199cd0cf6d9b8516a59645ea52546abdc498dd068e3566ce74def95ad92009a5b2d4c82f1ac",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "applicationDetailsLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "applicationDetailsSub$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "appVersion",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "darkModeFormControl",
                    "defaultValue": "new FormControl(localStorage.getItem('darkMode') === 'true')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "userDetailsLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userDetailsSub$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToUserProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToWelcomePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDarkMode",
                    "args": [
                        {
                            "name": "turnDarkModeOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "turnDarkModeOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding, OnDestroy, OnInit} from '@angular/core';\nimport {NavigationEnd, Router} from \"@angular/router\";\nimport {UserDetailsService} from \"./services/user-details.service\";\nimport {UserDetails} from \"./interfaces/user-details\";\nimport {Observable, Subscription} from \"rxjs\";\nimport {environment} from \"../environments/environment\";\nimport {GoogleAnalyticsService} from \"./google-analytics.service\";\nimport {ApplicationDetailsService} from \"./services/application-details.service\";\nimport {FormControl} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy{\n  appVersion: string = environment.version;\n  userDetailsLoaded: boolean = false;\n  applicationDetailsLoaded: boolean = false;\n  userDetailsSub$?: Subscription;\n  applicationDetailsSub$?: Subscription;\n  username: string = '';\n\n  darkModeFormControl = new FormControl(localStorage.getItem('darkMode') === 'true');\n\n  @HostBinding('class') className = '';\n\n  constructor(private router: Router,\n              private userDetailsService: UserDetailsService,\n              private applicationDetailsService: ApplicationDetailsService,\n              private googleAnalyticsService: GoogleAnalyticsService) {}\n\n  ngOnInit(): void {\n    this.toggleDarkMode(this.darkModeFormControl.value);\n    this.darkModeFormControl.valueChanges.subscribe((value) => this.toggleDarkMode(value));\n    this.router.events.subscribe(event => {\n      if(event instanceof NavigationEnd) {\n        this.googleAnalyticsService.sendPageNavigationEvent(event.urlAfterRedirects);\n      }\n    })\n    this.userDetailsSub$ = this.userDetailsService.getUserDetails().subscribe((userDetails) => {\n      if (userDetails.username && userDetails.username != '') {\n        this.username = userDetails.username;\n        this.userDetailsLoaded = true;\n      }\n    })\n    this.applicationDetailsSub$ = this.applicationDetailsService.getApplicationDetails().subscribe((appDetails) => {\n      if (Array.isArray(appDetails.userGuilds) && appDetails.userGuilds.length > 0)\n        this.applicationDetailsLoaded = true;\n    })\n  }\n\n  toggleDarkMode(turnDarkModeOn: boolean) {\n    const darkModeClassName = 'darkMode';\n    this.className = turnDarkModeOn ? darkModeClassName : '';\n    localStorage.setItem('darkMode', JSON.stringify(turnDarkModeOn));\n  }\n\n  ngOnDestroy() {\n    this.userDetailsSub$?.unsubscribe();\n    this.applicationDetailsSub$?.unsubscribe();\n  }\n\n  navigateToWelcomePage() {\n    this.router.navigate(['/']);\n  }\n\n  navigateToTeams() {\n    this.router.navigate(['/teams']);\n  }\n\n  navigateToUserProfile() {\n    this.router.navigate(['/user-profile']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-card {\n  max-width: 400px;\n}\n\n.main-page {\n  padding: 1em;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.dashboard {\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n}\n\n@media only screen and (max-width: 500px) {\n  :host {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n}\n\n@media only screen and (min-width: 501px) {\n  :host {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-between;\n  }\n}\n\n.clash-bot-discord-username {\n  margin-left: 1em;\n}\n\n.copyright-text {\n  text-align: left;\n  opacity: 30%;\n}\n\n.clash-bot-spacer {\n  flex: 1 1 auto;\n}\n\n.clash-bot-footer-details-container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.clash-welcome-buttons {\n  display: flex;\n  align-content: space-between;\n}\n\n.clash-bot-footer {\n  margin-top: 1em;\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "googleAnalyticsService",
                        "type": "GoogleAnalyticsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "googleAnalyticsService",
                        "type": "GoogleAnalyticsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\">\n    <mat-toolbar color=\"primary\">\n        <button id='clash-bot-menu' mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"tabs\">\n            <mat-icon>menu</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button id='clash-bot-menu-welcome-page' mat-menu-item (click)=\"navigateToWelcomePage()\">\n                <mat-icon>house</mat-icon>\n                <span>Welcome Page</span>\n            </button>\n            <button id='clash-bot-menu-teams-page' *ngIf=\"userDetailsLoaded && applicationDetailsLoaded\" mat-menu-item\n                    (click)=\"navigateToTeams()\">\n                <mat-icon>groups</mat-icon>\n                <span>Clash Teams</span>\n            </button>\n            <button id='clash-bot-menu-user-profile-page' *ngIf=\"userDetailsLoaded && applicationDetailsLoaded\"\n                    mat-menu-item\n                    (click)=\"navigateToUserProfile()\">\n                <mat-icon>settings</mat-icon>\n                <span>Settings</span>\n            </button>\n        </mat-menu>\n        <span class=\"title\">Clash Bot</span>\n        <span class=\"clash-bot-spacer\"></span>\n        <mat-slide-toggle [formControl]=\"darkModeFormControl\">\n            <mat-icon *ngIf=\"darkModeFormControl.value; else elseBlock\">dark_mode</mat-icon>\n            <ng-template #elseBlock>\n                <mat-icon>light_mode</mat-icon>\n            </ng-template>\n        </mat-slide-toggle>\n        <span *ngIf=\"userDetailsLoaded && applicationDetailsLoaded\"\n              id=\"clash-bot-discord-username\"\n            class=\"clash-bot-discord-username\">{{ username }}</span>\n    </mat-toolbar>\n</div>\n<div class=\"main-page\">\n    <router-outlet></router-outlet>\n    <div class=\"clash-bot-footer footer\">\n        <mat-card>\n            <div class=\"clash-bot-footer-details-container\">\n                <mat-card-content class=\"copyright-text\">Copyright 2021 - Poss11111</mat-card-content>\n                <mat-card-content>Version: {{appVersion}}</mat-card-content>\n            </div>\n            <mat-card-content class=\"disclaimer-text\">Clash-Bot is not endorsed by Riot Games and does not reflect the\n                views\n                or opinions of\n                Riot Games or anyone officially involved in producing or managing League of Legends. League of Legends\n                and Riot\n                Games are trademarks or registered trademarks of Riot Games, Inc. League of Legends © Riot Games, Inc.\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n\n"
        },
        {
            "name": "ClashTournamentCalendarComponent",
            "id": "component-ClashTournamentCalendarComponent-9bab8c2a148f7efdd8c38b2300cb3e7a99ae1900c2f2f800c7b93e23ff907d6c3d3d82a30fead3c20b0732d7c70bc6b2df4d365a473a3ec48188564e5d71997a",
            "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clash-tournament-calendar",
            "styleUrls": [
                "./clash-tournament-calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clash-tournament-calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "daysSelected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarHeaderComponent",
                    "defaultValue": "ClashTournamentCalendarHeaderComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isSelected",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ClashTournamentCalendarHeaderComponent} from \"../clash-tournament-calendar-header/clash-tournament-calendar-header.component\";\n\n@Component({\n  selector: 'app-clash-tournament-calendar',\n  templateUrl: './clash-tournament-calendar.component.html',\n  styleUrls: ['./clash-tournament-calendar.component.scss']\n})\nexport class ClashTournamentCalendarComponent {\n\n  @Input()\n  daysSelected: any[] = [];\n\n  isSelected = (event: any) => {\n    return this.daysSelected.find(x => (x.getMonth() + 1).toString() == (event.getMonth() + 1).toString() && x.getDate().toString() == event.getDate().toString()) ? \"selected\" : \"notselected\";\n  };\n\n  event: any;\n  minDate: Date = new Date();\n  calendarHeaderComponent: any = ClashTournamentCalendarHeaderComponent;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-inline-calendar-card {\n  max-width: 450px;\n}",
                    "styleUrl": "./clash-tournament-calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "templateData": " <mat-card class=\"demo-inline-calendar-card\">\n   <mat-card-content>\n    <mat-calendar [dateClass]=\"isSelected\"\n                  [minDate]=\"minDate\"\n                  [headerComponent]=\"calendarHeaderComponent\"></mat-calendar>\n   </mat-card-content>\n  </mat-card>\n"
        },
        {
            "name": "ClashTournamentCalendarHeaderComponent",
            "id": "component-ClashTournamentCalendarHeaderComponent-1c44294d25f5e58d4adf4ae1dc617547fa659a0ef703a350a42c8bc669107e67d9d6e6b8eb1f99ca773bd53df9b27f81af32a923064f393f49eac0fe80f0ff62",
            "file": "src/app/clash-tournament-calendar-header/clash-tournament-calendar-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clash-tournament-calendar-header",
            "styleUrls": [
                "./clash-tournament-calendar-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clash-tournament-calendar-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "monthsPastDate",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "nextClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {MatCalendar} from \"@angular/material/datepicker\";\n\n@Component({\n  selector: 'app-clash-tournament-calendar-header',\n  templateUrl: './clash-tournament-calendar-header.component.html',\n  styleUrls: ['./clash-tournament-calendar-header.component.scss']\n})\nexport class ClashTournamentCalendarHeaderComponent {\n\n  monthsPastDate: number = 0;\n\n  constructor(private calendar: MatCalendar<any>) {}\n\n  prevClicked() {\n    if(this.monthsPastDate > 0) {\n      this.monthsPastDate--;\n      this.calendar._goToDateInView(new Date(new Date().setMonth(this.calendar.activeDate.getMonth() - 1)), 'month');\n    }\n  }\n\n  nextClicked() {\n    this.monthsPastDate++;\n    this.calendar._goToDateInView(new Date(new Date().setMonth(this.calendar.activeDate.getMonth() + 1)), 'month');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-calendar-header-button-container {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n}",
                    "styleUrl": "./clash-tournament-calendar-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "calendar",
                        "type": "MatCalendar<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "calendar",
                        "type": "MatCalendar<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clash-bot-calendar-header\">\n    <h2>Upcoming Clash Tournaments</h2>\n    <div class=\"clash-bot-calendar-header-button-container\">\n        <button mat-icon-button id=\"clash-bot-calendar-header-button-prev\" (click)=\"prevClicked()\" [disabled]=\"monthsPastDate <= 0\" aria-label=\"previous\">\n            <mat-icon>chevron_left</mat-icon>\n        </button>\n        <button mat-icon-button id=\"clash-bot-calendar-header-button-next\" (click)=\"nextClicked()\" aria-label=\"next\">\n            <mat-icon>chevron_right</mat-icon>\n        </button>\n    </div>\n</div>\n"
        },
        {
            "name": "ComponentTestingComponent",
            "id": "component-ComponentTestingComponent-ca692a4693c4e6f271c5a20cb553238fd06f79b621d85dbdb64d29992c01ec891cdcf5f5ac1bd171beff5a3d244e62eb8e9b84a86913728bc190d1c83976c333",
            "file": "src/app/pages/component-testing/component-testing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-component-testing",
            "styleUrls": [
                "./component-testing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./component-testing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sampleTeam",
                    "defaultValue": "{\n    teamName: 'Team Charizard',\n    playersDetails: [\n      {\n        name: 'Roidrage',\n        id: 1,\n        role: 'Top',\n        champions: ['Sett', 'Volibear', 'Ornn'],\n        isUser: true\n      },\n      {\n        name: 'TheIncentive',\n        id: 1,\n        role: 'Bot',\n        champions: ['Lucian', 'Senna', 'Jhin']\n      }\n    ],\n    tournamentDetails: {\n      tournamentName: 'awesome_sauce',\n      tournamentDay: '1'\n    },\n    serverName: 'Goon Squad',\n    startTime: new Date().toISOString(),\n    id: 'charizard'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTeam",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "openReleaseNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {ClashTeam} from \"../../interfaces/clash-team\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ReleaseNotificationDialogComponent} from \"../../dialogs/release-notification-dialog/release-notification-dialog.component\";\n\n@Component({\n  selector: 'app-component-testing',\n  templateUrl: './component-testing.component.html',\n  styleUrls: ['./component-testing.component.scss']\n})\nexport class ComponentTestingComponent {\n\n  sampleTeam: ClashTeam = {\n    teamName: 'Team Charizard',\n    playersDetails: [\n      {\n        name: 'Roidrage',\n        id: 1,\n        role: 'Top',\n        champions: ['Sett', 'Volibear', 'Ornn'],\n        isUser: true\n      },\n      {\n        name: 'TheIncentive',\n        id: 1,\n        role: 'Bot',\n        champions: ['Lucian', 'Senna', 'Jhin']\n      }\n    ],\n    tournamentDetails: {\n      tournamentName: 'awesome_sauce',\n      tournamentDay: '1'\n    },\n    serverName: 'Goon Squad',\n    startTime: new Date().toISOString(),\n    id: 'charizard'\n  }\n\n  constructor(private dialog: MatDialog) { }\n\n  openReleaseNotification() {\n    this.dialog.open(ReleaseNotificationDialogComponent, {autoFocus: false});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".component-testing-container {\n display: flex;\n}",
                    "styleUrl": "./component-testing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"component-testing-container\">\n    <app-team-card [team]=\"sampleTeam\"></app-team-card>\n</div>\n<button (click)=\"openReleaseNotification()\">Release!</button>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-65e89cb18fadf1868fc2e1d62ebc495c6ebaa5a257971e43581b6c562b6fd56ce9de0c46c74c178dd9488159c659dc8929c245eb057f377bb2d7c8e0f15c8081",
            "file": "src/app/dialogs/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog",
            "styleUrls": [
                "./confirmation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject} from '@angular/core';\nimport {DialogData} from \"../../interfaces/dialog-data\";\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-confirmation-dialog-button-container {\n  display: flex;\n  justify-content: space-around;\n}\n",
                    "styleUrl": "./confirmation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div>\n  <div>\n    <p>{{ data.message }}</p>\n  </div>\n  <div class=\"clash-bot-confirmation-dialog-button-container\">\n    <button mat-raised-button mat-dialog-close id=\"clash-bot-dialog-box-no-button\">No</button>\n    <button mat-raised-button [mat-dialog-close]=\"true\" color=\"primary\" id=\"clash-bot-dialog-box-yes-button\">Yes</button>\n  </div>\n</div>\n"
        },
        {
            "name": "GuildFilterListComponent",
            "id": "component-GuildFilterListComponent-82bef2fd528f60214d79c505e5443ba3452ca5510af1a25a1d8531c2c82271faccf85794287b7e9ebc76aa816149e9c5a19cc079ccb5993883310041a6ab8e3e",
            "file": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-guild-filter-list",
            "styleUrls": [
                "./guild-filter-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./guild-filter-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "teamFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TeamFilter[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedTeamEvent",
                    "defaultValue": "new EventEmitter<String>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<String>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "filterTeam",
                    "args": [
                        {
                            "name": "chip",
                            "type": "MatChip",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chip",
                            "type": "MatChip",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {FormControl} from \"@angular/forms\";\nimport {TeamFilter} from \"../../../interfaces/team-filter\";\nimport {MatChip} from \"@angular/material/chips\";\n\n@Component({\n  selector: 'app-guild-filter-list',\n  templateUrl: './guild-filter-list.component.html',\n  styleUrls: ['./guild-filter-list.component.scss']\n})\nexport class GuildFilterListComponent {\n\n  formControl?: FormControl;\n\n  @Input()\n  teamFilters: TeamFilter[] = [];\n\n  @Output()\n  selectedTeamEvent: EventEmitter<String> = new EventEmitter<String>();\n\n  constructor() { }\n\n  filterTeam(chip: MatChip) {\n    chip.selected ? chip.deselect() : chip.selectViaInteraction();\n    if (this.formControl) {\n      this.selectedTeamEvent.emit(this.formControl.value.trimLeft());\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./guild-filter-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "templateData": "<mat-chip-list\n        [formControl]=\"formControl\"\n        [multiple]=\"false\">\n    <mat-chip\n        #chip=\"matChip\"\n        *ngFor=\"let filter of teamFilters\"\n        id=\"clash-bot-teams-{{filter.id}}\"\n        [selected]=\"filter.state\"\n        [value]=\"filter.value\"\n        (click)=\"filterTeam(chip)\">\n        {{filter.value}}\n    </mat-chip>\n</mat-chip-list>"
        },
        {
            "name": "HelpDialogComponent",
            "id": "component-HelpDialogComponent-16d2d665aa258c7f14568fb49d346ff0abfb1fa65c551db494b0b0c0b0c02e09937c90b6c269d28fd72f340290f8e38d3528532e97820ebd818e43aa8fa562ca",
            "file": "src/app/pages/teams-dashboard/help-dialog/help-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-help-dialog",
            "styleUrls": [
                "./help-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./help-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "showHelpDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {TeamsDashboardHelpDialogComponent} from \"../teams-dashboard-help-dialog/teams-dashboard-help-dialog.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'app-help-dialog',\n  templateUrl: './help-dialog.component.html',\n  styleUrls: ['./help-dialog.component.scss']\n})\nexport class HelpDialogComponent {\n\n  constructor(private dialog: MatDialog) { }\n\n  showHelpDialog() {\n    this.dialog.open(TeamsDashboardHelpDialogComponent);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-teams-dashboard-header {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.clash-bot-teams-dashboard-header > h2 {\n  margin: 0;\n}",
                    "styleUrl": "./help-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clash-bot-teams-dashboard-header\">\n    <h2 id=\"clash-bot-teams-header\">Your available Servers to filter by</h2>\n    <button aria-label=\"Help Me!\" mat-icon-button (click)=\"showHelpDialog()\">\n        <mat-icon>help_outline</mat-icon>\n    </button>\n</div>"
        },
        {
            "name": "ReleaseNotificationDialogComponent",
            "id": "component-ReleaseNotificationDialogComponent-5669c594a5eae3d7f00802c9d3fd05edbc0bfdf3556153614749bce441ec154dee8dd19b1f3ae664e900620c831712124875077b70d392885c783ef4a1f1ffde",
            "file": "src/app/dialogs/release-notification-dialog/release-notification-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-release-notification-dialog",
            "styleUrls": [
                "./release-notification-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./release-notification-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-release-notification-dialog',\n  templateUrl: './release-notification-dialog.component.html',\n  styleUrls: ['./release-notification-dialog.component.scss']\n})\nexport class ReleaseNotificationDialogComponent {\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-release-notification-header {\n  font-family: 'Kaushan Script', cursive;\n}",
                    "styleUrl": "./release-notification-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<h1 mat-dialog-title class=\"clash-bot-release-notification-header\">ClashBot - Release Notification</h1>\n<mat-dialog-content>\n    <div class=\"clash-bot-release-notification-list\">\n        <div class=\"clash-bot-release-notification-release\">\n            <markdown id=\"clash-bot-release-notification-markdown-container\" src=\"assets/ReleaseNotification.md\"></markdown>\n        </div>\n    </div>\n    <mat-dialog-actions align=\"end\">\n        <button mat-raised-button mat-dialog-close id=\"clash-bot-release-notification-button-dismiss\">Dismiss</button>\n    </mat-dialog-actions>\n</mat-dialog-content>"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-b268bdaa9ae1800f2094e196860fd5032d72b8ad37d5e803abe6948bea8e50e094b1b5884578c10de896e11f04b7da1b6d840e06857b5f787372fb9d3e1aa1da",
            "file": "src/app/shared/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showSpinner",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent {\n\n  @Input()\n  showSpinner: boolean = false;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".progress-spinner {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.loading-text {\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n}\n\n.loading-animation {\n  display: flex;\n}\n\n.animated-dot-one {\n  animation-duration: 3s;\n  animation-name: slidein;\n  animation-delay: 0.5s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n.animated-dot-two {\n  animation-duration: 3s;\n  animation-name: slidein;\n  animation-delay: 0.75s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n.animated-dot-three {\n  animation-duration: 3s;\n  animation-name: slidein;\n  animation-delay: 1s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n@keyframes slidein {\n  from {\n    margin-left:40%;\n  }\n}",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"progress-spinner\">\n    <mat-progress-spinner\n            class=\"example-margin\"\n            color=\"primary\"\n            mode=\"indeterminate\"\n            aria-label=\"Loading Team Data...\">\n    </mat-progress-spinner>\n    <div class=\"loading-text\">\n        <h2>Loading your requested data</h2>\n        <div class=\"loading-animation\">\n            <h2 class=\"animated-dot-one\">.</h2>\n            <h2 class=\"animated-dot-two\">.</h2>\n            <h2 class=\"animated-dot-three\">.</h2>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "TeamCardComponent",
            "id": "component-TeamCardComponent-5a131d04f5059927a71d3770d015edda5dc80e046f9511ceb25c96f909f68479864093d802d154cc4fb28a52f40f891cfb3bfd329e2078bc8006e21012057c5a",
            "file": "src/app/pages/teams-dashboard/team-card/team-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-card",
            "styleUrls": [
                "./team-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "team",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "ClashTeam",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "registerUser",
                    "defaultValue": "new EventEmitter<ClashBotUserRegister>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<ClashBotUserRegister>"
                },
                {
                    "name": "unregisterUser",
                    "defaultValue": "new EventEmitter<ClashTeam>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<ClashTeam>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dateFormat",
                    "defaultValue": "'MMM d, y h:mm a'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "pokemonName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "timezoneOffset",
                    "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerToTeam",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ClashTeam, PlayerDetails} from \"../../../interfaces/clash-team\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ConfirmationDialogComponent} from \"../../../dialogs/confirmation-dialog/confirmation-dialog.component\";\nimport {ClashBotUserRegister} from \"../../../interfaces/clash-bot-user-register\";\nimport {Observable, Subject, Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-team-card',\n  templateUrl: './team-card.component.html',\n  styleUrls: ['./team-card.component.scss']\n})\nexport class TeamCardComponent implements OnInit {\n\n  @Input()\n  team: ClashTeam = {};\n\n  @Output()\n  registerUser: EventEmitter<ClashBotUserRegister> = new EventEmitter<ClashBotUserRegister>();\n\n  @Output()\n  unregisterUser: EventEmitter<ClashTeam> = new EventEmitter<ClashTeam>();\n\n  pokemonName: string = '';\n  dateFormat: string = 'MMM d, y h:mm a';\n  timezoneOffset: string = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {\n    if (this.team\n        && !this.team.tournamentDetails) {\n      this.team.tournamentDetails = {\n        tournamentName: 'Placeholder',\n        tournamentDay: '1'\n      };\n    }\n    if(this.team && this.team.teamName) {\n      this.pokemonName = this.team.teamName.split(' ')[1].toLowerCase();\n    }\n  }\n\n  registerToTeam(role?: string) {\n    let dialogRef = this.dialog.open(ConfirmationDialogComponent,\n      {data: { message: `Are you sure you want to register to this Team as ${role}?`}});\n    console.log(this.team.teamName + \" -> \" + role);\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const clashBotUserRegister: ClashBotUserRegister = {\n          role: role,\n          teamName: this.team.teamName,\n          serverName: this.team.serverName,\n          tournamentDetails: {\n            tournamentName: this.team.tournamentDetails?.tournamentName,\n            tournamentDay: this.team.tournamentDetails?.tournamentDay,\n          }\n        };\n        this.registerUser.emit(clashBotUserRegister);\n      }\n    })\n  }\n\n  unregisterFromTeam() {\n    let dialogRef = this.dialog.open(ConfirmationDialogComponent,\n      {data: { message: 'Are you sure you want to unregister from this Team?'}});\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.unregisterUser.emit(this.team);\n      }\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (max-width: 500px) {\n  .clash-bot-team-card {\n    max-width: 250px;\n  }\n}\n\n@media only screen and (min-width: 501px) {\n  .clash-bot-team-card {\n    max-width: 400px;\n  }\n}\n\n.clash-bot-button-container {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.player-champion-list-container {\n  margin-left: 1em;\n}\n\n.clash-bot-player-details-container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.clash-bot-role-button {\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./team-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card id=\"clash-bot-team-card\" class=\"clash-bot-team-card\">\n    <div *ngIf=\"!team.error; else elseBlock\">\n        <mat-card-header>\n            <img mat-card-avatar\n                 [src]=\"'https://img.pokemondb.net/sprites/black-white/anim/normal/' + pokemonName + '.gif'\"\n            appImageFallback/>\n            <mat-card-title [id]=\"'clash-bot-team-card-' + team.id + '-title'\">{{team.serverName}}\n                - {{team.teamName}}</mat-card-title>\n            <mat-card-subtitle [id]=\"'clash-bot-team-card-' + team.id + '-subtitle-tournament'\"\n                               *ngIf=\"team.tournamentDetails\">{{ team.tournamentDetails.tournamentName | tournamentNameTransformer }} -\n                Day {{team.tournamentDetails.tournamentDay}}</mat-card-subtitle>\n            <mat-card-subtitle [id]=\"'clash-bot-team-card-' + team.id + '-subtitle-start'\">Start\n                Time: {{team.startTime | date:dateFormat:timezoneOffset }}\n            </mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content [id]=\"'clash-bot-team-card-' + team.id + '-players'\">\n              <app-team-card-player-details *ngIf=\"team.playersDetails\"\n                                            [player]=\"team.playersDetails[0]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.playersDetails\"\n                                            [player]=\"team.playersDetails[1]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.playersDetails\"\n                                            [player]=\"team.playersDetails[2]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.playersDetails\"\n                                            [player]=\"team.playersDetails[3]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.playersDetails\"\n                                            [player]=\"team.playersDetails[4]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n        </mat-card-content>\n    </div>\n    <ng-template #elseBlock>\n        <mat-card-content id=\"clash-bot-team-card-no-data\">\n            <h2>No Data :(</h2>\n        </mat-card-content>\n    </ng-template>\n</mat-card>\n"
        },
        {
            "name": "TeamCardPlayerDetailsComponent",
            "id": "component-TeamCardPlayerDetailsComponent-6259d982a56f7490cc068baf782283baac1fe236189f2928c93b2e41523717a9ead53e931e162091362e1fa71945ed3903d385a156095865b5854ee640b6c16d",
            "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-card-player-details",
            "styleUrls": [
                "./team-card-player-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-card-player-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "defaultValue": "new Observable<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Observable<boolean>",
                    "decorators": []
                },
                {
                    "name": "player",
                    "defaultValue": "{name: 'Hello', id: 1, role: 'Top', champions: []}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "PlayerDetails",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "registerUserForRole",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "unregisterUserForRole",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "button",
                    "defaultValue": "{\n        disappear: false\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "playerDetails",
                    "defaultValue": "{name: 'Hello', id: 1, role: 'Top', champions: []}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerDetails",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showPlayerDetails",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "text",
                    "defaultValue": "{\n        disappear: false\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerToTeam",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    OnChanges, SimpleChanges, ChangeDetectionStrategy\n} from '@angular/core';\nimport {PlayerDetails} from \"../../../../interfaces/clash-team\";\nimport {Observable, Subscription} from \"rxjs\";\n\n@Component({\n    selector: 'app-team-card-player-details',\n    templateUrl: './team-card-player-details.component.html',\n    styleUrls: ['./team-card-player-details.component.scss']\n})\nexport class TeamCardPlayerDetailsComponent implements OnInit, OnChanges {\n\n    @Input()\n    player: PlayerDetails = {name: 'Hello', id: 1, role: 'Top', champions: []};\n\n    playerDetails: PlayerDetails = {name: 'Hello', id: 1, role: 'Top', champions: []};\n\n    @Input()\n    event: Observable<boolean> = new Observable<boolean>();\n\n    @Output()\n    registerUserForRole: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output()\n    unregisterUserForRole: EventEmitter<string> = new EventEmitter<string>();\n\n    showPlayerDetails: boolean = false;\n\n    button = {\n        disappear: false\n    }\n\n    text = {\n        disappear: false\n    }\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        Object.assign(this.playerDetails, this.player);\n        this.showPlayerDetails = this.playerDetails.name !== '';\n        if (this.showPlayerDetails) {\n            this.text.disappear = false;\n            this.button.disappear = true;\n        } else {\n            this.text.disappear = true;\n            this.button.disappear = false;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.player && !changes.player.isFirstChange()) {\n                if (changes.player.currentValue.name !== '') {\n                    this.button.disappear = true;\n                    setTimeout(() => {\n                        Object.assign(this.playerDetails, this.player);\n                        this.showPlayerDetails = true;\n                        this.text.disappear = false;\n                    }, 300);\n                } else {\n                    this.text.disappear = true;\n                    setTimeout(() => {\n                        Object.assign(this.playerDetails, this.player);\n                        this.showPlayerDetails = false;\n                        this.button.disappear = false;\n                    }, 300);\n                }\n        }\n    }\n\n    registerToTeam(role: string) {\n        this.registerUserForRole.emit(role);\n    }\n\n    unregisterFromTeam() {\n        this.unregisterUserForRole.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\n@use '@angular/material' as mat;\n\n.clash-bot-player-details-container {\n  width: 100%;\n}\n\n.clash-bot-role-button {\n  display: flex;\n  align-items: center;\n}\n\n.player-role-player-details-inner-container {\n  width: 100%;\n}\n\n.player-role-join-container {\n  width: 100%;\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: center;\n}\n\n.player-details-player-inner-container {\n  transition: opacity 200ms 0s;\n  opacity: 100;\n}\n\n.player-role-join-text {\n  margin-top: 16px;\n}\n\n.player-role-join-btn {\n  border-radius: 11px;\n  box-shadow: 1px 1px 1px 1px black;\n  transition: width 200ms cubic-bezier(0.35, 0, 0.25, 1), background-color 300ms cubic-bezier(0.35, 0, 0.25, 1), opacity 200ms 0s;\n  opacity: 100;\n  width: 100%;\n}\n\n.player-role-join-btn:hover {\n  width: 90%;\n}\n\n.player-details-text {\n  margin-top: 16px;\n}\n\n.player-details-player-container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.disappear {\n  opacity: 0;\n}\n\n.appear {\n  opacity: 100;\n}\n\n.player-role-text--update {\n  opacity: 0;\n}\n\n.champion-container {\n  display: flex;\n  gap: 10px;\n  padding-bottom: 0.5em;\n}\n\n.champion-container:last-child {\n  padding-bottom: 0;\n}\n\n.champion-img {\n  width: 50px;\n  height: auto;\n}\n\n.champion-img:nth-child {\n\n}\n\n.champion-name {\n  font-style: italic;\n}\n\n",
                    "styleUrl": "./team-card-player-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"clash-bot-player-details-container\">\n  <div class=\"player-role-player-details-inner-container\">\n    <ng-container *ngIf=\"!showPlayerDetails; else elseBlock\">\n      <div class=\"player-role-join-container\">\n        <button mat-raised-button\n                class=\"player-role-join-btn\"\n                [ngClass]=\"button\"\n                id=\"clash-bot-team-card-join-{{playerDetails.role | kebabcase}}-register-button\"\n                (click)=\"registerToTeam(playerDetails.role)\">\n          <h2 class=\"player-role-join-text\">{{playerDetails.role}}</h2>\n        </button>\n      </div>\n    </ng-container>\n    <ng-template #elseBlock>\n      <div class=\"player-details-player-container\">\n        <div id=\"clash-bot-team-card-registered-player\" class=\"player-details-player-inner-container\"\n             [ngClass]=\"text\">\n          <h2 id=\"clash-bot-team-card-registered-player-{{playerDetails.role | kebabcase}}\"\n              class=\"player-details-text\">{{playerDetails.role}} - {{playerDetails.name}}</h2>\n          <div id=\"clash-bott-team-card-registered-player-{{playerDetails.role | kebabcase}}-champion-list\"\n               class=\"player-champion-list-container\"\n               *ngIf=\"playerDetails.champions && playerDetails.champions.length > 0\">\n            <mat-accordion class=\"example-headers-align\" multi>\n              <mat-expansion-panel [expanded]=\"true\">\n                <mat-expansion-panel-header>\n                  <mat-panel-title>\n                    Champions\n                  </mat-panel-title>\n                  <mat-panel-description>\n                    <mat-icon>groups_3</mat-icon>\n                  </mat-panel-description>\n                </mat-expansion-panel-header>\n                <div class=\"champion-container\" *ngFor=\"let champion of playerDetails.champions\">\n                  <img class=\"champion-img\" src='http://ddragon.leagueoflegends.com/cdn/12.8.1/img/champion/{{champion}}.png'/>\n                  <p class=\"champion-name\" >{{champion}}</p>\n                </div>\n              </mat-expansion-panel>\n            </mat-accordion>\n          </div>\n        </div>\n        <div *ngIf=\"playerDetails.isUser\" class=\"clash-bot-role-button\">\n          <mat-card-content>\n            <div class=\"clash-bot-button-container\">\n              <button mat-mini-fab color=\"warn\"\n                      id=\"clash-bot-team-card-{{playerDetails.role | kebabcase}}-unregister-button\"\n                      (click)=\"unregisterFromTeam()\"\n                      aria-label=\"Unregister with this Team\">\n                <mat-icon>remove</mat-icon>\n              </button>\n            </div>\n          </mat-card-content>\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "TeamsDashboardComponent",
            "id": "component-TeamsDashboardComponent-483226d124102ab83a513ca7320096f83565d550579a38fa1011b10ca0cb3e4fc367916962c7be2864137d60bd62fa412ca317f7391396ff8f1a36d43946b2ba",
            "file": "src/app/pages/teams-dashboard/teams-dashboard/teams-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams-dashboard",
            "styleUrls": [
                "./teams-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$teamsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "createNewTeamFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "creatingNewTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['tournamentName', 'tournamentDay', 'tentativePlayers', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "eligibleTournaments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTournaments[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "MAX_TIMEOUT",
                    "defaultValue": "4000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "roleControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "roles",
                    "defaultValue": "{Top: 0, Mid: 1, Jg: 2, Bot: 3, Supp: 4}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "rolesAsString",
                    "defaultValue": "Object.keys(this.roles)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showSpinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showTentative",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<ClashBotTentativeDetails>",
                    "optional": true,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable"
                        }
                    ]
                },
                {
                    "name": "teamFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "teams",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tentativeDataStatus",
                    "defaultValue": "'NOT_LOADED'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "tentativeList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashBotTentativeDetails[]",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "tournamentControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewTeam",
                    "args": [
                        {
                            "name": "element",
                            "type": "MatOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 380,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "MatOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserToTournamentMap",
                    "args": [
                        {
                            "name": "currentUserId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clashTournaments",
                            "type": "ClashTournaments[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clashTeams",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUserId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clashTournaments",
                            "type": "ClashTournaments[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clashTeams",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterForTeamsByServer",
                    "args": [
                        {
                            "name": "valueToSearchFor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "valueToSearchFor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTeam",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClashTeamsError",
                    "args": [
                        {
                            "name": "snackBar",
                            "type": "MatSnackBar",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 371,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snackBar",
                            "type": "MatSnackBar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleIncomingTeamsWsEvent",
                    "args": [
                        {
                            "name": "message",
                            "type": "ClashTeam | String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "ClashTeam | String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapDynamicValues",
                    "args": [
                        {
                            "name": "data",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerForTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showHelpDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "syncTeamInformation",
                    "args": [
                        {
                            "name": "data",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "syncTournaments",
                    "args": [
                        {
                            "name": "clashTeams",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "clashTeams",
                            "type": "ClashTeam[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userDetails",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tentativeRegister",
                    "args": [
                        {
                            "name": "element",
                            "type": "ClashBotTentativeDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 431,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "ClashBotTentativeDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTentativeList",
                    "args": [
                        {
                            "name": "guildName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "guildName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTentativeListBasedOnTeam",
                    "args": [
                        {
                            "name": "mappedTeam",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mappedTeam",
                            "type": "ClashTeam",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ClashTeam, PlayerDetails} from \"../../../interfaces/clash-team\";\nimport {TeamFilter} from \"../../../interfaces/team-filter\";\nimport {Subscription, throwError} from \"rxjs\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {ClashBotService} from \"../../../services/clash-bot.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {FilterType} from \"../../../interfaces/filter-type\";\nimport {catchError, delay, finalize, retryWhen, take, tap, timeout} from \"rxjs/operators\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {UserDetailsService} from \"../../../services/user-details.service\";\nimport {UserDetails} from \"../../../interfaces/user-details\";\nimport {ClashTournaments} from \"../../../interfaces/clash-tournaments\";\nimport {ApplicationDetailsService} from \"../../../services/application-details.service\";\nimport {MatOption} from \"@angular/material/core\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {TeamsDashboardHelpDialogComponent} from \"../teams-dashboard-help-dialog/teams-dashboard-help-dialog.component\";\nimport {ClashBotTentativeDetails} from \"../../../interfaces/clash-bot-tentative-details\";\nimport {ConfirmationDialogComponent} from \"../../../dialogs/confirmation-dialog/confirmation-dialog.component\";\nimport {MatTable} from \"@angular/material/table\";\nimport {ClashBotUserRegister} from \"../../../interfaces/clash-bot-user-register\";\nimport {TeamsWebsocketService} from \"../../../services/teams-websocket.service\";\n\n@Component({\n    selector: 'app-teams-dashboard',\n    templateUrl: './teams-dashboard.component.html',\n    styleUrls: ['./teams-dashboard.component.scss']\n})\nexport class TeamsDashboardComponent implements OnInit {\n    roles: any = {Top: 0, Mid: 1, Jg: 2, Bot: 3, Supp: 4};\n    rolesAsString: string[] = Object.keys(this.roles);\n    teams: ClashTeam[] = [];\n    teamFilters: TeamFilter[] = [];\n    color: any;\n    mode: any;\n    value: any;\n    showSpinner: boolean;\n    formControl?: FormControl;\n    createNewTeamFormGroup: FormGroup;\n    tournamentControl: FormControl = new FormControl('');\n    roleControl: FormControl = new FormControl('');\n    private readonly MAX_TIMEOUT = 4000;\n    eligibleTournaments: ClashTournaments[] = [];\n    creatingNewTeam: boolean;\n    tentativeList?: ClashBotTentativeDetails[];\n    displayedColumns: string[] = ['tournamentName', 'tournamentDay', 'tentativePlayers', 'action'];\n    showTentative: boolean = false;\n    tentativeDataStatus: string = 'NOT_LOADED';\n    $teamsSub: Subscription | undefined;\n\n    @ViewChild(MatTable) table?: MatTable<ClashBotTentativeDetails>;\n\n    constructor(private clashBotService: ClashBotService,\n                private _snackBar: MatSnackBar,\n                private userDetailsService: UserDetailsService,\n                private applicationDetailsService: ApplicationDetailsService,\n                private dialog: MatDialog,\n                private teamsWebsocketService: TeamsWebsocketService) {\n        this.showSpinner = false;\n        this.creatingNewTeam = false;\n        this.createNewTeamFormGroup = new FormGroup({\n            tournament: this.tournamentControl,\n            role: this.roleControl\n        })\n    }\n\n    ngOnInit(): void {\n        this.applicationDetailsService.getApplicationDetails()\n            .pipe(take(1))\n            .subscribe((appDetails) => {\n                if (appDetails.userGuilds) {\n                    appDetails.userGuilds.forEach((record: any) => {\n                        this.teamFilters.push({\n                            value: record.name,\n                            type: FilterType.SERVER,\n                            state: record.name === appDetails.defaultGuild,\n                            id: record.name.replace(new RegExp(/ /, 'g'), '-').toLowerCase()\n                        });\n                    })\n\n                    this.formControl = new FormControl(appDetails.defaultGuild);\n                    if (appDetails.defaultGuild) {\n                        this.filterForTeamsByServer(appDetails.defaultGuild);\n                    }\n                }\n            })\n        this.color = 'primary';\n        this.mode = 'indeterminate';\n    }\n\n    updateTentativeList(guildName: string) {\n        this.tentativeDataStatus = 'LOADING';\n        this.userDetailsService.getUserDetails().pipe(take(1))\n            .subscribe((userDetails) => {\n                this.clashBotService.getServerTentativeList(guildName)\n                    .pipe(take(1),\n                        timeout(this.MAX_TIMEOUT),\n                        catchError((err: HttpErrorResponse) => {\n                            console.error(err);\n                            this._snackBar.open('Oops! We were unable to retrieve the Tentative details list for the server! Please try again later.',\n                                'X',\n                                {duration: 5 * 1000});\n                            this.tentativeDataStatus = 'FAILED';\n                            return throwError(err);\n                        }))\n                    .subscribe((data) => {\n                        data.forEach(tentativeRecord => tentativeRecord.isMember\n                            = tentativeRecord.tentativePlayers.includes(userDetails.username));\n                        data = data.sort((itemOne, itemTwo) =>\n                            itemOne.tournamentDetails.tournamentDay.localeCompare(itemTwo.tournamentDetails.tournamentDay));\n                        this.tentativeList = data;\n                        this.tentativeDataStatus = 'SUCCESSFUL';\n                    });\n            });\n    }\n\n    filterTeam(filterValue: string) {\n        if (this.$teamsSub) {\n            this.$teamsSub.unsubscribe();\n        }\n        this.showSpinner = true;\n        this.teams = [];\n        this.filterForTeamsByServer(filterValue);\n    }\n\n    private filterForTeamsByServer(valueToSearchFor: string) {\n        this.updateTentativeList(valueToSearchFor);\n        this.userDetailsService.getUserDetails()\n            .pipe(take(1))\n            .subscribe((userDetails) => {\n                if (!userDetails.username || userDetails.username === '') {\n                    this._snackBar.open('Oops! You are not logged in, please navigate to the Welcome page and login.',\n                        'X',\n                        {duration: 5 * 1000});\n                    this.teams = [{error: 'No data'}];\n                    this.showSpinner = false;\n                } else {\n                    this.clashBotService\n                        .getClashTeams(valueToSearchFor)\n                        .pipe(\n                            take(1),\n                            timeout(7000),\n                            catchError((err: HttpErrorResponse) => {\n                                console.error(err);\n                                this._snackBar.open('Failed to retrieve Teams. Please try again later.',\n                                    'X',\n                                    {duration: 5 * 1000});\n                                this.teams.push({error: err.message});\n                                return throwError(err);\n                            }),\n                            finalize(() => this.showSpinner = false)\n                        )\n                        .subscribe((data: ClashTeam[]) => {\n                            this.syncTeamInformation(data, userDetails);\n                            if (this.$teamsSub) this.$teamsSub.unsubscribe();\n                            this.teamsWebsocketService.getSubject().next(valueToSearchFor);\n                            this.$teamsSub = this.teamsWebsocketService.getSubject()\n                                .pipe(\n                                    retryWhen(errors =>\n                                        errors.pipe(\n                                            tap(err => {\n                                                console.error('Got error', err);\n                                            }),\n                                            delay(1000)\n                                        )\n                                    )\n                                )\n                                .subscribe((msg) => this.handleIncomingTeamsWsEvent(msg, userDetails),\n                                    () => {\n                                        this._snackBar.open('Oops! Failed to connect to server for Team updates, please try refreshing.',\n                                            'X',\n                                            {duration: 5 * 1000}),\n                                            this.teams = [{error: 'No data'}];\n                                    },\n                                    () => console.log('Connection closed to teams ws.'));\n                        })\n                }\n            })\n    }\n\n    handleIncomingTeamsWsEvent(message: ClashTeam | String, userDetails: UserDetails) {\n        let teamToBeUpdated = <ClashTeam>message;\n        if (teamToBeUpdated.teamName) {\n            let foundTeam = this.teams.find((team) =>\n                team.teamName === teamToBeUpdated.teamName\n                && team.tournamentDetails?.tournamentName === teamToBeUpdated.tournamentDetails?.tournamentName\n                && team.tournamentDetails?.tournamentDay === teamToBeUpdated.tournamentDetails?.tournamentDay);\n            if (!foundTeam) {\n                if (teamToBeUpdated.teamName) {\n                    let mappedTeam = this.mapDynamicValues([teamToBeUpdated], userDetails);\n                    this.updateTentativeListBasedOnTeam(mappedTeam[0]);\n                    if (this.teams.length === 1 && this.teams.find(team => team.error)) {\n                        this.teams = [...mappedTeam];\n                    } else {\n                        this.teams.push(...mappedTeam);\n                    }\n                }\n            } else if (teamToBeUpdated.playersDetails && teamToBeUpdated.playersDetails.length > 0) {\n                let mappedTeam = this.mapDynamicValues([teamToBeUpdated], userDetails);\n                this.updateTentativeListBasedOnTeam(mappedTeam[0]);\n                if (foundTeam.playersDetails && mappedTeam[0].playersDetails) {\n                    for (let i = 0; i < 5; i++) {\n                        let roleDetailsToUpdate = foundTeam.playersDetails[i];\n                        if (roleDetailsToUpdate) {\n                            let foundRecord = mappedTeam[0].playersDetails\n                                .find(record => record.role === roleDetailsToUpdate.role);\n                            if (foundRecord && roleDetailsToUpdate.name !== foundRecord.name) {\n                                foundTeam.playersDetails[i] = foundRecord;\n                            }\n                        }\n                    }\n                }\n            } else {\n                this.teams = this.teams.filter((team) => team.teamName !== teamToBeUpdated.teamName);\n            }\n            this.syncTournaments(this.teams, userDetails);\n        }\n    }\n\n    updateTentativeListBasedOnTeam(mappedTeam: ClashTeam) {\n        let playerNames: string[] = [];\n        if (mappedTeam.playersDetails) {\n            playerNames = mappedTeam.playersDetails?.map(details => details.name);\n        }\n        if (this.tentativeList && playerNames.length > 0) {\n            for (let i = 0; i < this.tentativeList?.length; i++) {\n                if (this.tentativeList[i].tournamentDetails.tournamentName === mappedTeam.tournamentDetails?.tournamentName\n                    && this.tentativeList[i].tournamentDetails.tournamentDay === mappedTeam.tournamentDetails?.tournamentDay) {\n                    let updatedTentative =\n                        this.tentativeList[i].tentativePlayers\n                            .filter((name) => !playerNames.includes(name));\n                    if (updatedTentative !== this.tentativeList[i].tentativePlayers\n                        && this.tentativeList[i].isMember) {\n                        this.tentativeList[i].isMember = false;\n                    }\n                    this.tentativeList[i].tentativePlayers = updatedTentative;\n                }\n            }\n        }\n    }\n\n    syncTeamInformation(data: ClashTeam[], userDetails: UserDetails) {\n        this.teams = this.mapDynamicValues(data, userDetails);\n        this.syncTournaments(data, userDetails);\n    }\n\n    private syncTournaments(clashTeams: ClashTeam[], userDetails: UserDetails) {\n        this.applicationDetailsService.getApplicationDetails()\n            .pipe(take(1))\n            .subscribe((applicationDetails) => {\n                if (applicationDetails && applicationDetails.currentTournaments) {\n                    if (clashTeams.length < 1) {\n                        this.teams = [{error: 'No data'}];\n                        this.eligibleTournaments = applicationDetails.currentTournaments;\n                    } else {\n                        let map = this.createUserToTournamentMap(userDetails.id, applicationDetails.currentTournaments, this.teams);\n                        let newEligibleTournaments: ClashTournaments[] = [];\n                        map.forEach((value, key) => {\n                            if (!value) {\n                                newEligibleTournaments.push(key);\n                            }\n                        });\n                        this.eligibleTournaments = newEligibleTournaments;\n                    }\n                }\n            });\n    }\n\n    private mapDynamicValues(data: ClashTeam[], userDetails: UserDetails) {\n        return data.map(record => {\n            record.id = `${record.serverName}-${record.teamName}`\n                .replace(new RegExp(/ /, 'g'), '-').toLowerCase();\n            let rolesMissing: string[] = [...Object.keys(this.roles)];\n            if (record.playersDetails) {\n                record.playersDetails.map((record) => {\n                    record.isUser = record.id === userDetails.id;\n                    rolesMissing = rolesMissing.filter(role => role !== record.role);\n                    return record;\n                });\n            }\n            if (!Array.isArray(record.playersDetails)\n                || record.playersDetails.length === 0) {\n                record.playersDetails = [];\n            }\n            for (let role in rolesMissing) {\n                record.playersDetails.push({name: '', id: 0, isUser: false, role: rolesMissing[role]});\n            }\n            record.playersDetails.sort((a: PlayerDetails, b: PlayerDetails) =>\n                this.roles[a.role] - this.roles[b.role] || a.role.localeCompare(b.role));\n            return record;\n        });\n    }\n\n    registerForTeam($event: ClashBotUserRegister) {\n        this.userDetailsService.getUserDetails()\n            .pipe(take(1))\n            .subscribe((userDetails) => {\n                if (!userDetails || !userDetails.username || userDetails.username === '') {\n                    this._snackBar.open('Oops! You are not logged in, please navigate to the Welcome page and login.',\n                        'X',\n                        {duration: 5 * 1000});\n                } else {\n                    this.clashBotService.registerUserForTeam(userDetails, $event)\n                        .pipe(\n                            timeout(7000),\n                            catchError((err) => {\n                                console.error(err);\n                                let errorMessage = 'Oops! Failed to register you to the Team, missing required details.';\n                                if (err.name === 'TimeoutError') {\n                                    errorMessage = 'Oops! Your registration timed out, please try again!';\n                                }\n                                this._snackBar.open(errorMessage,\n                                    'X',\n                                    {duration: 5 * 1000});\n                                return throwError(err);\n                            }),\n                            take(1)\n                        ).subscribe(() => console.log('Registered successfully.'));\n                }\n            })\n    }\n\n    unregisterFromTeam($event: ClashTeam) {\n        this.userDetailsService.getUserDetails()\n            .pipe(take(1))\n            .subscribe((userDetails) => {\n                if (!userDetails || !userDetails.username || userDetails.username === '') {\n                    this._snackBar.open('Oops! You are not logged in, please navigate to the Welcome page and login.',\n                        'X',\n                        {duration: 5 * 1000});\n                    this.teams = [{error: 'No data'}];\n                } else {\n                    this.clashBotService.unregisterUserFromTeam(userDetails, $event)\n                        .pipe(\n                            timeout(7000),\n                            take(1),\n                            catchError((err) => {\n                                console.error(err);\n                                let errorMessage = 'Oops! Failed to unregister you from the Team.';\n                                if (err.name === 'TimeoutError') {\n                                    errorMessage = 'Oops! Your request timed out, please try again!';\n                                }\n                                this._snackBar.open(errorMessage,\n                                    'X',\n                                    {duration: 5 * 1000});\n                                return throwError(err);\n                            })\n                        ).subscribe(() => console.log('Unregistered User successfully.'));\n                }\n            });\n    }\n\n    createUserToTournamentMap(currentUserId: number, clashTournaments: ClashTournaments[], clashTeams: ClashTeam[]) {\n        let tournamentToTeamUserMap = new Map<ClashTournaments, any>();\n        clashTournaments.forEach((tournament) =>\n            tournamentToTeamUserMap.set(tournament, clashTeams.find(team => {\n                let reducedMap;\n                if (team.playersDetails) {\n                    reducedMap = new Set(team.playersDetails.map(object => object.id));\n                }\n                return team.tournamentDetails\n                    && team.tournamentDetails.tournamentName === tournament.tournamentName\n                    && team.tournamentDetails.tournamentDay === tournament.tournamentDay\n                    && reducedMap\n                    && reducedMap.size === 2\n                    && reducedMap.has(currentUserId)\n            })));\n        return tournamentToTeamUserMap;\n    }\n\n    handleClashTeamsError(snackBar: MatSnackBar, err: HttpErrorResponse) {\n        console.error(err);\n        snackBar.open('Failed to retrieve Teams. Please try again later.',\n            'X',\n            {duration: 5 * 1000});\n        this.teams = [{error: err.message}];\n        return throwError(err);\n    }\n\n    createNewTeam(element: MatOption) {\n        element.select();\n        let role = this.roleControl.value;\n        let tournamentName = '';\n        let tournamentDay = '';\n        let clashTournaments: ClashTournaments | undefined;\n        if (this.tournamentControl.value) {\n            let split = this.tournamentControl.value.split(' ');\n            tournamentName = split[0];\n            tournamentDay = split[1];\n            clashTournaments = this.eligibleTournaments.find(tournament =>\n                tournament.tournamentName === tournamentName\n                && tournament.tournamentDay === tournamentDay);\n        }\n        let serverName = '';\n        if (this.formControl) {\n            serverName = this.formControl.value.trimLeft().trimRight();\n        }\n        if (role && tournamentName && tournamentDay) {\n            element.deselect();\n            this.userDetailsService.getUserDetails()\n                .pipe(take(1))\n                .subscribe((userDetails) => {\n                    this.clashBotService.createNewTeam(userDetails, {\n                            serverName: serverName,\n                            tournamentDetails: {\n                                tournamentName: tournamentName,\n                                tournamentDay: tournamentDay\n                            },\n                            startTime: clashTournaments?.startTime\n                        },\n                        role).pipe(\n                        catchError((err) => {\n                            console.error(err);\n                            this._snackBar.open('You are not able to create a new Team. Please try again later.',\n                                'X',\n                                {duration: 5 * 1000});\n                            this.teams = [{error: err.message}];\n                            return throwError(err);\n                        }),\n                        take(1),\n                    ).subscribe(() => console.log('Successfully created new team.'));\n                })\n            this.creatingNewTeam = false;\n        }\n    }\n\n    showHelpDialog() {\n        this.dialog.open(TeamsDashboardHelpDialogComponent);\n    }\n\n    tentativeRegister(element: ClashBotTentativeDetails, index: number) {\n        let actionMessage = 'added to';\n        if (element.isMember) {\n            actionMessage = 'removed from';\n        }\n        let dialogRef = this.dialog.open(ConfirmationDialogComponent,\n            {data: {message: `Are you sure you want to be ${actionMessage} the Tentative list for this tournament?`}});\n        dialogRef.afterClosed().pipe(take(1)).subscribe((result) => {\n            this.userDetailsService.getUserDetails()\n                .pipe(take(1))\n                .subscribe((userDetails) => {\n                    if (result) {\n                        this.clashBotService.postTentativeList(`${userDetails.id}`, element.serverName,\n                            element.tournamentDetails.tournamentName, element.tournamentDetails.tournamentDay)\n                            .pipe(take(1),\n                                catchError(err => {\n                                    console.error(err);\n                                    this._snackBar.open('Oops, we were unable to update the tentative list. Please try again later!',\n                                        'X',\n                                        {duration: 5 * 1000});\n                                    return throwError(err);\n                                })\n                            ).subscribe((response) => {\n                            response.isMember = response.tentativePlayers\n                                && response.tentativePlayers.includes(userDetails.username);\n                            if (this.tentativeList) {\n                                this.tentativeList[index] = response;\n                                if (this.table) this.table.renderRows();\n                            }\n                        });\n                    }\n                })\n        })\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".team-cards {\n  padding-top: 1em;\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n.team-card {\n  padding: 0.5em;\n}\n\n.chips-list {\n  width: 100%;\n}\n\n.clash-bot-teams-card-create-new-container {\n  display: flex;\n  justify-content: center;\n}\n\n.clash-bot-teams-card-create-new-forms {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.show-tentative-button-container {\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./teams-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clashBotService",
                        "type": "ClashBotService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamsWebsocketService",
                        "type": "TeamsWebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "clashBotService",
                        "type": "ClashBotService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamsWebsocketService",
                        "type": "TeamsWebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-spinner *ngIf=\"showSpinner\"></app-spinner>\n<div class=\"chips-list\" *ngIf=\"!showSpinner && formControl\">\n  <app-help-dialog></app-help-dialog>\n  <app-guild-filter-list (selectedTeamEvent)=\"filterTeam($event)\" )></app-guild-filter-list>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'LOADING'\" class=\"show-tentative-button-container\">\n  <mat-icon>hourglass_empty</mat-icon>\n  <div>Loading Tournament Details...</div>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'FAILED'\" class=\"show-tentative-button-container\">\n  <mat-icon>error</mat-icon>\n  <div>Unable to load Tournament Details for Server.</div>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'SUCCESSFUL'\" class=\"show-tentative-button-container\">\n  <button id=\"clash-bot-teams-dashboard-show-tentative\" mat-icon-button\n          aria-label=\"Show Tentative List\" (click)=\"showTentative = !showTentative\">\n    <mat-icon>pending</mat-icon>\n  </button>\n  <div>click to toggle view of upcoming Clash Tournaments</div>\n</div>\n<mat-table *ngIf=\"showTentative && tentativeList && tentativeDataStatus === 'SUCCESSFUL'\" [dataSource]=\"tentativeList\"\n           class=\"mat-elevation-z8\">\n  <ng-container matColumnDef=\"tournamentName\">\n    <mat-header-cell *matHeaderCellDef> Tournament</mat-header-cell>\n    <mat-cell\n      id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tournament-name\"\n      *matCellDef=\"let element\"> {{element.tournamentDetails.tournamentName}} </mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"tournamentDay\">\n    <mat-header-cell *matHeaderCellDef> Day</mat-header-cell>\n    <mat-cell\n      id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tournament-day\"\n      *matCellDef=\"let element\"> {{element.tournamentDetails.tournamentDay}} </mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"tentativePlayers\">\n    <mat-header-cell *matHeaderCellDef> Tentative Players</mat-header-cell>\n    <mat-cell\n      id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tentative-players\"\n      *matCellDef=\"let element\"> {{element.tentativePlayers}} </mat-cell>\n  </ng-container>\n  <ng-container matColumnDef=\"action\" stickyEnd>\n    <th mat-header-cell *matHeaderCellDef>+/-</th>\n    <td mat-cell *matCellDef=\"let element; index as i\">\n      <div *ngIf=\"!element.isMember; else elseBlock\">\n        <button\n          id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-add\"\n          mat-icon-button color=\"primary\"\n          aria-label=\"Add to Tentative\"\n          (click)=\"tentativeRegister(element, i)\">\n          <mat-icon>add</mat-icon>\n        </button>\n      </div>\n      <ng-template #elseBlock>\n        <button\n          id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-remove\"\n          mat-icon-button color=\"warn\"\n          aria-label=\"Remove from Tentative\"\n          (click)=\"tentativeRegister(element, i)\">\n          <mat-icon>remove</mat-icon>\n        </button>\n      </ng-template>\n    </td>\n  </ng-container>\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n</mat-table>\n<div class=\"team-cards\">\n  <app-team-card *ngFor=\"let team of teams; index as i;\" id=\"clash-bot-teams-card-{{team.id}}\" [team]=\"team\"\n                 class=\"team-card\" (registerUser)=\"registerForTeam($event)\"\n                 (unregisterUser)=\"unregisterFromTeam($event)\"></app-team-card>\n  <mat-card id=\"clash-bot-teams-card-create-new-team-card\"\n            *ngIf=\"eligibleTournaments.length > 0\">\n    <h2 *ngIf=\"!creatingNewTeam\">Create a new Team</h2>\n    <div class=\"clash-bot-teams-card-create-new-container\">\n      <button id=\"clash-bot-teams-card-create-new-button\" *ngIf=\"!creatingNewTeam\" mat-mini-fab color=\"primary\"\n              aria-label=\"Create a new Team\" (click)=\"creatingNewTeam = true\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <form [formGroup]=\"createNewTeamFormGroup\" class=\"clash-bot-teams-card-create-new-forms\">\n        <mat-form-field *ngIf=\"creatingNewTeam\" appearance=\"fill\">\n          <mat-label>Choose a Tournament</mat-label>\n          <mat-select id=\"clash-bot-teams-card-create-new-tournament-dropdown\"\n                      [formControl]=\"tournamentControl\" required>\n            <mat-option\n              [id]=\"'clash-bot-teams-card-create-new-dropdown-' + eligibleTournament.tournamentName + '-' + eligibleTournament.tournamentDay\"\n              #option=\"matOption\" (click)=\"createNewTeam(option)\" *ngFor=\"let eligibleTournament of eligibleTournaments\"\n              value=\"{{eligibleTournament.tournamentName}} {{eligibleTournament.tournamentDay}}\">{{eligibleTournament.tournamentName}}\n              - Day {{eligibleTournament.tournamentDay}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field *ngIf=\"creatingNewTeam\" appearance=\"fill\">\n          <mat-label>Choose a Role</mat-label>\n          <mat-select id=\"clash-bot-teams-card-create-new-role-dropdown\"\n                      [formControl]=\"roleControl\" required>\n            <mat-option\n              id=\"clash-bot-teams-card-create-new-dropdown-{{role | kebabcase}}\"\n              #option=\"matOption\" (click)=\"createNewTeam(option)\" *ngFor=\"let role of rolesAsString\"\n              value=\"{{role}}\">{{role}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </form>\n    </div>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "TeamsDashboardHelpDialogComponent",
            "id": "component-TeamsDashboardHelpDialogComponent-fe63f53f2f2e52eb81cc9eb30dce3bbc4d1e94ed37bd08f61cc9a3f6f5e1b8a4d96ecb3d41292dcb23602dd9aa3360a76e6699c91d20ca213adcc0dd63977e57",
            "file": "src/app/pages/teams-dashboard/teams-dashboard-help-dialog/teams-dashboard-help-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams-dashboard-help-dialog",
            "styleUrls": [
                "./teams-dashboard-help-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-dashboard-help-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-teams-dashboard-help-dialog',\n  templateUrl: './teams-dashboard-help-dialog.component.html',\n  styleUrls: ['./teams-dashboard-help-dialog.component.scss']\n})\nexport class TeamsDashboardHelpDialogComponent {\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-teams-dashboard-help-dialog-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 425px;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content-row {\n  display: flex;\n  flex-wrap: nowrap;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content-icon {\n  flex-basis: 8em;\n  display: flex;\n  justify-content: center;\n  align-self: center;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content-description {\n  flex: 1;\n}\n\n.clash-bot-teams-dashboard-help-dialog-player-role-join-text {\n  margin-top: 16px;\n}\n\n.clash-bot-teams-dashboard-help-dialog-player-role-join-btn {\n  background-color: white;\n  border: gray solid 0.5px;\n  border-radius: 11px;\n  box-shadow: 1px 1px 1px 1px black;\n  transition: width 200ms cubic-bezier(0.35, 0, 0.25, 1);\n  width: 80%;\n}\n\n.clash-bot-teams-dashboard-help-dialog-player-role-join-btn:hover {\n  width: 70%;\n  background-color: rgb(240, 240, 240);\n}\n",
                    "styleUrl": "./teams-dashboard-help-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"clash-bot-teams-dashboard-help-dialog-container\">\n  <h1 mat-dialog-title>Teams Dashboard Help Menu! Help is here!</h1>\n  <mat-dialog-content>\n    <div class=\"clash-bot-teams-dashboard-help-dialog-content\">\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <button class=\"clash-bot-teams-dashboard-help-dialog-player-role-join-btn\">\n            <h2 class=\"clash-bot-teams-dashboard-help-dialog-player-role-join-text\">Top</h2>\n          </button>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p>To add yourself to a Team.</p>\n        </div>\n      </div>\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <button mat-mini-fab color=\"primary\">\n            <mat-icon>remove</mat-icon>\n          </button>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p>To remove yourself from a Team.</p>\n        </div>\n      </div>\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <mat-chip>Goon Squad</mat-chip>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p>To filter Teams based on the selected Server.</p>\n        </div>\n      </div>\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <mat-icon>warning</mat-icon>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p style=\"font-weight: bolder\">DO NOT REFRESH ON THE TEAMS PAGE!</p>\n          <p> If you do, navigate back to the Welcome Page and then back to retrieve your User details again.\n            This app is still relatively new so you can help identify any issues! If you do face something that you do\n            not think is right, please use this <a href=\"https://forms.gle/wu4WBykZXZ7Jm5j26\">Google Form</a> to report\n            it. Thank you! :D</p>\n        </div>\n      </div>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-raised-button mat-dialog-close color=\"primary\">Close</button>\n  </mat-dialog-actions>\n</div>\n"
        },
        {
            "name": "TeamsTentativeTableComponent",
            "id": "component-TeamsTentativeTableComponent-5ab991bd4c0d9059d99ed3b439ccc9e31932b226feb780a583008c243c58fceaa2dd84b68c8ef39e45398cfc214280834a4fd8519af19d088bce42ab868d9526",
            "file": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams-tentative-table",
            "styleUrls": [
                "./teams-tentative-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-tentative-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "['tournamentName', 'tournamentDay', 'tentativePlayers', 'action']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showTentative",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tentativeDataStatus",
                    "defaultValue": "'NOT_LOADED'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tentativeList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashBotTentativeDetails[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "tentativeRegister",
                    "args": [
                        {
                            "name": "element",
                            "type": "ClashBotTentativeDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "ClashBotTentativeDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {ClashBotTentativeDetails} from \"../../../interfaces/clash-bot-tentative-details\";\n\n@Component({\n  selector: 'app-teams-tentative-table',\n  templateUrl: './teams-tentative-table.component.html',\n  styleUrls: ['./teams-tentative-table.component.scss']\n})\nexport class TeamsTentativeTableComponent {\n\n  tentativeList?: ClashBotTentativeDetails[];\n  displayedColumns: string[] = ['tournamentName', 'tournamentDay', 'tentativePlayers', 'action'];\n  tentativeDataStatus: string = 'NOT_LOADED';\n  showTentative: boolean = false;\n\n  constructor() { }\n\n  tentativeRegister(element: ClashBotTentativeDetails, index: number) {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./teams-tentative-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "templateData": "<div *ngIf=\"tentativeDataStatus === 'LOADING'\" class=\"show-tentative-button-container\">\n    <mat-icon>hourglass_empty</mat-icon>\n    <div>Loading Tournament Details...</div>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'FAILED'\" class=\"show-tentative-button-container\">\n    <mat-icon>error</mat-icon>\n    <div>Unable to load Tournament Details for Server.</div>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'SUCCESSFUL'\" class=\"show-tentative-button-container\">\n    <button id=\"clash-bot-teams-dashboard-show-tentative\" mat-icon-button\n            aria-label=\"Show Tentative List\" (click)=\"showTentative = !showTentative\">\n        <mat-icon>pending</mat-icon>\n    </button>\n    <div>click to toggle view of upcoming Clash Tournaments</div>\n</div>\n<mat-table *ngIf=\"showTentative && tentativeList && tentativeDataStatus === 'SUCCESSFUL'\" [dataSource]=\"tentativeList\"\n           class=\"mat-elevation-z8\">\n    <ng-container matColumnDef=\"tournamentName\">\n        <mat-header-cell *matHeaderCellDef> Tournament</mat-header-cell>\n        <mat-cell\n                id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tournament-name\"\n                *matCellDef=\"let element\"> {{element.tournamentDetails.tournamentName}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"tournamentDay\">\n        <mat-header-cell *matHeaderCellDef> Day</mat-header-cell>\n        <mat-cell\n                id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tournament-day\"\n                *matCellDef=\"let element\"> {{element.tournamentDetails.tournamentDay}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"tentativePlayers\">\n        <mat-header-cell *matHeaderCellDef> Tentative Players</mat-header-cell>\n        <mat-cell\n                id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tentative-players\"\n                *matCellDef=\"let element\"> {{element.tentativePlayers}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"action\" stickyEnd>\n        <th mat-header-cell *matHeaderCellDef>+/-</th>\n        <td mat-cell *matCellDef=\"let element; index as i\">\n            <div *ngIf=\"!element.isMember; else elseBlock\">\n                <button\n                        id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-add\"\n                        mat-icon-button color=\"primary\"\n                        aria-label=\"Add to Tentative\"\n                        (click)=\"tentativeRegister(element, i)\">\n                    <mat-icon>add</mat-icon>\n                </button>\n            </div>\n            <ng-template #elseBlock>\n                <button\n                        id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-remove\"\n                        mat-icon-button color=\"warn\"\n                        aria-label=\"Remove from Tentative\"\n                        (click)=\"tentativeRegister(element, i)\">\n                    <mat-icon>remove</mat-icon>\n                </button>\n            </ng-template>\n        </td>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n</mat-table>"
        },
        {
            "name": "UpcomingTournamentDetailsCardComponent",
            "id": "component-UpcomingTournamentDetailsCardComponent-f6f872c62f5f1408d61f5435b83f8cae6c063da0556460911bd25e5b06bbcda549c7b30f2c68b04801d3c9c7a81899a04bdee660bc2333517b6a5f5619d42619",
            "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upcoming-tournament-details-card",
            "styleUrls": [
                "./upcoming-tournament-details-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upcoming-tournament-details-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tournaments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ClashTournaments[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "'MMM d, y h:mm a'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "timezoneOffset",
                    "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {ClashTournaments} from \"../interfaces/clash-tournaments\";\n\n@Component({\n  selector: 'app-upcoming-tournament-details-card',\n  templateUrl: './upcoming-tournament-details-card.component.html',\n  styleUrls: ['./upcoming-tournament-details-card.component.scss']\n})\nexport class UpcomingTournamentDetailsCardComponent {\n\n  @Input()\n  tournaments: ClashTournaments[] = [];\n  currentDate?: Date = new Date();\n  dateFormat: string = 'MMM d, y h:mm a';\n  timezoneOffset: string = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  constructor() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".upcoming-clash-tournament-card {\n  max-width: 275px;\n}\n\n.upcoming-tournament-name {\n  font-style: italic;\n  font-size: 150%;\n}",
                    "styleUrl": "./upcoming-tournament-details-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<mat-card class=\"upcoming-clash-tournament-card\">\n  <mat-card-title id=\"clash-bot-upcoming-tournaments-title\">Upcoming Tournaments</mat-card-title>\n  <mat-card-subtitle id=\"clash-bot-upcoming-tournaments-subtitle\">Here are the details for the upcoming League of Legends Clash Tournaments.</mat-card-subtitle>\n  <mat-list id=\"clash-bot-upcoming-tournaments-list\" role=\"list\">\n    <mat-list-item id=\"clash-bot-clash-bot-upcoming-tournament\" *ngFor=\"let tournament of tournaments\" role=\"listitem\">\n      <mat-icon mat-list-icon>emoji_events</mat-icon>\n      <div class=\"upcoming-tournament-name\" id=\"clash-bot-upcoming-tournaments-{{tournament.tournamentName}}-{{tournament.tournamentDay}}-name\" mat-line>{{tournament.tournamentName | tournamentNameTransformer}}</div>\n      <div id=\"clash-bot-upcoming-tournaments-{{tournament.tournamentName}}-{{tournament.tournamentDay}}-day\" mat-line>Day {{tournament.tournamentDay}}</div>\n      <div id=\"clash-bot-upcoming-tournaments-{{tournament.tournamentName}}-{{tournament.tournamentDay}}-time\" mat-line>{{tournament.startTime | date:dateFormat:timezoneOffset}}</div>\n    </mat-list-item>\n  </mat-list>\n  <mat-card-footer class=\"subtext\" align=\"end\">As of : {{currentDate | date:dateFormat:timezoneOffset}}</mat-card-footer>\n</mat-card>\n"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-294d431f3447705e97e8c569d1bc7ab01aa48284731cf08040a2cc9700eb7bd4aacf7999cf6feff1ef0356e5e070ca27ffeeb8ca43e2b2aaf04056606bd78635",
            "file": "src/app/pages/user-profile/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [
                "./user-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "championAutoCompleteCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "championInput",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'championInput'"
                        }
                    ]
                },
                {
                    "name": "championsAutofillArray",
                    "defaultValue": "of()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "defaultGuild",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "guilds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "initialAutoCompleteArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "initialFormControlState",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "listOfChampions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "preferredChampions",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<string>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "removable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, COMMA]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "userDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDetails",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "userDetailsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkFormState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "compareArray",
                    "args": [
                        {
                            "name": "arr1",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "arr2",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arr1",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arr2",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notInListValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "champion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sliderUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "syncChampionsList",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Observable, of, throwError} from \"rxjs\";\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn} from \"@angular/forms\";\nimport {COMMA, ENTER} from \"@angular/cdk/keycodes\";\nimport {catchError, map, startWith, take, timeout} from \"rxjs/operators\";\nimport {MatAutocompleteSelectedEvent} from \"@angular/material/autocomplete\";\nimport {ClashBotService} from \"../../../services/clash-bot.service\";\nimport {ClashBotUserDetails} from \"../../../interfaces/clash-bot-user-details\";\nimport {RiotDdragonService} from \"../../../services/riot-ddragon.service\";\nimport {UserDetailsService} from \"../../../services/user-details.service\";\nimport {DiscordGuild} from \"../../../interfaces/discord-guild\";\nimport {UserDetails} from \"../../../interfaces/user-details\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {ApplicationDetailsService} from \"../../../services/application-details.service\";\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.scss']\n})\nexport class UserProfileComponent implements OnInit {\n\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  championAutoCompleteCtrl = new FormControl();\n  championsAutofillArray: Observable<string[]> = of();\n  preferredChampions: Set<string> = new Set<string>();\n  listOfChampions: string[] = [];\n  initialFormControlState: any = {};\n  initialAutoCompleteArray: string[] = [];\n  defaultGuild: string = '';\n  userDetails?: UserDetails;\n  guilds: DiscordGuild[] = [];\n\n  @ViewChild('championInput') championInput: any = '';\n  userDetailsForm?: FormGroup;\n\n  constructor(private clashBotService: ClashBotService,\n              private userDetailsService: UserDetailsService,\n              private riotDdragonService: RiotDdragonService,\n              private applicationDetailsService: ApplicationDetailsService,\n              private matSnackBar: MatSnackBar) {\n  }\n\n  notInListValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const contained = !this.listOfChampions.includes(control.value);\n      return contained ? {forbiddenName: {value: control.value}} : null;\n    };\n  }\n\n  ngOnInit(): void {\n    this.applicationDetailsService.getApplicationDetails()\n      .pipe(take(1))\n      .subscribe((appDetails) => {\n          let defaultGuild = '';\n          if (appDetails.userGuilds) {\n            defaultGuild = appDetails.userGuilds[0].name;\n            appDetails.userGuilds.forEach(guild => this.guilds.push(guild));\n          }\n        this.userDetailsService.getUserDetails().pipe(take(1)).subscribe((userDetails) => {\n          if (!userDetails || !userDetails.id || userDetails.id == 0) {\n            this.matSnackBar.open('Oops! You are not logged in. Please navigate back to the home screen and log in.', 'X', {duration: 5000})\n          } else {\n            this.userDetails = userDetails;\n            this.clashBotService.getUserDetails(userDetails.id)\n              .pipe(take(1),\n                timeout(4000),\n                catchError((err) => {\n                  console.error(err);\n                  this.matSnackBar.open('Oops! Failed to retrieve your User Information. Please try again later.', 'X', {duration: 5000});\n                  return throwError(err);\n                }))\n              .subscribe((data: ClashBotUserDetails) => {\n                if (!data || !data.id) {\n                  data.serverName = defaultGuild;\n                  data.preferredChampions = [];\n                  data.subscriptions = {\n                    UpcomingClashTournamentDiscordDM: false\n                  };\n                }\n                this.defaultGuild = data.serverName;\n                let preferredChampions = Array.isArray(data.preferredChampions) ? data.preferredChampions : [];\n                this.riotDdragonService.getListOfChampions()\n                  .pipe(take(1),\n                    timeout(7000),\n                    catchError((err) => {\n                      console.error(err);\n                      this.matSnackBar.open('Oops! Failed to retrieve League Champion names. Please try again later.', 'X', {duration: 5000});\n                      return throwError(err);\n                    })).subscribe((championData) => {\n                  this.listOfChampions = Object.keys(championData.data);\n                  this.listOfChampions = this.listOfChampions.filter(record => !preferredChampions.includes(record));\n                  this.initialAutoCompleteArray = JSON.parse(JSON.stringify(this.listOfChampions));\n                  this.userDetailsForm = new FormGroup({\n                    preferredChampionsFC: new FormControl([...preferredChampions]),\n                    subscribedDiscordDMFC: new FormControl(data.subscriptions.UpcomingClashTournamentDiscordDM),\n                    defaultGuildFC: new FormControl(this.defaultGuild)\n                  });\n                  this.preferredChampions = new Set<string>(data.preferredChampions);\n                  this.initialFormControlState = JSON.parse(JSON.stringify(this.userDetailsForm.value));\n                  this.championsAutofillArray = this.championAutoCompleteCtrl.valueChanges.pipe(\n                    startWith(null),\n                    map((champion: string | null) => champion ? this._filter(champion) : this.listOfChampions.slice()));\n                })\n              })\n          }\n        })\n    })\n  }\n\n  private syncChampionsList(value: string) {\n    if (this.listOfChampions.indexOf(value) > -1 && this.preferredChampions.size < 5) {\n      this.listOfChampions.splice(this.listOfChampions.indexOf(value), 1);\n      this.listOfChampions.sort();\n      this.preferredChampions.add(value);\n    } else {\n      this.preferredChampions.delete(value);\n      this.listOfChampions.push(value);\n      this.listOfChampions.sort();\n    }\n    this.userDetailsForm?.controls.preferredChampionsFC.setValue([...this.preferredChampions]);\n    this.checkFormState();\n  }\n\n  private checkFormState() {\n    if (this.compareArray([...this.preferredChampions], this.initialFormControlState.preferredChampionsFC)\n      && this.userDetailsForm?.controls.subscribedDiscordDMFC.value === this.initialFormControlState.subscribedDiscordDMFC) {\n      this.userDetailsForm?.markAsPristine()\n    } else {\n      this.userDetailsForm?.markAsDirty();\n    }\n  }\n\n  remove(champion: string): void {\n    this.syncChampionsList(champion);\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.syncChampionsList(event.option.viewValue);\n    this.championInput.nativeElement.value = '';\n    this.championAutoCompleteCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n    return this.listOfChampions.filter(champion => champion.toLowerCase().includes(filterValue));\n  }\n\n  resetState() {\n    this.userDetailsForm?.reset(this.initialFormControlState);\n    this.preferredChampions = new Set<string>(this.initialFormControlState.preferredChampionsFC);\n    this.listOfChampions = JSON.parse(JSON.stringify(this.initialAutoCompleteArray));\n  }\n\n  onSubmit() {\n    if (this.userDetailsForm && this.userDetails) {\n      this.userDetailsForm.markAsPending();\n      this.clashBotService.postUserDetails(this.userDetails.id, this.userDetailsForm.value.defaultGuildFC, new Set<string>(this.userDetailsForm.value.preferredChampionsFC), {'UpcomingClashTournamentDiscordDM': this.userDetailsForm.value.subscribedDiscordDMFC}, this.userDetails.username)\n        .pipe(timeout(4000),\n          catchError((err) => {\n            console.error(err);\n            this.matSnackBar.open('Oops! Failed to persist your requested update. Please try again.', 'X', {duration: 5000});\n            return throwError(err);\n          }))\n        .subscribe(() => {\n          this.initialFormControlState = JSON.parse(JSON.stringify(this.userDetailsForm?.value));\n          this.userDetailsForm?.markAsPristine();\n          this.applicationDetailsService.getApplicationDetails()\n              .pipe(take(1))\n              .subscribe((appDetails) => {\n            appDetails.defaultGuild = this.userDetailsForm?.value.defaultGuildFC;\n            this.applicationDetailsService.setApplicationDetails(appDetails);\n          })\n        });\n    }\n  }\n\n  sliderUpdate() {\n    this.checkFormState();\n  }\n\n  compareArray(arr1: any[], arr2: any[]): boolean {\n    if ((Array.isArray(arr1) && Array.isArray(arr2))\n      && arr1.length === arr2.length) {\n      for (let value of arr2) {\n        if (!arr1.includes(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-user-profile-save-button-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.clash-bot-user-profile-save-button-container > button {\n  margin: 0.5em;\n}\n\n.example-chip-list {\n  width: 100%;\n}\n\n.example-headers-align .mat-expansion-panel-header-title,\n.example-headers-align .mat-expansion-panel-header-description {\n  flex-basis: 0;\n}\n\n.example-headers-align .mat-expansion-panel-header-description .mat-panel-title {\n  justify-content: space-between;\n}\n\n.example-headers-align .mat-form-field + .mat-form-field {\n  margin-left: 8px;\n}\n\nmat-expansion-panel {\n  padding: 2em 0 2em 0;\n}\n\nmat-expansion-panel.mat-expansion-panel:nth-of-type(1n+1) {\n  margin-top: 1em !important;\n}\n\n",
                    "styleUrl": "./user-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "clashBotService",
                        "type": "ClashBotService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "riotDdragonService",
                        "type": "RiotDdragonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "clashBotService",
                        "type": "ClashBotService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "riotDdragonService",
                        "type": "RiotDdragonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-accordion class=\"example-headers-align\" multi>\n  <form *ngIf=\"userDetailsForm\" [formGroup]=\"userDetailsForm\" (ngSubmit)=\"userDetailsForm.valid && onSubmit()\">\n    <mat-expansion-panel [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          User Information\n        </mat-panel-title>\n        <mat-panel-description>\n          Clash Bot User Information\n          <mat-icon>account_circle</mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <mat-list>\n        <mat-list-item>\n          <mat-icon mat-list-icon>discord</mat-icon>\n          <div id=\"clash-bot-user-profile-username\" mat-line>{{userDetails?.username}}</div>\n        </mat-list-item>\n        <mat-list-item>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Default Guild</mat-label>\n            <mat-select id=\"clash-bot-user-profile-default-guild\" name=\"defaultGuild\" formControlName=\"defaultGuildFC\">\n              <mat-option  id=\"clash-bot-user-profile-autocomplete-{{ guild.name | kebabcase }}-guild\" *ngFor=\"let guild of guilds\" [value]=\"guild.name\">\n                {{guild.name}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-list-item>\n        <mat-list-item>\n          <p>NOTE: This will affect the guild sent with your Discord DM.</p>\n        </mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n\n    <mat-expansion-panel [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          League of Legends\n        </mat-panel-title>\n        <mat-panel-description>\n          League of Legends User Preferences\n          <mat-icon>groups</mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <p>Cannot exceed 5 champions.</p>\n      <mat-form-field id=\"clash-bot-user-profile-preferred-champions-list\" class=\"example-chip-list\" appearance=\"fill\">\n        <mat-label>Current Preferred Champions</mat-label>\n        <mat-chip-list #chipList aria-label=\"Preferred Champion selection\">\n          <mat-chip\n            *ngFor=\"let champion of preferredChampions\"\n            id=\"clash-bot-user-profile-preferred-champion-{{ champion | kebabcase }}\"\n            [selectable]=\"selectable\"\n            [removable]=\"removable\"\n            (removed)=\"remove(champion)\">\n            {{champion}}\n            <mat-icon id=\"clash-bot-user-profile-preferred-champion-{{ champion }}-remove\" matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n          </mat-chip>\n          <input\n            placeholder=\"Add Champion...\"\n            #championInput\n            id=\"clash-bot-user-profile-preferred-champion-input\"\n            [formControl]=\"championAutoCompleteCtrl\"\n            [matAutocomplete]=\"auto\"\n            [matChipInputFor]=\"chipList\"\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\">\n        </mat-chip-list>\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n          <mat-option *ngFor=\"let champion of championsAutofillArray | async\" id=\"clash-bot-user-profile-preferred-champion-{{ champion | kebabcase }}-autocomplete\" [value]=\"champion\">\n            {{champion}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </mat-expansion-panel>\n    <mat-expansion-panel [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Notification Subscriptions\n        </mat-panel-title>\n        <mat-panel-description>\n          Clash Bot notification settings\n          <mat-icon>notifications</mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <mat-slide-toggle\n        class=\"example-margin\"\n        id=\"clash-bot-user-profile-discord-dm-notification-toggle\"\n        formControlName=\"subscribedDiscordDMFC\"\n        (change)=\"sliderUpdate()\">\n        Monday before Tournament Discord direct message\n      </mat-slide-toggle>\n    </mat-expansion-panel>\n    <div class=\"clash-bot-user-profile-save-button-container\">\n      <mat-progress-bar id=\"clash-bot-user-profile-call-in-progress-bar\" *ngIf=\"userDetailsForm && userDetailsForm.pending && !userDetailsForm.pristine\" mode=\"indeterminate\"></mat-progress-bar>\n      <button mat-raised-button id=\"clash-bot-user-profile-undo\" type=\"reset\" [disabled]=\"!userDetailsForm.dirty\" (click)=\"resetState()\">Undo</button>\n      <button mat-raised-button id=\"clash-bot-user-profile-submit\" type=\"submit\" color=\"primary\" [disabled]=\"!userDetailsForm.dirty\">Save</button>\n    </div>\n  </form>\n</mat-accordion>\n"
        },
        {
            "name": "WelcomeDashboardComponent",
            "id": "component-WelcomeDashboardComponent-b62bf7109001fbb05874caea7e541094207795b098b6d7684972de753d99c782e20f9f4f553a2863affeedb74a017875eb52f134fcb18bdb08d2ce64c9a8bb86",
            "file": "src/app/pages/welcome-dashboard/welcome-dashboard/welcome-dashboard.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome-dashboard",
            "styleUrls": [
                "./welcome-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authCodeFlowConfig",
                    "defaultValue": "{\n    loginUrl: 'https://discord.com/api/oauth2/authorize',\n    tokenEndpoint: 'https://discord.com/api/oauth2/token',\n    revocationEndpoint: 'https://discord.com/api/oauth2/revoke',\n    redirectUri: window.location.origin,\n    clientId: environment.discordClientId,\n    responseType: 'code',\n    scope: 'identify guilds',\n    showDebugInformation: true,\n    oidc: false,\n    sessionChecksEnabled: true,\n    customQueryParams: {\n      'prompt': 'none'\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthConfig",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "dataLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loggedIn",
                    "defaultValue": "'NOT_LOGGED_IN'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tournamentDays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tournaments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTournaments[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "loginToDiscord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLoggedInDetails",
                    "args": [
                        {
                            "name": "appDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clashBotUser",
                            "type": "ClashBotUserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "guilds",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "appDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clashBotUser",
                            "type": "ClashBotUserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "guilds",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {ClashBotService} from \"../../../services/clash-bot.service\";\nimport {AuthConfig, OAuthService} from \"angular-oauth2-oidc\";\nimport {environment} from \"../../../../environments/environment\";\nimport {JwksValidationHandler} from \"angular-oauth2-oidc-jwks\";\nimport {DiscordService} from \"../../../services/discord.service\";\nimport {UserDetailsService} from \"../../../services/user-details.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {ApplicationDetailsService} from \"../../../services/application-details.service\";\nimport {catchError, mergeMap, retryWhen, take} from \"rxjs/operators\";\nimport {throwError, timer} from \"rxjs\";\nimport {ClashBotUserDetails} from \"../../../interfaces/clash-bot-user-details\";\nimport {ApplicationDetails} from \"../../../interfaces/application-details\";\nimport {ClashTournaments} from \"../../../interfaces/clash-tournaments\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ReleaseNotificationDialogComponent} from \"../../../dialogs/release-notification-dialog/release-notification-dialog.component\";\n\n@Component({\n  selector: 'app-welcome-dashboard',\n  templateUrl: './welcome-dashboard.component.html',\n  styleUrls: ['./welcome-dashboard.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class WelcomeDashboardComponent implements OnInit {\n  tournamentDays: any[] = [];\n  tournaments?: ClashTournaments[];\n  dataLoaded: boolean = false;\n  loggedIn: string = 'NOT_LOGGED_IN';\n\n  authCodeFlowConfig: AuthConfig = {\n    loginUrl: 'https://discord.com/api/oauth2/authorize',\n    tokenEndpoint: 'https://discord.com/api/oauth2/token',\n    revocationEndpoint: 'https://discord.com/api/oauth2/revoke',\n    redirectUri: window.location.origin,\n    clientId: environment.discordClientId,\n    responseType: 'code',\n    scope: 'identify guilds',\n    showDebugInformation: true,\n    oidc: false,\n    sessionChecksEnabled: true,\n    customQueryParams: {\n      'prompt': 'none'\n    }\n  }\n\n  constructor(private oauthService: OAuthService,\n              private clashBotService: ClashBotService,\n              private discordService: DiscordService,\n              private userDetailsService: UserDetailsService,\n              private applicationDetailsService: ApplicationDetailsService,\n              private _snackBar: MatSnackBar,\n              private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n    if (localStorage.getItem('version') !== environment.version) {\n        this.matDialog.open(ReleaseNotificationDialogComponent, { autoFocus: false });\n        localStorage.setItem('version', environment.version);\n    }\n    this.clashBotService.getClashTournaments()\n      .pipe(take(1))\n      .subscribe((data) => {\n        this.tournaments = data.sort((a,b) =>\n          new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n        data.forEach(tournament => this.tournamentDays.push(new Date(tournament.startTime)));\n        this.dataLoaded = true;\n        this.applicationDetailsService.getApplicationDetails()\n          .pipe(take(1))\n          .subscribe((appDetails) => {\n            appDetails.currentTournaments = data;\n            this.applicationDetailsService.setApplicationDetails(appDetails);\n          })\n      });\n    if (this.oauthService.hasValidAccessToken()) {\n      this.loggedIn = 'LOGGED_IN';\n    }\n    this.oauthService.configure(this.authCodeFlowConfig);\n    if (sessionStorage.getItem('LoginAttempt')) {\n      this.oauthService.tokenValidationHandler = new JwksValidationHandler();\n      this.oauthService.tryLogin()\n        .then(() => this.setUserDetails())\n        .catch(err => {\n          console.error(err);\n          this.loggedIn = 'NOT_LOGGED_IN';\n          this._snackBar.open('Failed to login to discord.',\n            'X',\n            {duration: 5 * 1000});\n        });\n    } else {\n      if (this.oauthService.hasValidAccessToken()) {\n        this.loggedIn = 'LOGGED_IN';\n      }\n    }\n  }\n\n  setUserDetails() {\n    this.loggedIn = 'LOGGING_IN';\n    this.discordService.getUserDetails()\n      .pipe(retryWhen(error =>\n          error.pipe(\n            take(3),\n            mergeMap((response) => {\n              if (response.status == 429) {\n                this._snackBar.open('Hit a retry error!', 'X', {duration: 10000});\n                return timer(response.error.retry_after);\n              } else {\n                return throwError(response);\n              }\n            })\n          )),\n        catchError(error => throwError(error)))\n      .subscribe((data) => {\n        this.userDetailsService.setUserDetails(data);\n        this.discordService.getGuilds()\n          .pipe(retryWhen(error =>\n            error.pipe(\n              take(3),\n              mergeMap((response) => {\n                if (response.status == 429) {\n                  this._snackBar.open(`You are being rate limited. You are a dirty spammer! You will need to wait ${response.error.retry_after}ms.`, 'X', {duration: 10000});\n                  return timer(response.error.retry_after);\n                } else {\n                  return throwError(response);\n                }\n              })\n            ))).subscribe((guilds) => {\n          this.clashBotService.getUserDetails(data.id)\n            .pipe(take(1),\n              catchError(err => {\n              console.error(err);\n              this.loggedIn = 'NOT_LOGGED_IN';\n              this._snackBar.open('Oops, we failed to pull your data from our Servers :( Please try again later.',\n                'X',\n                {duration: 5 * 1000});\n              return throwError(err);\n            }))\n            .subscribe((clashBotUser) => {\n              this.applicationDetailsService.getApplicationDetails()\n                .pipe(take(1))\n                .subscribe((appDetails) => {\n                  if (!clashBotUser.username || data.username !== clashBotUser.username) {\n                    this.clashBotService.postUserDetails(data.id, guilds[0].name, new Set<string>(), {'UpcomingClashTournamentDiscordDM': false}, data.username)\n                      .pipe(take(1),\n                        catchError(err => {\n                        console.error(err);\n                        this.loggedIn = 'NOT_LOGGED_IN';\n                        this._snackBar.open('Oops, we see your discord username has changed. We failed to updated it. Please try to login again.',\n                          'X',\n                          {duration: 5 * 1000});\n                        return throwError(err);\n                      }))\n                      .subscribe((savedUser) => {\n                        this.setLoggedInDetails(appDetails, savedUser, guilds);\n                      });\n                  } else {\n                    this.setLoggedInDetails(appDetails, clashBotUser, guilds);\n                  }\n                })\n            })\n        });\n      });\n  }\n\n  private setLoggedInDetails(appDetails: ApplicationDetails, clashBotUser: ClashBotUserDetails, guilds: any[]) {\n    appDetails.defaultGuild = clashBotUser.serverName;\n    appDetails.userGuilds = guilds;\n    this.applicationDetailsService.setApplicationDetails(appDetails);\n    this.loggedIn = 'LOGGED_IN';\n  }\n\n  loginToDiscord(): void {\n    this.oauthService.initLoginFlow();\n    sessionStorage.setItem('LoginAttempt', 'true');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (max-width: 700px) {\n  .main-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n}\n\n@media only screen and (min-width: 701px) {\n  .main-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    flex-wrap: wrap;\n    align-items: flex-start;\n  }\n}\n\n.clash-bot-welcome-card {\n  max-width: 25em;\n  min-width: 25em;\n  min-height: 12em;\n  margin-bottom: 1em;\n}\n\n.upcoming-tournament-card {\n  min-width: 25em;\n  min-height: 15em;\n}\n\n.tournament-calendar-card {\n  min-width: 25em;\n  min-height: 15em;\n  margin-top: 1em;\n}\n\n#WelcomeMessage-PreseasonNotification {\n  font-size: 1.05em;\n  border: 0.35em outset #3f51b5;\n  -webkit-box-shadow: 5px 5px 15px rgb(0 0 0 / 40%);\n  font-style: oblique;\n}\n\n.welcome-message-container {\n  max-width: 500px;\n  padding-bottom: 0.5em;\n}\n\n.clash-bot-welcome-dashboard-buttons-container {\n  display: flex;\n}\n\n.demo-inline-calendar-card {\n  min-width: 200px;\n}\n\n.header {\n  font-weight: bold;\n}\n",
                    "styleUrl": "./welcome-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clashBotService",
                        "type": "ClashBotService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "discordService",
                        "type": "DiscordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clashBotService",
                        "type": "ClashBotService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "discordService",
                        "type": "DiscordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDetailsService",
                        "type": "UserDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\">\n  <mat-card class=\"clash-bot-welcome-card\">\n    <mat-card-title id=\"WelcomeMessage-Title\">Welcome to Clash-Bot!</mat-card-title>\n    <mat-card-content id=\"WelcomeMessage-Message\">\n      <p>This site is here to help you and your\n        friends quickly group up through\n        discord to compete in a League of\n        Legends Clash Tournament.</p>\n      <p id=\"WelcomeMessage-LoginMessage\" *ngIf=\"loggedIn === 'NOT_LOGGED_IN'\">\n        Please login to discord using the button below before continuing.\n      </p>\n      <p *ngIf=\"loggedIn === 'LOGGED_IN'\">Please use the menu above to see the available content.</p>\n    </mat-card-content>\n    <mat-divider inset></mat-divider>\n    <mat-card-actions class=\"clash-bot-welcome-dashboard-buttons-container\">\n      <button mat-raised-button id=\"WelcomeMessage-DiscordLogin-Btn\" (click)=\"loginToDiscord()\"\n              *ngIf=\"loggedIn === 'NOT_LOGGED_IN'\" color=\"primary\" align=\"end\">\n        <mat-icon>discord</mat-icon>\n        <span>Login to Discord</span>\n      </button>\n      <a mat-raised-button href=\"https://top.gg/bot/837629412328734740\" target=\"_blank\">Add Discord bot to Server</a>\n    </mat-card-actions>\n    <mat-card-footer *ngIf=\"loggedIn === 'LOGGING_IN'\">\n      <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n    </mat-card-footer>\n  </mat-card>\n  <app-upcoming-tournament-details-card class=\"upcoming-tournament-card\" *ngIf=\"dataLoaded && tournaments\" [tournaments]=\"tournaments\"></app-upcoming-tournament-details-card>\n  <app-clash-tournament-calendar class=\"tournament-calendar-card\" id=\"WelcomeMessage-Calendar\" [daysSelected]=\"tournamentDays\" *ngIf=\"dataLoaded\"></app-clash-tournament-calendar>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-204113b6efa7e143df948db618a7e1812a270cdcbf236e387a8f7d58aff083bd2682329c0afaecc76e9d167fadc2ed8bdc233658ef993fc370785021bcf9ea66",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule, SecurityContext} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport {ClashBotService} from \"./services/clash-bot.service\";\nimport { WelcomeDashboardComponent } from './pages/welcome-dashboard/welcome-dashboard/welcome-dashboard.component';\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatNativeDateModule} from \"@angular/material/core\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { ClashTournamentCalendarComponent } from './clash-tournament-calendar/clash-tournament-calendar.component';\nimport { ClashTournamentCalendarHeaderComponent } from './clash-tournament-calendar-header/clash-tournament-calendar-header.component';\nimport {OAuthModule} from \"angular-oauth2-oidc\";\nimport {DiscordInterceptor} from \"./services/discord-interceptor.service\";\nimport {DiscordService} from \"./services/discord.service\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport { UpcomingTournamentDetailsCardComponent } from './upcoming-tournament-details-card/upcoming-tournament-details-card.component';\nimport {MatListModule} from \"@angular/material/list\";\nimport {TeamsModule} from \"./pages/teams-dashboard/teams-module/teams.module\";\nimport { ReleaseNotificationDialogComponent } from './dialogs/release-notification-dialog/release-notification-dialog.component';\nimport {MarkdownModule} from \"ngx-markdown\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        WelcomeDashboardComponent,\n        ClashTournamentCalendarComponent,\n        ClashTournamentCalendarHeaderComponent,\n        UpcomingTournamentDetailsCardComponent,\n        ReleaseNotificationDialogComponent\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        MatCardModule,\n        MatDialogModule,\n        MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSnackBarModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatMenuModule,\n        MatProgressBarModule,\n        MatListModule,\n        MatSlideToggleModule,\n        ReactiveFormsModule,\n        OAuthModule.forRoot(),\n        TeamsModule,\n        MarkdownModule.forRoot({\n            sanitize: SecurityContext.HTML\n        })\n    ],\n    providers: [ClashBotService, DiscordService, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: DiscordInterceptor,\n        multi: true\n    }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClashBotService"
                        },
                        {
                            "name": "DiscordInterceptor"
                        },
                        {
                            "name": "DiscordService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ClashTournamentCalendarComponent"
                        },
                        {
                            "name": "ClashTournamentCalendarHeaderComponent"
                        },
                        {
                            "name": "ReleaseNotificationDialogComponent"
                        },
                        {
                            "name": "UpcomingTournamentDetailsCardComponent"
                        },
                        {
                            "name": "WelcomeDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "TeamsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-7fca2d79426be095dcc0ee51ea740d9c06375252df774b151f5536646f438aa29484238b3b297430abfec4d4bcc36a984f0548acc95cefc83ffd7fcc44e61a57",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {WelcomeDashboardComponent} from \"./pages/welcome-dashboard/welcome-dashboard/welcome-dashboard.component\";\nimport {environment} from \"../environments/environment\";\n\nlet routes: Routes = [\n  {path: '', component: WelcomeDashboardComponent},\n  {path: 'teams', loadChildren: () => \"import('./pages/teams-dashboard/teams-module/teams.module').then(m => m.TeamsModule)\"},\n  {path: 'user-profile', loadChildren: () => \"import('./pages/user-profile/user-profile/user-profile.module').then(m => m.UserProfileModule)\"},\n  {path: '**', redirectTo: ''}\n];\n\nif (!environment.production) {\n  routes.splice(routes.length - 2, 0, { path: 'testing', loadChildren: () => import('./pages/component-testing/component-testing.module').then(m => m.ComponentTestingModule)});\n}\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentTestingModule",
            "id": "module-ComponentTestingModule-64fa93f3074509ce312d9969ffdbc2303a018c61455164b97d23812071619b4d02807fd4b3477a5788b8993392c2935b74945839a72b18280f23eaf70a44b6b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/component-testing/component-testing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {MatChipsModule} from \"@angular/material/chips\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatOptionModule} from \"@angular/material/core\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatTableModule} from \"@angular/material/table\";\nimport {ComponentTestingComponent} from \"./component-testing.component\";\nimport {ComponentTestingRoutingModule} from \"./component-testing-routing.module\";\nimport {TeamsModule} from \"../teams-dashboard/teams-module/teams.module\";\n\n@NgModule({\n  declarations: [ComponentTestingComponent],\n  exports: [\n    ComponentTestingComponent\n  ],\n  imports: [\n    CommonModule,\n    ComponentTestingRoutingModule,\n    MatChipsModule,\n    MatProgressSpinnerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatIconModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatTableModule,\n    TeamsModule,\n  ]\n})\nexport class ComponentTestingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComponentTestingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TeamsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComponentTestingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentTestingRoutingModule",
            "id": "module-ComponentTestingRoutingModule-dcfb9e6a522124c3b1611ca8eca164dcaa7c83876fd0890551137b81da2fc78ffd8278c113c824a7665ea13c729b7990353cc04f5812f5dbe35f9293bed16cb0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/component-testing/component-testing-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ComponentTestingComponent} from \"./component-testing.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ComponentTestingComponent\n    }\n]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class ComponentTestingRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-0ef7c37c204982a2e27194d9847a08bd02c4cf5f3089096b78411a39e5e8fc44c197d1461887b8b9130eadc106137ac4723b2df814a52f6248d397d8855a8f7c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {KebabCasePipe} from \"./kebab-case.pipe\";\nimport {ImageFallbackDirective} from \"./image-fallback.directive\";\nimport {SpinnerComponent} from './spinner/spinner.component';\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\n\n@NgModule({\n    declarations: [\n        KebabCasePipe,\n        ImageFallbackDirective,\n        SpinnerComponent\n    ],\n    imports: [\n        MatProgressSpinnerModule,\n        CommonModule\n    ],\n    exports: [\n        KebabCasePipe,\n        ImageFallbackDirective,\n        SpinnerComponent\n    ]\n})\nexport class SharedModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImageFallbackDirective"
                        },
                        {
                            "name": "KebabCasePipe"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImageFallbackDirective"
                        },
                        {
                            "name": "KebabCasePipe"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamsModule",
            "id": "module-TeamsModule-ef6bbe1bf62a8b98247cce55609d1697fcd6dd02cbe29db9e278edf0d22a0ef219ba2e4d1459a0321004e0f4693fc64f7c5cf39bdde0adfb249e131dbffe9e9e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/teams-dashboard/teams-module/teams.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TeamsRoutingModule} from \"./teams-routing.module\";\nimport {TeamsDashboardComponent} from \"../teams-dashboard/teams-dashboard.component\";\nimport {MatChipsModule} from \"@angular/material/chips\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {TeamCardComponent} from \"../team-card/team-card.component\";\nimport {MatCardModule} from '@angular/material/card';\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {ConfirmationDialogComponent} from \"../../../dialogs/confirmation-dialog/confirmation-dialog.component\";\nimport {MatOptionModule} from \"@angular/material/core\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {TeamsDashboardHelpDialogComponent} from \"../teams-dashboard-help-dialog/teams-dashboard-help-dialog.component\";\nimport {MatTableModule} from \"@angular/material/table\";\nimport {TournamentNameTransformerPipe} from \"../../../tournament-name-transformer.pipe\";\nimport {TeamCardPlayerDetailsComponent} from \"../team-card/team-card-player-details/team-card-player-details.component\";\nimport {SharedModule} from \"../../../shared/shared.module\";\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {HelpDialogComponent} from \"../help-dialog/help-dialog.component\";\nimport {GuildFilterListComponent} from \"../guild-filter-list/guild-filter-list.component\";\nimport {TeamsTentativeTableComponent} from \"../teams-tentative-table/teams-tentative-table.component\";\n\n\n@NgModule({\n    declarations: [TeamsDashboardComponent, TeamCardComponent, ConfirmationDialogComponent,\n        HelpDialogComponent, TeamsDashboardHelpDialogComponent, TournamentNameTransformerPipe, TeamCardPlayerDetailsComponent,\n    GuildFilterListComponent, TeamsTentativeTableComponent],\n    exports: [\n        TeamCardComponent,\n        TournamentNameTransformerPipe\n    ],\n    imports: [\n        CommonModule,\n        TeamsRoutingModule,\n        MatChipsModule,\n        MatProgressSpinnerModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatCardModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatOptionModule,\n        MatSelectModule,\n        MatTableModule,\n        MatExpansionModule,\n        BrowserAnimationsModule,\n        SharedModule\n    ]\n})\nexport class TeamsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "GuildFilterListComponent"
                        },
                        {
                            "name": "HelpDialogComponent"
                        },
                        {
                            "name": "TeamCardComponent"
                        },
                        {
                            "name": "TeamCardPlayerDetailsComponent"
                        },
                        {
                            "name": "TeamsDashboardComponent"
                        },
                        {
                            "name": "TeamsDashboardHelpDialogComponent"
                        },
                        {
                            "name": "TeamsTentativeTableComponent"
                        },
                        {
                            "name": "TournamentNameTransformerPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TeamsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TeamCardComponent"
                        },
                        {
                            "name": "TournamentNameTransformerPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamsRoutingModule",
            "id": "module-TeamsRoutingModule-0cc7df4927b72ad373e06142fd1bb10cc570c56b04b68a3974c526e439bc0e3e98eeb6f680bab374b8ca8e12c34ddb563542f10c2c7259aeb00d1915eff7c055",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/teams-dashboard/teams-module/teams-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {TeamsDashboardComponent} from \"../teams-dashboard/teams-dashboard.component\";\nimport {RouterModule, Routes} from \"@angular/router\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TeamsDashboardComponent\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TeamsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserProfileModule",
            "id": "module-UserProfileModule-722302b68a490db3301016e2cb76e3e1e896daddeb1b98560735fb339c3866bbd9c76c3b4c9aa6d3ef89b7c319b8153542c86ff9834301cbe6e3a3c2c3461556",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/user-profile/user-profile/user-profile.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {UserProfileComponent} from \"./user-profile.component\";\nimport {UserProfileRoutingModule} from \"./user-profile-routing.module\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatDatepickerModule} from \"@angular/material/datepicker\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatChipsModule} from \"@angular/material/chips\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatOptionModule} from \"@angular/material/core\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {MatRadioModule} from \"@angular/material/radio\";\nimport {MatSliderModule} from \"@angular/material/slider\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {ClashBotService} from \"../../../services/clash-bot.service\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {SharedModule} from \"../../../shared/shared.module\";\n\n@NgModule({\n    declarations: [UserProfileComponent],\n    imports: [\n        CommonModule,\n        UserProfileRoutingModule,\n        MatExpansionModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatDatepickerModule,\n        MatListModule,\n        MatChipsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatOptionModule,\n        MatAutocompleteModule,\n        MatRadioModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatButtonModule,\n        MatSelectModule,\n        MatProgressBarModule,\n        SharedModule\n    ],\n    providers: [ClashBotService]\n})\nexport class UserProfileModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ClashBotService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserProfileRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserProfileRoutingModule",
            "id": "module-UserProfileRoutingModule-38696d54cc88671fea600d16c1895bec6f932fd25387e13cb59b3c31d903c8f3468e7a21e646971a613e2325b49b6837a2786f083fa2f7314504358ae9c9dbb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/user-profile/user-profile/user-profile-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {UserProfileComponent} from \"./user-profile.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserProfileComponent\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserProfileRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Bot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.int.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  discordClientId: '839586949748228156',\n  version: 'v4.0.1',\n  gTag: undefined\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  discordClientId: '837629412328734740',\n  gTag: 'G-3V8T97537S',\n  version: '--APP-VERSION--'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  discordClientId: '839586949748228156',\n  version: 'v4.0.1',\n  gTag: false\n}"
            },
            {
                "name": "gtag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/google-analytics.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Function"
            },
            {
                "name": "Jg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Mid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoDates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryWithChampions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryWithoutChampions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Supp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClashTournamentCalendarComponent>",
                "defaultValue": "(args: ClashTournamentCalendarComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpcomingTournamentDetailsCardComponent>",
                "defaultValue": "(args: UpcomingTournamentDetailsCardComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpinnerComponent>",
                "defaultValue": "(args: SpinnerComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GuildFilterListComponent>",
                "defaultValue": "(args: GuildFilterListComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HelpDialogComponent>",
                "defaultValue": "(args: HelpDialogComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamCardComponent>",
                "defaultValue": "(args: TeamCardComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamsTentativeTableComponent>",
                "defaultValue": "(args: TeamsTentativeTableComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamCardPlayerDetailsComponent>",
                "defaultValue": "(args: TeamCardPlayerDetailsComponent) => ({\n    props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "FilterType",
                "childs": [
                    {
                        "name": "SERVER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TOURNAMENT_NAME",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TOURNAMENT_DAY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/interfaces/filter-type.ts"
            }
        ],
        "groupedVariables": {
            "src/app/pages/teams-dashboard/team-card/team-card.stories.ts": [
                {
                    "name": "Bot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Jg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Mid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Supp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamCardComponent>",
                    "defaultValue": "(args: TeamCardComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryWithChampions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryWithoutChampions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamCardPlayerDetailsComponent>",
                    "defaultValue": "(args: TeamCardPlayerDetailsComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/environments/environment.int.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.int.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  discordClientId: '839586949748228156',\n  version: 'v4.0.1',\n  gTag: undefined\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  discordClientId: '837629412328734740',\n  gTag: 'G-3V8T97537S',\n  version: '--APP-VERSION--'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  discordClientId: '839586949748228156',\n  version: 'v4.0.1',\n  gTag: false\n}"
                }
            ],
            "src/app/google-analytics.service.ts": [
                {
                    "name": "gtag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/google-analytics.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function"
                }
            ],
            "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts": [
                {
                    "name": "NoDates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClashTournamentCalendarComponent>",
                    "defaultValue": "(args: ClashTournamentCalendarComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpcomingTournamentDetailsCardComponent>",
                    "defaultValue": "(args: UpcomingTournamentDetailsCardComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/shared/spinner/spinner.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpinnerComponent>",
                    "defaultValue": "(args: SpinnerComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GuildFilterListComponent>",
                    "defaultValue": "(args: GuildFilterListComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HelpDialogComponent>",
                    "defaultValue": "(args: HelpDialogComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamsTentativeTableComponent>",
                    "defaultValue": "(args: TeamsTentativeTableComponent) => ({\n    props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/interfaces/filter-type.ts": [
                {
                    "name": "FilterType",
                    "childs": [
                        {
                            "name": "SERVER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TOURNAMENT_NAME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TOURNAMENT_DAY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/interfaces/filter-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "WelcomeDashboardComponent"
                    },
                    {
                        "path": "teams",
                        "loadChildren": "./pages/teams-dashboard/teams-module/teams.module#TeamsModule"
                    },
                    {
                        "path": "user-profile",
                        "loadChildren": "./pages/user-profile/user-profile/user-profile.module#UserProfileModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/user-profile/user-profile/user-profile-routing.module.ts",
                                        "module": "UserProfileRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UserProfileComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UserProfileModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar-header/clash-tournament-calendar-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClashTournamentCalendarHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar/clash-tournament-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClashTournamentCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/release-notification-dialog/release-notification-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReleaseNotificationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/google-analytics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoogleAnalyticsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/google-analytics.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gtag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/application-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/championData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChampionData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-generic-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotGenericResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-tentative-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotTentativeDetails",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-tentative-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-tentative-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotTentativeRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-tentative-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-user-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotUserDetails",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-user-register.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotUserRegister",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-user-register.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashTeam",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerDetails",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-tournaments.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashTournaments",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/discord-guild.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DiscordGuild",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/server.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Server",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/team-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TeamFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/user-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetails",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/component-testing/component-testing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentTestingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GuildFilterListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/guild-filter-list/guild-filter-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/help-dialog/help-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelpDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/help-dialog/help-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamCardPlayerDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryWithChampions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryWithoutChampions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Jg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Supp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard-help-dialog/teams-dashboard-help-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsDashboardHelpDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/teams-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsTentativeTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-tentative-table/teams-tentative-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user-profile/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/welcome-dashboard/welcome-dashboard/welcome-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/application-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/clash-bot.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClashBotService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dev-mode.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DevModeService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/discord-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "DiscordInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/discord.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DiscordService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/riot-ddragon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RiotDdragonService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/teams-websocket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamsWebsocketService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/image-fallback.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ImageFallbackDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/kebab-case.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "KebabCasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tournament-name-transformer.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TournamentNameTransformerPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/upcoming-tournament-details-card/upcoming-tournament-details-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpcomingTournamentDetailsCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.int.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}