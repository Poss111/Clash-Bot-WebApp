{
    "pipes": [
        {
            "name": "KebabCasePipe",
            "id": "pipe-KebabCasePipe-04df887ecac5b55f371c2d4cf1d38b19c7f762163855cd44c5a7986a6ff3d79d0d0317d9aa6b3b8fb2eefdca5a392ad42b07bb70231f0110514b3199f41796c9",
            "file": "src/app/shared/kebab-case.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "kebabcase",
            "sourceCode": "import {Pipe, PipeTransform} from \"@angular/core\";\n\n@Pipe({\n  name: \"kebabcase\"\n})\nexport class KebabCasePipe implements PipeTransform {\n\n  transform(value: string, ...args: unknown[]): unknown {\n    let output = \"\";\n    if (value) {\n      output = value.replace(new RegExp(/(?![a-zA-Z0-9\\s])./, \"g\"), \"\");\n      output = output.replace(new RegExp(/ /, \"g\"), \"-\").toLowerCase();\n    }\n    return output;\n  }\n\n}\n"
        },
        {
            "name": "TournamentNameTransformerPipe",
            "id": "pipe-TournamentNameTransformerPipe-6f398167119b79b642d9558c0b254a927e3cb37ef71e25ac2a719c4c15b4adfa1b3a4fee5d30b6a3400b73c3bd292889cab5bf9671c439a39ec1d4a2868e0b71",
            "file": "src/app/shared/tournament-name-transformer.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tournamentNameTransformer",
            "sourceCode": "import {Pipe, PipeTransform} from \"@angular/core\";\n\n@Pipe({\n  name: \"tournamentNameTransformer\"\n})\nexport class TournamentNameTransformerPipe implements PipeTransform {\n\n  transform(value: any, ...args: any[]): any {\n    return value.replace(/_/g, \" \").replace(/^[a-z]|\\s[a-z]/g, (match: string) => match.toUpperCase());\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ApplicationDetails",
            "id": "interface-ApplicationDetails-37910b5af9a1be69c478ee0f17a3dc97533132d91ff2c186e1998be2671f7b8b185ee48ad5d354d373d4aaffa6f38fe915118331ce58ab30d433d7b65095f0f5",
            "file": "src/app/interfaces/application-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DiscordGuild} from \"./discord-guild\";\nimport {UserDetails} from \"./user-details\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\nimport {Player} from \"clash-bot-service-api/model/player\";\nimport {LoginStatus} from \"../login-status\";\n\nexport interface ApplicationDetails {\n  currentTournaments?: Tournament[],\n  defaultGuild?: DiscordGuild,\n  userGuilds?: Map<string, DiscordGuild>,\n  userDetails?: UserDetails,\n  clashBotUserDetails?: Player,\n  loggedIn: boolean\n  loginStatus: LoginStatus\n}\n",
            "properties": [
                {
                    "name": "clashBotUserDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Player",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "currentTournaments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "defaultGuild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loginStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginStatus",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "userDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDetails",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userGuilds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | DiscordGuild>",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ChampionData",
            "id": "interface-ChampionData-74f85bf1f25c2b4b6b23250fadb30df5fd2c8aeaa81bd0ab29057328066651105aac239674235e71d4b45a095781f4ca31ee1547dd531bd183183074eaf45bce",
            "file": "src/app/interfaces/championData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ChampionData {\n  type: string,\n  format: string,\n  version: string,\n  data: any\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotGenericResponse",
            "id": "interface-ClashBotGenericResponse-a7d5dfcf59ce3852b1d08ac707405e588e7b93381d5b7433f07bc1308f452a1469d1507783d1a46b0c17e02028088e9be1aae0ce3f86dd17a3afe2955766cbce",
            "file": "src/app/interfaces/clash-bot-generic-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ClashTeam} from \"./clash-team\";\n\nexport interface ClashBotGenericResponse {\n  registeredTeam: ClashTeam,\n  unregisteredTeams: ClashTeam[]\n}\n",
            "properties": [
                {
                    "name": "registeredTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTeam",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "unregisteredTeams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashTeam[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotTeamEvent",
            "id": "interface-ClashBotTeamEvent-ace2155b6bdbce777a4083f610c2b8229704b0e88bb96ed5b6ddda40882130f799ee2ada40773af983788c0badeb33ebb59eb76b10f4ce7f0416d990f3d59b7c",
            "file": "src/app/interfaces/clash-bot-team-event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Team} from \"clash-bot-service-api\";\nimport {TeamUiWrapper} from \"./team-ui-wrapper\";\n\nexport interface ClashBotTeamEvent {\n  behavior: ClashBotTeamEventBehavior,\n  event: Team,\n  mappedEvent?: TeamUiWrapper,\n  originalTeam?: TeamUiWrapper\n}\n\nexport enum ClashBotTeamEventBehavior {\n  ADDED,\n  REMOVED,\n  UPDATED\n}\n",
            "properties": [
                {
                    "name": "behavior",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ClashBotTeamEventBehavior",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Team",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mappedEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamUiWrapper",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "originalTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamUiWrapper",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashBotUserRegister",
            "id": "interface-ClashBotUserRegister-4a3495618558b54a8ad0cc5cd5b908582f7dbd092c929f7908588d416fe5b27f33fcbf0c58968fea257343954e05f2c1a2a92880642c5b4ec25b92eb78fda830",
            "file": "src/app/interfaces/clash-bot-user-register.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DiscordGuild} from \"./discord-guild\";\n\nexport interface ClashBotUserRegister {\n  teamName?: string,\n  role?: string,\n  tournamentDetails?: TournamentDetails,\n  server?: DiscordGuild,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\ninterface TournamentDetails {\n  tournamentName?: string,\n  tournamentDay?: string\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "teamName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tournamentDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetails",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashTeam",
            "id": "interface-ClashTeam-6ee53c7bd529636242d56b8bb5ebcefbcbd2ad7a591def96163037ba7d9bdcd1053755b2e89d9b3072b536ddb5e91cdadd5115f07b0715df9bfa35d02c5f8017",
            "file": "src/app/interfaces/clash-team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTeam {\n  teamName?: string,\n  playersDetails?: PlayerDetails[]\n  tournamentDetails?: TournamentDetails,\n  serverId?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\nexport interface PlayerDetails {\n  name: string,\n  id: number,\n  role: string,\n  champions?: string[],\n  isUser?: boolean\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "playersDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerDetails[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "serverId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "teamName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tournamentDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetails",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ClashTournaments",
            "id": "interface-ClashTournaments-113f987f4f06a3344a53fd506ce8330c9dff7fa2448803dd51a869dc7b5193612f0d6db15c5fa073597b8968bcea429abe3dadcf58e9f46972ad38709ef1e7ba",
            "file": "src/app/interfaces/clash-tournaments.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTournaments {\n  tournamentName: string,\n  tournamentDay: string,\n  startTime: string,\n  registrationTime: string\n}\n",
            "properties": [
                {
                    "name": "registrationTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CreateNewTeamDetails",
            "id": "interface-CreateNewTeamDetails-01394f7b23eb7519e1b1ff2112b288f39ddca358f097c134066da2dc8baeb7fcf82ffcec0c5dd41e12c987775421212d6dddbe290878399882cc68b7d0adea03",
            "file": "src/app/interfaces/create-new-team-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateNewTeamDetails {\n    tournamentName: string,\n    tournamentDay: string,\n    role: string\n}\n",
            "properties": [
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-3b30361dc25cece8a0f4b6ad98330152fa9b7eee5fc9229f542fb0eb9388dddc2632d65e8468616957d1542097c3c57586581e2c16530c03ae171df937fb7e87",
            "file": "src/app/interfaces/dialog-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DialogData {\n  message?: string\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DiscordGuild",
            "id": "interface-DiscordGuild-d9452e1ca3a66e545108199f261bf786f74665797f88de40f33a5c24fb6550438840ad2841e0c5c8b3fb002bcdf5574163c88fb87267f520f647df2fa1e732bd",
            "file": "src/app/interfaces/discord-guild.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DiscordGuild {\n  features: string[]\n  icon: string\n  id: string\n  name: string\n  owner: boolean\n  permissions: number,\n  permissions_new: string\n}\n",
            "properties": [
                {
                    "name": "features",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "permissions_new",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PlayerDetails",
            "id": "interface-PlayerDetails-6ee53c7bd529636242d56b8bb5ebcefbcbd2ad7a591def96163037ba7d9bdcd1053755b2e89d9b3072b536ddb5e91cdadd5115f07b0715df9bfa35d02c5f8017",
            "file": "src/app/interfaces/clash-team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTeam {\n  teamName?: string,\n  playersDetails?: PlayerDetails[]\n  tournamentDetails?: TournamentDetails,\n  serverId?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\nexport interface PlayerDetails {\n  name: string,\n  id: number,\n  role: string,\n  champions?: string[],\n  isUser?: boolean\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "champions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PlayerUiWrapper",
            "id": "interface-PlayerUiWrapper-8b6a1cba8d866c39b50cc5400bd9c0f0906e0245bdbb6742b7ac99e374501156fd060ea73a726cad98a3366e32e61a187ffa736369b958022ddc02edd4153e30",
            "file": "src/app/interfaces/team-ui-wrapper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Team, Player} from \"clash-bot-service-api\";\nimport {DiscordGuild} from \"./discord-guild\";\n\nexport interface PlayerUiWrapper extends Player {\n    isUser: boolean;\n}\n\nexport interface TeamUiWrapper extends Team {\n    id?: string;\n    server?: DiscordGuild,\n    teamDetails?: PlayerUiWrapper[];\n    error?: string;\n}\n",
            "properties": [
                {
                    "name": "isUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Player"
        },
        {
            "name": "RoutingDetails",
            "id": "interface-RoutingDetails-803f8d15ee1bfe532195cc4042cb9f8b70f10a9f0a782517b138c1993140a65602e14b937b6ecf2cc6fb65d23b5f0aa70031fc7f14923f901bac2d7fcdc0fecf",
            "file": "src/app/interfaces/routing-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RoutingDetails {\n    name: string,\n    route: string,\n    icon: string,\n    id: string\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Server",
            "id": "interface-Server-9e67de95c71acb7ee66e8c4f8afeb5666454b2862127af5087c72c78cfc30e47d4c820f1a6a651f7d54b5c2506ab00179d317a6f4cfe6664e96c029d470a594f",
            "file": "src/app/interfaces/server.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Server {\n  name: string,\n  state: boolean\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TeamFilter",
            "id": "interface-TeamFilter-13c24f50a0a347f800c34a9455ec025510742aae7e14d3d7d34c15484e9dc9c42f1d43c6706d88001b7da4726bab79869f311db4677b814ba05e5505152a3ac4",
            "file": "src/app/interfaces/team-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {FilterType} from \"./filter-type\";\nimport {DiscordGuild} from \"./discord-guild\";\n\nexport interface TeamFilter {\n  value: DiscordGuild,\n  type: FilterType\n  state: boolean,\n  id: string,\n  numberOfTeams: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "numberOfTeams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TeamUiWrapper",
            "id": "interface-TeamUiWrapper-8b6a1cba8d866c39b50cc5400bd9c0f0906e0245bdbb6742b7ac99e374501156fd060ea73a726cad98a3366e32e61a187ffa736369b958022ddc02edd4153e30",
            "file": "src/app/interfaces/team-ui-wrapper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Team, Player} from \"clash-bot-service-api\";\nimport {DiscordGuild} from \"./discord-guild\";\n\nexport interface PlayerUiWrapper extends Player {\n    isUser: boolean;\n}\n\nexport interface TeamUiWrapper extends Team {\n    id?: string;\n    server?: DiscordGuild,\n    teamDetails?: PlayerUiWrapper[];\n    error?: string;\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "teamDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayerUiWrapper[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Team"
        },
        {
            "name": "TentativeRecord",
            "id": "interface-TentativeRecord-a6814534608bd1620d34192fbd2a2666ddab902d77a09c4bed0f12bd6f1cfc9e31896a5b9c239049ecb76576530e0dceb4a112bad9e135db544cc93d871b89c0",
            "file": "src/app/interfaces/tentative-record.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Tentative} from \"clash-bot-service-api/model/tentative\";\n\nexport interface TentativeRecord extends Tentative {\n    isMember: boolean\n    toBeAdded?: boolean\n    index?: number\n    playerNames?: string[]\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isMember",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "playerNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "toBeAdded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Tentative"
        },
        {
            "name": "TournamentDetails",
            "id": "interface-TournamentDetails-4a3495618558b54a8ad0cc5cd5b908582f7dbd092c929f7908588d416fe5b27f33fcbf0c58968fea257343954e05f2c1a2a92880642c5b4ec25b92eb78fda830",
            "file": "src/app/interfaces/clash-bot-user-register.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {DiscordGuild} from \"./discord-guild\";\n\nexport interface ClashBotUserRegister {\n  teamName?: string,\n  role?: string,\n  tournamentDetails?: TournamentDetails,\n  server?: DiscordGuild,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\ninterface TournamentDetails {\n  tournamentName?: string,\n  tournamentDay?: string\n}\n",
            "properties": [
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TournamentDetails",
            "id": "interface-TournamentDetails-6ee53c7bd529636242d56b8bb5ebcefbcbd2ad7a591def96163037ba7d9bdcd1053755b2e89d9b3072b536ddb5e91cdadd5115f07b0715df9bfa35d02c5f8017-1",
            "file": "src/app/interfaces/clash-team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ClashTeam {\n  teamName?: string,\n  playersDetails?: PlayerDetails[]\n  tournamentDetails?: TournamentDetails,\n  serverId?: string,\n  startTime?: string\n  error?: string,\n  id?: string\n}\n\nexport interface PlayerDetails {\n  name: string,\n  id: number,\n  role: string,\n  champions?: string[],\n  isUser?: boolean\n}\n\ninterface TournamentDetails {\n  tournamentName: string,\n  tournamentDay: string\n}\n",
            "properties": [
                {
                    "name": "tournamentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tournamentName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TournamentDetails-1"
        },
        {
            "name": "UserDetails",
            "id": "interface-UserDetails-3568e18391ea17de4aeacfbba3ecb8b3dc896ff14b75222cb830e81e112ff05a754f25519404ee26bd7670461867e1f8661e542273ee911a505708e8d021359f",
            "file": "src/app/interfaces/user-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserDetails {\n  id: number,\n  username: string,\n  discriminator: string,\n  avatar?: string,\n  bot?: boolean,\n  system?: boolean,\n  mfa_enabled?: boolean,\n  locale?: string,\n  verified?: boolean,\n  email?: string,\n  flags?: Number,\n  premium_type?: Number,\n  public_flags?: Number\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "bot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "discriminator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "flags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mfa_enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "premium_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "public_flags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "system",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApplicationDetailsService",
            "id": "injectable-ApplicationDetailsService-e6b6ffe33295bda4a2b94038acb6ddf86ac7e8c40dba3de4d55f34e4972101b19aab2b17bd17c9918cb370662ebbea9debe1e13f0de3b474a20b35b4b10ae4ed",
            "file": "src/app/services/application-details.service.ts",
            "properties": [
                {
                    "name": "applicationDetails",
                    "defaultValue": "new BehaviorSubject<ApplicationDetails>(this.defaultStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ApplicationDetails>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "defaultStatus",
                    "defaultValue": "{\n      loggedIn: false,\n      loginStatus: LoginStatus.NOT_LOGGED_IN,\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationDetails",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getApplicationDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<ApplicationDetails>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loggingIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logOutUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setApplicationDetails",
                    "args": [
                        {
                            "name": "applicationDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicationDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {ApplicationDetails} from \"../interfaces/application-details\";\nimport {LoginStatus} from \"../login-status\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class ApplicationDetailsService {\n\n    private defaultStatus: ApplicationDetails = {\n      loggedIn: false,\n      loginStatus: LoginStatus.NOT_LOGGED_IN,\n    };\n    applicationDetails: BehaviorSubject<ApplicationDetails> = new BehaviorSubject<ApplicationDetails>(this.defaultStatus);\n\n    constructor() {}\n\n    getApplicationDetails(): BehaviorSubject<ApplicationDetails> {\n        return this.applicationDetails;\n    }\n\n    setApplicationDetails(applicationDetails: ApplicationDetails) {\n        this.applicationDetails.next(applicationDetails);\n    }\n\n    loggingIn() {\n        let value = this.applicationDetails.value;\n        this.applicationDetails.next({\n          ...value,\n          loggedIn: false,\n          loginStatus: LoginStatus.LOGGING_IN\n        });\n    }\n\n    logOutUser() {\n        let value = this.applicationDetails.value;\n        value.userGuilds?.clear();\n        this.applicationDetails.next({\n          currentTournaments: value.currentTournaments,\n          loggedIn: false,\n          loginStatus: LoginStatus.NOT_LOGGED_IN,\n          userGuilds: value.userGuilds,\n        });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        },
        {
            "name": "DevModeService",
            "id": "injectable-DevModeService-e316bb336123d912821cb1b2b9de0b241023c43f812aaecbdda214caba8ac1d0aa2ed243ae95bb31d00f6559a96a2b17c5fcbbd5697704bc92199d9741a2cd34",
            "file": "src/app/services/dev-mode.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isDevMode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, isDevMode} from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class DevModeService {\n\n  constructor() { }\n\n  isDevMode() {\n    return isDevMode();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "DiscordService",
            "id": "injectable-DiscordService-bea2b195d0fb49dbae07d12f8d02456662ad48bba98c44c5c257608639af8714f0a984b82e081c5a180e105aa9ca620cd9fdda1cc68937bbdb8cb5fa13d42440",
            "file": "src/app/services/discord.service.ts",
            "properties": [
                {
                    "name": "hostName",
                    "defaultValue": "\"https://discord.com/api\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "getGuilds",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserDetails>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {UserDetails} from \"../interfaces/user-details\";\n\n@Injectable()\nexport class DiscordService {\n\n  hostName: string = \"https://discord.com/api\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  getGuilds(): Observable<any[]> {\n    return this.httpClient.get<any[]>(`${this.hostName}/users/@me/guilds`);\n  }\n\n  getUserDetails(): Observable<UserDetails> {\n    return this.httpClient.get<UserDetails>(`${this.hostName}/users/@me`);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GoogleAnalyticsService",
            "id": "injectable-GoogleAnalyticsService-f41385ed511f4afdf97dc378275cd212a4a00ded0063a8e4ad7b8bde7e2c52d0b408d9353820075b15560a85d66b3ecebd71fc66fba492aaae32e8d99afb2e59",
            "file": "src/app/google-analytics.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "sendPageNavigationEvent",
                    "args": [
                        {
                            "name": "pageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {environment} from \"../environments/environment\";\ndeclare let gtag: Function;\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class GoogleAnalyticsService {\n\n  constructor() { }\n\n  sendPageNavigationEvent(pageUrl: string): void {\n    if (environment.gTag) {\n          gtag(\"config\", environment.gTag, {\"page_path\": pageUrl});\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "PageLoadingService",
            "id": "injectable-PageLoadingService-b6ae6182940264da6a380082d502481b96877dd96154593e0e4dfe0182bf0da1a31c866d5beb4cdeb42b0974b36e6d8a186fade53267eb81d6087204a8793ac7",
            "file": "src/app/services/page-loading.service.ts",
            "properties": [
                {
                    "name": "subject",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSubject",
                    "args": [],
                    "optional": false,
                    "returnType": "Subject<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSubject",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {Subject} from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class PageLoadingService {\n\n  private subject : Subject<boolean> = new Subject<boolean>();\n\n  constructor() { }\n\n  getSubject(): Subject<boolean> {\n    return this.subject;\n  }\n\n  updateSubject(value: boolean): void {\n    this.subject.next(value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "RiotDdragonService",
            "id": "injectable-RiotDdragonService-479a153cc0ed326878c793225f6e57e2c1e88f236b35666ad385b8b93078402c919a8a1204122762c44e4a107f9a695fc58b50b1e651f7d60450bb3f23b0da78",
            "file": "src/app/services/riot-ddragon.service.ts",
            "properties": [
                {
                    "name": "baseHost",
                    "defaultValue": "\"https://ddragon.leagueoflegends.com\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "getListOfChampions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ChampionData>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {ChampionData} from \"../interfaces/championData\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class RiotDdragonService {\n\n    baseHost: string = \"https://ddragon.leagueoflegends.com\"\n\n    constructor(private httpClient: HttpClient) {}\n\n    getListOfChampions(): Observable<ChampionData> {\n        return this.httpClient.get<ChampionData>(`${this.baseHost}/cdn/${window.localStorage.getItem(\"leagueApiVersion\")}/data/en_US/champion.json`);\n    }\n\n    getVersions(): Observable<string[]>{\n        return this.httpClient.get<string[]>(`${this.baseHost}/api/versions.json`)\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamsWebsocketService",
            "id": "injectable-TeamsWebsocketService-d5c841c1cc570e70f8ced73134c955b901f482a160cc028d98d8ffd674d850af5585aa349b93b61864cc02ad5a2a0465eb77912b0df9a33b7ac7a61a57507949",
            "file": "src/app/services/teams-websocket.service.ts",
            "properties": [
                {
                    "name": "subject$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebSocketSubject<Team> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildLocalhostUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "connect",
                    "args": [
                        {
                            "name": "serverId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "WebSocketSubject<Team>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serverId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {webSocket, WebSocketSubject} from \"rxjs/webSocket\";\nimport {Team} from \"clash-bot-service-api\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class TeamsWebsocketService {\n\n  private subject$: WebSocketSubject<Team>| undefined;\n\n  constructor() {}\n\n  connect(serverId: string) : WebSocketSubject<Team> {\n    if (window.location.hostname === \"localhost\") {\n      this.subject$ = webSocket<Team>(`ws://${this.buildLocalhostUrl(`/ws/teams?serverId=${encodeURIComponent(serverId)}`)}`);\n    } else {\n      this.subject$ = webSocket<Team>(`wss://${window.location.hostname}/ws/teams?serverId=${encodeURIComponent(serverId)}`);\n    }\n    return this.subject$;\n  }\n\n  buildLocalhostUrl(url: string): string {\n      return `${window.location.hostname}:8081${url}`;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "DiscordInterceptor",
            "id": "injectable-DiscordInterceptor-bca5452e47ba492716d7d1b5c16b07fe63ffc814456c25079961a20f232139b0551289718f1d9216cc82369be2e2075fa0cb20ddbcf3f0164ba764697a234cf4",
            "file": "src/app/services/discord-interceptor.service.ts",
            "properties": [
                {
                    "name": "discordHostname",
                    "defaultValue": "\"discord.com/api\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {OAuthService} from \"angular-oauth2-oidc\";\n\n@Injectable()\nexport class DiscordInterceptor implements HttpInterceptor {\n\n  discordHostname = \"discord.com/api\"\n\n  constructor(private oauthService: OAuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (request.url.includes(this.discordHostname)) {\n      const Authorization = `Bearer ${this.oauthService.getAccessToken()}`;\n      request = request.clone({setHeaders: {Authorization}});\n    }\n    return next.handle(request);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "MockApplicationDetailsService",
            "id": "class-MockApplicationDetailsService-4e8e3dd4bb9d3bf6160dc2f39a8211cdda393248dd36cbb4531dab6afbafbb11b1bc9b8f2eadda4ed4b1379af74c95aa98eb4056821595e0052dfa946e259610",
            "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {moduleMetadata} from \"@storybook/angular\";\nimport {ClashbotWalkthroughComponent} from \"./clashbot-walkthrough.component\";\nimport {CommonModule} from \"@angular/common\";\nimport {MatStepperModule} from \"@angular/material/stepper\";\nimport {Meta, Story} from \"@storybook/angular/types-6-0\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {TeamsModule} from \"../teams-dashboard/teams.module\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatIconRegisteryModule} from \"../teams-dashboard/component/mat-icon-registery.module\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {ApplicationDetailsService} from \"../../services/application-details.service\";\nimport {ApplicationDetails} from \"../../interfaces/application-details\";\nimport {LoginStatus} from \"../../login-status\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {DiscordGuild} from \"../../interfaces/discord-guild\";\nimport {ClashbotWalkthroughRoutingModule} from \"./clashbot-walkthrough-routing.module\";\n\nconst createGuild = (name: string, id: string) => {\n    return {\n        features: [],\n        icon: \"\",\n        id,\n        name,\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    };\n}\nconst guildMap = new Map<string, DiscordGuild>();\nguildMap.set(\"1\", createGuild(\"Clash Bot\", \"1\"));\nguildMap.set(\"2\", createGuild(\"LoL-ClashBotSupport\", \"2\"));\nguildMap.set(\"3\", createGuild(\"Goon Squad\", \"3\"));\nguildMap.set(\"4\", createGuild(\"Dizzy\", \"4\"));\nguildMap.set(\"5\", createGuild(\"Wow\", \"5\"));\n\n\nclass MockApplicationDetailsService implements Partial<ApplicationDetailsService> {\n\n    private defaultStatus: ApplicationDetails = {\n        loggedIn: true,\n        loginStatus: LoginStatus.LOGGED_IN,\n        userGuilds: guildMap\n    };\n    applicationDetails: BehaviorSubject<ApplicationDetails> = new BehaviorSubject<ApplicationDetails>(this.defaultStatus);\n\n    constructor() {\n    }\n\n    getApplicationDetails(): BehaviorSubject<ApplicationDetails> {\n        return this.applicationDetails;\n    }\n}\n\nexport default {\n    title: \"Pages/ClashBotWalkthrough\",\n    component: ClashbotWalkthroughComponent,\n    argTypes: {},\n    decorators: [\n        moduleMetadata({\n            declarations: [],\n            imports: [\n                CommonModule,\n                MatStepperModule,\n                ClashbotWalkthroughRoutingModule,\n                MatButtonModule,\n                MatIconModule,\n                BrowserAnimationsModule,\n                TeamsModule,\n                ReactiveFormsModule,\n                MatFormFieldModule,\n                MatInputModule,\n                MatAutocompleteModule,\n                MatIconRegisteryModule\n            ],\n            providers: [{\n                provide: ApplicationDetailsService, useClass: MockApplicationDetailsService\n            }]\n        })\n    ]\n} as Meta;\n\nconst Template: Story<ClashbotWalkthroughComponent> = (args: ClashbotWalkthroughComponent) => ({\n    props: {\n        ...args\n    },\n});\n\nexport const Primary = Template.bind({});\nPrimary.args = {};\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            },
            "properties": [
                {
                    "name": "applicationDetails",
                    "defaultValue": "new BehaviorSubject<ApplicationDetails>(this.defaultStatus)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ApplicationDetails>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "defaultStatus",
                    "defaultValue": "{\n        loggedIn: true,\n        loginStatus: LoginStatus.LOGGED_IN,\n        userGuilds: guildMap\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationDetails",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getApplicationDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<ApplicationDetails>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        }
    ],
    "directives": [
        {
            "name": "ImageFallbackDirective",
            "id": "directive-ImageFallbackDirective-ff3e6f12a2efe4a1d2b1e7f86341e6e6b3468b21589995b6afe84d771422fbafd8957e801f3785222e20a689cde4280325969afee55585a1b3ebf1d7955fcde7",
            "file": "src/app/shared/image-fallback.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Directive, ElementRef, HostListener, Input} from \"@angular/core\";\n\n@Directive({\n  selector: \"img[appImageFallback]\"\n})\nexport class ImageFallbackDirective {\n\n  @Input() fallbackUrl: string = \"\";\n\n  constructor(private eRef: ElementRef) { }\n\n  @HostListener(\"error\")\n  loadOnFallbackError() {\n    const element: HTMLImageElement = <HTMLImageElement> this.eRef.nativeElement;\n    element.src = this.fallbackUrl || \"https://img.pokemondb.net/sprites/black-white/anim/normal/ditto.gif\";\n  }\n}\n",
            "selector": "img[appImageFallback]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "fallbackUrl",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "error",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loadOnFallbackError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'error'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-58c9754648220c6c48c25d24cdc3e79564f177db1dcdb9aec127b4c6aa11e2ae07d9d7c699bbd7cdec5a0a03ed40325f78ae74ab1da2a883a4679d2386ce1522",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$applicationDetailsObs",
                    "defaultValue": "this.applicationDetailsService.getApplicationDetails().asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "appVersion",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "assets",
                    "defaultValue": "[\"top\", \"mid\", \"jg\", \"bot\", \"supp\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "authCodeFlowConfig",
                    "defaultValue": "{\n        loginUrl: \"https://discord.com/api/oauth2/authorize\",\n        tokenEndpoint: this.getAuthPath(),\n        revocationEndpoint: \"https://discord.com/api/oauth2/revoke\",\n        redirectUri: window.location.origin,\n        clientId: environment.discordClientId,\n        responseType: \"code\",\n        scope: \"identify guilds\",\n        oidc: false,\n        sessionChecksEnabled: true,\n        customQueryParams: {\n            \"prompt\": \"none\"\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthConfig",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "className",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ]
                },
                {
                    "name": "darkMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "defaultRoutingArray",
                    "defaultValue": "[\n        {\n            name: \"Welcome Page\",\n            route: \"/\",\n            icon: \"house\",\n            id: \"clash-bot-menu-welcome-page\"\n        }\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoutingDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loggedInArray",
                    "defaultValue": "[\n        this.defaultRoutingArray[0],\n        {\n            name: \"Teams\",\n            route: \"/teams\",\n            icon: \"groups\",\n            id: \"clash-bot-menu-teams-page\"\n        },\n        {\n            name: \"Walkthrough\",\n            route: \"/walkthrough\",\n            icon: \"groups\",\n            id: \"clash-bot-menu-walkthrough\"\n        }\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoutingDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "pageLoadingObs$",
                    "defaultValue": "this.pageLoadingService.getSubject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "routingArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoutingDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getAuthPath",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "logUserOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDarkMode",
                    "args": [
                        {
                            "name": "turnDarkModeOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "turnDarkModeOn",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDarkModeForUser",
                    "args": [
                        {
                            "name": "darkModeCurrentStatus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "darkModeCurrentStatus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding, OnDestroy, OnInit} from \"@angular/core\";\nimport {NavigationEnd, Router} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {environment} from \"../environments/environment\";\nimport {GoogleAnalyticsService} from \"./google-analytics.service\";\nimport {ApplicationDetailsService} from \"./services/application-details.service\";\nimport {MatIconRegistry} from \"@angular/material/icon\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {RiotDdragonService} from \"./services/riot-ddragon.service\";\nimport {take} from \"rxjs/operators\";\nimport {RoutingDetails} from \"./interfaces/routing-details\";\nimport {PageLoadingService} from \"./services/page-loading.service\";\nimport {AuthConfig, OAuthService} from \"angular-oauth2-oidc\";\nimport {JwksValidationHandler} from \"angular-oauth2-oidc-jwks\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent implements OnInit, OnDestroy {\n    appVersion: string = environment.version;\n    subscriptions: Subscription[] = [];\n    darkMode;\n    username?: string;\n    pageLoadingObs$ = this.pageLoadingService.getSubject();\n    $applicationDetailsObs = this.applicationDetailsService.getApplicationDetails().asObservable();\n\n    routingArray: RoutingDetails[] = [];\n\n    defaultRoutingArray: RoutingDetails[] = [\n        {\n            name: \"Welcome Page\",\n            route: \"/\",\n            icon: \"house\",\n            id: \"clash-bot-menu-welcome-page\"\n        }\n    ];\n\n    loggedInArray: RoutingDetails[] = [\n        this.defaultRoutingArray[0],\n        {\n            name: \"Teams\",\n            route: \"/teams\",\n            icon: \"groups\",\n            id: \"clash-bot-menu-teams-page\"\n        },\n        {\n            name: \"Walkthrough\",\n            route: \"/walkthrough\",\n            icon: \"groups\",\n            id: \"clash-bot-menu-walkthrough\"\n        }\n    ];\n\n    assets = [\"top\", \"mid\", \"jg\", \"bot\", \"supp\"];\n\n    @HostBinding(\"class\") className = \"\";\n\n    authCodeFlowConfig: AuthConfig = {\n        loginUrl: \"https://discord.com/api/oauth2/authorize\",\n        tokenEndpoint: this.getAuthPath(),\n        revocationEndpoint: \"https://discord.com/api/oauth2/revoke\",\n        redirectUri: window.location.origin,\n        clientId: environment.discordClientId,\n        responseType: \"code\",\n        scope: \"identify guilds\",\n        oidc: false,\n        sessionChecksEnabled: true,\n        customQueryParams: {\n            \"prompt\": \"none\"\n        }\n    }\n\n    constructor(private router: Router,\n                private applicationDetailsService: ApplicationDetailsService,\n                private googleAnalyticsService: GoogleAnalyticsService,\n                private riotDdragonService: RiotDdragonService,\n                private matIconRegistry: MatIconRegistry,\n                private sanitizer: DomSanitizer,\n                private pageLoadingService: PageLoadingService,\n                private oauthService: OAuthService,\n                private _snackBar: MatSnackBar) {\n        this.assets.forEach((id) => {\n            this.matIconRegistry.addSvgIcon(`league-${id}`,\n                this.sanitizer.bypassSecurityTrustResourceUrl(`assets/${id}.svg`));\n        });\n        this.darkMode = localStorage.getItem(\"darkMode\") === \"true\";\n    }\n\n    ngOnInit(): void {\n        this.oauthService.configure(this.authCodeFlowConfig);\n        this.oauthService.tokenValidationHandler = new JwksValidationHandler();\n        this.oauthService.events.subscribe((event) => {\n            if (\"token_expires\" === event.type) {\n                this.oauthService.refreshToken()\n                    .then(() => this._snackBar\n                        .open(\"Refreshed your session.\", \"X\", {duration: 5 * 1000}))\n                    .catch(() => {\n                        this.applicationDetailsService.logOutUser();\n                        this._snackBar\n                            .open(\"Failed to refresh\", \"X\", {duration: 5 * 1000});\n                    });\n            }\n        });\n        this.toggleDarkMode(this.darkMode);\n        this.subscriptions.push(\n            this.router.events.subscribe(event => {\n                if (event instanceof NavigationEnd) {\n                    this.googleAnalyticsService.sendPageNavigationEvent(event.urlAfterRedirects);\n                }\n            })\n        );\n        this.subscriptions.push(\n            this.applicationDetailsService.getApplicationDetails()\n                .subscribe((applicationDetails) => {\n                    if (applicationDetails.loggedIn) {\n                        this.routingArray = this.loggedInArray;\n                        this.username = applicationDetails.userDetails?.username;\n                    } else {\n                        this.routingArray = this.defaultRoutingArray;\n                        delete this.username;\n                    }\n            })\n        );\n        this.riotDdragonService.getVersions().pipe(take(1)).subscribe((versions) => {\n            window.localStorage.setItem(\"leagueApiVersion\", versions[0]);\n        });\n    }\n\n    toggleDarkMode(turnDarkModeOn: boolean) {\n        const darkModeClassName = \"dark\";\n        this.className = turnDarkModeOn ? darkModeClassName : \"\";\n        localStorage.setItem(\"darkMode\", JSON.stringify(turnDarkModeOn));\n    }\n\n    toggleDarkModeForUser(darkModeCurrentStatus: boolean) {\n        const darkModeClassName = \"dark\";\n        this.className = !darkModeCurrentStatus ? darkModeClassName : \"\";\n        localStorage.setItem(\"darkMode\", JSON.stringify(!darkModeCurrentStatus));\n        this.darkMode = !darkModeCurrentStatus;\n    }\n\n    logUserOut() {\n        this.oauthService.logOut();\n        this.applicationDetailsService.logOutUser();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    navigate(route: string) {\n        this.pageLoadingObs$.next(true);\n        this.router.navigate([route])\n            .catch(() => this.pageLoadingObs$.next(false));\n    }\n\n    private getAuthPath() {\n        if (environment.authPath.includes(\"localhost\")) {\n            return environment.authPath;\n        }\n        return window.location.origin + environment.authPath;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-card {\n  max-width: 400px;\n}\n\n.main-page {\n  padding: 1em;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  overflow: auto;\n}\n\n.dashboard {\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n}\n\n@media only screen and (max-width: 500px) {\n  :host {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n}\n\n@media only screen and (min-width: 501px) {\n  :host {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-between;\n  }\n}\n\n.copyright-text {\n  text-align: left;\n  opacity: 30%;\n}\n\n.clash-bot-spacer {\n  flex: 1 1 auto;\n}\n\n.clash-bot-footer-details-container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.clash-welcome-buttons {\n  display: flex;\n  align-content: space-between;\n}\n\n.clash-bot-footer {\n  margin-top: 1em;\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "googleAnalyticsService",
                        "type": "GoogleAnalyticsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "riotDdragonService",
                        "type": "RiotDdragonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "googleAnalyticsService",
                        "type": "GoogleAnalyticsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "riotDdragonService",
                        "type": "RiotDdragonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"header\">\n    <mat-toolbar color=\"primary\">\n        <button id='clash-bot-menu' mat-icon-button\n                [matMenuTriggerFor]=\"menu\" aria-label=\"tabs\">\n            <mat-icon>menu</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button *ngFor=\"let routing of routingArray\"\n                    id=\"{{routing.id}}\" mat-menu-item (click)=\"navigate(routing.route)\">\n                <mat-icon>{{routing.icon}}</mat-icon>\n                <span>{{routing.name}}</span>\n            </button>\n        </mat-menu>\n        <span class=\"title\">Clash Bot</span>\n        <span class=\"clash-bot-spacer\"></span>\n        <app-profile-icon [username]=\"username ?? ''\"\n                          [isDarkModeOn]=\"darkMode\"\n                          [loggedIn]=\"($applicationDetailsObs | async)?.loggedIn ?? false\"\n                          (goToSettingsEvent)=\"navigate($event)\"\n                          (toggleDarkModeEvent)=\"toggleDarkModeForUser($event)\"\n                          (logOutEvent)=\"logUserOut()\"></app-profile-icon>\n    </mat-toolbar>\n    <div *ngIf=\"pageLoadingObs$ | async\">\n        <mat-progress-bar mode=\"indeterminate\" color=\"accent\"></mat-progress-bar>\n    </div>\n</div>\n<div class=\"main-page\">\n    <router-outlet></router-outlet>\n    <div class=\"clash-bot-footer footer\">\n        <mat-card>\n            <div class=\"clash-bot-footer-details-container\">\n                <mat-card-content class=\"copyright-text\">Copyright 2021 - Poss11111</mat-card-content>\n                <mat-card-content>Version: {{appVersion}}</mat-card-content>\n            </div>\n            <mat-card-content class=\"disclaimer-text\">Clash-Bot is not endorsed by Riot Games and does not reflect the\n                views\n                or opinions of\n                Riot Games or anyone officially involved in producing or managing League of Legends. League of Legends\n                and Riot\n                Games are trademarks or registered trademarks of Riot Games, Inc. League of Legends © Riot Games, Inc.\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n\n"
        },
        {
            "name": "ClashbotWalkthroughComponent",
            "id": "component-ClashbotWalkthroughComponent-4b208b197823c3fb615f0357e4f113f867407e4b0ae66e1aa4b63f1ed64cde7d96bbce58938f12bf69c6702ca4b49a6cfa8c21afcfeaf301da125fb088153d74",
            "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clashbot-walkthrough",
            "styleUrls": [
                "./clashbot-walkthrough.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clashbot-walkthrough.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "eligibleTournaments",
                    "defaultValue": "[\n    {\n      tournamentName: \"awesome_sauce\",\n      tournamentDay: \"1\",\n    },\n    {\n      tournamentName: \"awesome_sauce\",\n      tournamentDay: \"2\",\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "mockTeam",
                    "defaultValue": "{\n    name: \"abra\",\n    teamDetails: [\n      {\n        name: \"Roidrage\",\n        id: \"1\",\n        role: \"Top\",\n        champions: [\"Sett\"],\n        isUser: true\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Mid\",\n        isUser: false\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Jg\",\n        isUser: false\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Bot\",\n        isUser: false\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Supp\",\n        isUser: false\n      },\n    ],\n    tournament: {\n      tournamentName: \"awesome_sauce\",\n      tournamentDay: \"1\"\n    },\n    server: {\n      features: [],\n      icon: \"\",\n      id: \"0\",\n      name: \"Clash Bot\",\n      owner: false,\n      permissions: 0,\n      permissions_new: \"\"\n    },\n    id: \"1\"\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamUiWrapper",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "serverNameToIdMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "servers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "tentativeList",
                    "defaultValue": "[\n    {\n      serverId: \"0\",\n      tentativePlayers: [],\n      isMember: false,\n      tournamentDetails: {\n        tournamentName: \"awesome_sauce\",\n        tournamentDay: \"1\"\n      }\n    },\n    {\n      serverId: \"0\",\n      tentativePlayers: [{\n        name: \"Roidrage\"\n      }],\n      playerNames: [\"Roidrage\"],\n      isMember: true,\n      tournamentDetails: {\n        tournamentName: \"awesome_sauce\",\n        tournamentDay: \"2\"\n      }\n    }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TentativeRecord[]",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from \"@angular/core\";\nimport {TeamUiWrapper} from \"../../interfaces/team-ui-wrapper\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\nimport {TentativeRecord} from \"../../interfaces/tentative-record\";\nimport {FormArray, FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {ApplicationDetailsService} from \"../../services/application-details.service\";\n\n@Component({\n  selector: \"app-clashbot-walkthrough\",\n  templateUrl: \"./clashbot-walkthrough.component.html\",\n  styleUrls: [\"./clashbot-walkthrough.component.scss\"]\n})\nexport class ClashbotWalkthroughComponent {\n  mockTeam: TeamUiWrapper = {\n    name: \"abra\",\n    teamDetails: [\n      {\n        name: \"Roidrage\",\n        id: \"1\",\n        role: \"Top\",\n        champions: [\"Sett\"],\n        isUser: true\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Mid\",\n        isUser: false\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Jg\",\n        isUser: false\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Bot\",\n        isUser: false\n      },\n      {\n        name: \"\",\n        id: \"0\",\n        role: \"Supp\",\n        isUser: false\n      },\n    ],\n    tournament: {\n      tournamentName: \"awesome_sauce\",\n      tournamentDay: \"1\"\n    },\n    server: {\n      features: [],\n      icon: \"\",\n      id: \"0\",\n      name: \"Clash Bot\",\n      owner: false,\n      permissions: 0,\n      permissions_new: \"\"\n    },\n    id: \"1\"\n  };\n  eligibleTournaments: Tournament[] = [\n    {\n      tournamentName: \"awesome_sauce\",\n      tournamentDay: \"1\",\n    },\n    {\n      tournamentName: \"awesome_sauce\",\n      tournamentDay: \"2\",\n    }\n  ];\n  tentativeList: TentativeRecord[] = [\n    {\n      serverId: \"0\",\n      tentativePlayers: [],\n      isMember: false,\n      tournamentDetails: {\n        tournamentName: \"awesome_sauce\",\n        tournamentDay: \"1\"\n      }\n    },\n    {\n      serverId: \"0\",\n      tentativePlayers: [{\n        name: \"Roidrage\"\n      }],\n      playerNames: [\"Roidrage\"],\n      isMember: true,\n      tournamentDetails: {\n        tournamentName: \"awesome_sauce\",\n        tournamentDay: \"2\"\n      }\n    }];\n  data = [];\n  // form = this.fb.group({\n  //   serveri: this.fb.group({\n  //     servers: this.fb.array([\n  //       this.fb.group({\n  //         server: [\"\", [Validators.required]],\n  //       })\n  //     ]),\n  //     defaultServer: this.fb.group({\n  //       server: [\"\", [Validators.required]],\n  //     }),\n  //   }),\n  // })\n  servers: string[] = [];\n  serverNameToIdMap: Map<string, string> = new Map();\n\n  // get serverFormControls(): FormArray {\n  //   return this.form.get(\"serveri\")?.get(\"servers\") as FormArray\n  // }\n  //\n  // get defaultServerFormControls(): FormArray {\n  //   return this.form.get(\"serveri\")?.get(\"defaultServer\") as FormArray\n  // }\n\n  constructor(private fb: FormBuilder,\n              private appDetails: ApplicationDetailsService) {\n    const details = appDetails.getApplicationDetails().value;\n    details.userGuilds?.forEach(item => {\n      this.servers.push(item.name);\n      this.serverNameToIdMap.set(item.name, item.id);\n    });\n  }\n\n  // addServer() {\n  //   let serverForm = this.form.value.serveri.servers;\n  //   let serverFC = this.serverFormControls;\n  //\n  //   this.servers.splice(\n  //       this.servers.indexOf(\n  //           serverForm[serverForm.length-1].server), 1);\n  //\n  //   if (serverForm.length < 5) {\n  //     const server = this.fb.group({\n  //       server: [\"\", [Validators.required]],\n  //     })\n  //     serverFC.push(server);\n  //   }\n  // }\n\n  submit() {\n    // const serverIds: string[] = [];\n    // console.dir(this.form.value);\n    // this.form.value.serveri.servers.forEach((server: any) => {\n    //   serverIds.push(this.serverNameToIdMap.get(server.server) ?? \"\");\n    // });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".component-desc-container {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.explanation-container {\n  max-width: 20em;\n  margin-right: 1em;\n}\n\n.server-filter-component-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.server-filter-component-container > h2 {\n  margin-right: 1em;\n}\n\n.tentative-component-container {\n  flex-grow: 1;\n}\n\n.server-form-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 15em;\n}\n\n.default-server-input {\n  margin-top: 1em;\n}\n\n.example-headers-align .mat-expansion-panel-header-description {\n  justify-content: space-between;\n  align-items: center;\n}",
                    "styleUrl": "./clashbot-walkthrough.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appDetails",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 110,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appDetails",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-stepper linear>\n    <mat-step label=\"Welcome to ClashBot\" state=\"phone\">\n        <h1>Welcome to Clash Bot!</h1>\n        <p>To handle all of your League of Legends Clash Tournament scheduling needs through discord!\n            The Riot Tournaments are pulled directly from Riot.</p>\n        <h2>Disclaimer</h2>\n        <p>Clash-Bot is not endorsed by Riot Games and does not reflect the\n            views\n            or opinions of\n            Riot Games or anyone officially involved in producing or managing League of Legends. League of Legends\n            and Riot\n            Games are trademarks or registered trademarks of Riot Games, Inc. League of Legends © Riot Games, Inc.</p>\n        <div>\n            <button mat-button matStepperNext>Next</button>\n        </div>\n    </mat-step>\n    <mat-step label=\"Setup\" >\n<!--    <mat-step label=\"Setup\" [stepControl]=\"form\">-->\n<!--        <form [formGroup]=\"form\">-->\n<!--            <ng-template matStepLabel>Give us some details!</ng-template>-->\n<!--            <h1>We need some information from you!</h1>-->\n<!--            <p>We do not want to overload your screen with all of your awesome Discord Servers :).</p>-->\n<!--            <p>You can provide up to 5 Discord Servers that you want to see other Clash Tournament Teams with.</p>-->\n<!--            <p>When you are finished with this process, you can update this list in your settings.</p>-->\n<!--            <div class=\"server-form-container\" formGroupName=\"serveri\">-->\n<!--                <ng-container-->\n<!--                        formArrayName=\"servers\"-->\n<!--                        *ngFor=\"-->\n<!--                            let item of serverFormControls.controls;-->\n<!--                            let itemIndex = index-->\n<!--                          \">-->\n<!--                    <mat-form-field [formGroupName]=\"itemIndex\" appearance=\"fill\">-->\n<!--                        <mat-label>Discord Server</mat-label>-->\n<!--                        <input matInput-->\n<!--                               placeholder=\"Discord Server\"-->\n<!--                               formControlName=\"server\"-->\n<!--                               [matAutocomplete]=\"auto\">-->\n<!--                        <mat-autocomplete #auto=\"matAutocomplete\">-->\n<!--                            <mat-option *ngFor=\"let server of servers\" [value]=\"server\">-->\n<!--                                {{server}}-->\n<!--                            </mat-option>-->\n<!--                        </mat-autocomplete>-->\n<!--                    </mat-form-field>-->\n<!--                </ng-container>-->\n<!--                <button mat-raised-button-->\n<!--                        color=\"primary\"-->\n<!--                        *ngIf=\"serverFormControls.controls.length < 5\"-->\n<!--                        (click)=\"addServer()\">Add Another Server?</button>-->\n<!--                <mat-form-field-->\n<!--                        class=\"default-server-input\"-->\n<!--                        *ngIf=\"serverFormControls.valid\"-->\n<!--                        formGroupName=\"defaultServer\"-->\n<!--                        appearance=\"fill\">-->\n<!--                    <mat-label>Default Server</mat-label>-->\n<!--                    <input matInput-->\n<!--                           placeholder=\"Default Server\"-->\n<!--                           formControlName=\"server\"-->\n<!--                           [matAutocomplete]=\"auto\">-->\n<!--                    <mat-autocomplete #auto=\"matAutocomplete\">-->\n<!--                        <mat-option *ngFor=\"let server of serverFormControls.value\" [value]=\"server.server\">-->\n<!--                            {{server.server}}-->\n<!--                        </mat-option>-->\n<!--                    </mat-autocomplete>-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-button-->\n<!--                        matStepperNext-->\n<!--                        (click)=\"submit()\"-->\n<!--                        *ngIf=\"this.form.valid\">Next</button>-->\n                <button>\n                        matStepperNext\n                        (click)=\"submit()\">Next</button>\n<!--            </div>-->\n<!--        </form>-->\n    </mat-step>\n    <mat-step label=\"How to use the Teams page\" state=\"chat\">\n        <h1>How to use Clash Bot?</h1>\n        <p>All of your scheduling will be done on the Teams page. You can navigate to it using the menu at the top left.</p>\n        <p>Here are a few components and their usage below.</p>\n        <mat-accordion class=\"example-headers-align\" multi>\n            <mat-expansion-panel>\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        Discord Server Filter\n                    </mat-panel-title>\n                    <mat-panel-description>\n                        For switching between Servers\n                    </mat-panel-description>\n                </mat-expansion-panel-header>\n                <p>You can see which Discord Server you are currently using.</p>\n                <p>If you want to change, just use the filter button to then select any of your selected guilds.</p>\n                <p>The 'Free Agents' selection at the top can be used as a open Team for anyone across any server to join.</p>\n                <div class=\"server-filter-component-container\">\n                    <mat-icon>discord</mat-icon>\n                    <h2 id=\"selected-server\">LoL-ClashBotSupport</h2>\n                    <button mat-mini-fab>\n                        <mat-icon>filter_list</mat-icon>\n                    </button>\n                </div>\n            </mat-expansion-panel>\n        </mat-accordion>\n        <div class=\"component-desc-container\">\n            <div class=\"explanation-container\">\n                <h2>Discord Server Filter</h2>\n                <p>You can see which Discord Server you are currently using.</p>\n                <p>If you want to change, just use the filter button to then select any of your selected guilds.</p>\n                <p>The 'Free Agents' selection at the top can be used as a open Team for anyone across any server to join.</p>\n            </div>\n        </div>\n        <div class=\"component-desc-container\">\n            <div class=\"explanation-container\">\n                <h2>New Team Card</h2>\n                <p>To start, you can create a brand new Team for one of the upcoming Clash Tournaments in the Discord Server you have selected.</p>\n                <p>Just click on the plus sign and select the Tournament, Day, and Role you want to sign up with.</p>\n            </div>\n            <app-new-team-card [eligibleTournaments]=\"eligibleTournaments\"></app-new-team-card>\n        </div>\n        <div class=\"component-desc-container\">\n            <div class=\"explanation-container\">\n                <h2>Team Cards</h2>\n                <p>Each Team contains one of each of the League of Legend's roles.</p>\n                <p>To assign yourself to a Team for a given role, just click on the role and click yes on the dialog box.</p>\n                <h2>Important!</h2>\n                <p>You can only be assigned to a single Team or Tentative Queue per Tournament.</p>\n            </div>\n            <app-team-card [team]=\"mockTeam\"></app-team-card>\n        </div>\n        <div class=\"component-desc-container\">\n            <div class=\"explanation-container\">\n                <h2>Tentative Queue</h2>\n                <p>If you uncertain if you will be able to play in a Clash Tournament, have no fear! You can use this component to let your Server mates know you are uncertain.</p>\n            </div>\n            <div class=\"tentative-component-container\">\n                <h3>Click It!</h3>\n                <app-teams-tentative-table [tentativeList]=\"tentativeList\"\n                                       tentativeDataStatus=\"SUCCESSFUL\"></app-teams-tentative-table>\n            </div>\n        </div>\n        <div>\n            <button mat-button matStepperPrevious>Back</button>\n            <button mat-button matStepperNext>Finished</button>\n        </div>\n    </mat-step>\n</mat-stepper>"
        },
        {
            "name": "ClashTournamentCalendarComponent",
            "id": "component-ClashTournamentCalendarComponent-04dfe7f4f97b67ec8fb13fd96b3b47f3f4c8c5b40a059cf5714526b637a7b8bc1f9f12f9af4705b7c31ad25f2c17f888037aafea2fde3365bd5d1e18f2b4f8cc",
            "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clash-tournament-calendar",
            "styleUrls": [
                "./clash-tournament-calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clash-tournament-calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "daysSelected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarHeaderComponent",
                    "defaultValue": "ClashTournamentCalendarHeaderComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isSelected",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from \"@angular/core\";\nimport {ClashTournamentCalendarHeaderComponent} from \"../clash-tournament-calendar-header/clash-tournament-calendar-header.component\";\n\n@Component({\n  selector: \"app-clash-tournament-calendar\",\n  templateUrl: \"./clash-tournament-calendar.component.html\",\n  styleUrls: [\"./clash-tournament-calendar.component.scss\"]\n})\nexport class ClashTournamentCalendarComponent {\n\n  @Input()\n  daysSelected: any[] = [];\n\n  isSelected = (event: any) => {\n    return this.daysSelected.find(x => (x.getMonth() + 1).toString() == (event.getMonth() + 1).toString() && x.getDate().toString() == event.getDate().toString()) ? \"selected\" : \"notselected\";\n  };\n\n  event: any;\n  minDate: Date = new Date();\n  calendarHeaderComponent: any = ClashTournamentCalendarHeaderComponent;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".demo-inline-calendar-card {\n  max-width: 450px;\n}",
                    "styleUrl": "./clash-tournament-calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "templateData": " <mat-card class=\"demo-inline-calendar-card\">\n   <mat-card-content>\n    <mat-calendar [dateClass]=\"isSelected\"\n                  [minDate]=\"minDate\"\n                  [headerComponent]=\"calendarHeaderComponent\"></mat-calendar>\n   </mat-card-content>\n  </mat-card>\n"
        },
        {
            "name": "ClashTournamentCalendarHeaderComponent",
            "id": "component-ClashTournamentCalendarHeaderComponent-d885eb8baf8bf79803fa60ca1957dc8ca1c65a5513bc47db198efae37f2ad61cae592e193784ab27e1cf64701f4e9396bbe43d633383b96aa6f6e7868c1d5402",
            "file": "src/app/clash-tournament-calendar-header/clash-tournament-calendar-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clash-tournament-calendar-header",
            "styleUrls": [
                "./clash-tournament-calendar-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./clash-tournament-calendar-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "monthsPastDate",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "nextClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from \"@angular/core\";\nimport {MatCalendar} from \"@angular/material/datepicker\";\n\n@Component({\n  selector: \"app-clash-tournament-calendar-header\",\n  templateUrl: \"./clash-tournament-calendar-header.component.html\",\n  styleUrls: [\"./clash-tournament-calendar-header.component.scss\"]\n})\nexport class ClashTournamentCalendarHeaderComponent {\n\n  monthsPastDate: number = 0;\n\n  constructor(private calendar: MatCalendar<any>) {}\n\n  prevClicked() {\n    if (this.monthsPastDate > 0) {\n      this.monthsPastDate--;\n      this.calendar._goToDateInView(new Date(new Date().setMonth(this.calendar.activeDate.getMonth() - 1)), \"month\");\n    }\n  }\n\n  nextClicked() {\n    this.monthsPastDate++;\n    this.calendar._goToDateInView(new Date(new Date().setMonth(this.calendar.activeDate.getMonth() + 1)), \"month\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-calendar-header-button-container {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n}",
                    "styleUrl": "./clash-tournament-calendar-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "calendar",
                        "type": "MatCalendar<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "calendar",
                        "type": "MatCalendar<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"clash-bot-calendar-header\">\n    <h2>Upcoming Clash Tournaments</h2>\n    <div class=\"clash-bot-calendar-header-button-container\">\n        <button mat-icon-button id=\"clash-bot-calendar-header-button-prev\" (click)=\"prevClicked()\" [disabled]=\"monthsPastDate <= 0\" aria-label=\"previous\">\n            <mat-icon>chevron_left</mat-icon>\n        </button>\n        <button mat-icon-button id=\"clash-bot-calendar-header-button-next\" (click)=\"nextClicked()\" aria-label=\"next\">\n            <mat-icon>chevron_right</mat-icon>\n        </button>\n    </div>\n</div>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-87b6190b49f75fd61957fa4a4cebc649503d0bdaa6f58696b4da039fdc07b0b1e9f078986246718ab3d5928cfa707b1e0cadc096e02bbbe0bfae58068c5ed21d",
            "file": "src/app/dialogs/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog",
            "styleUrls": [
                "./confirmation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject} from \"@angular/core\";\nimport {DialogData} from \"../../interfaces/dialog-data\";\nimport {MAT_DIALOG_DATA} from \"@angular/material/dialog\";\n\n@Component({\n  selector: \"app-confirmation-dialog\",\n  templateUrl: \"./confirmation-dialog.component.html\",\n  styleUrls: [\"./confirmation-dialog.component.scss\"]\n})\nexport class ConfirmationDialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-confirmation-dialog-button-container {\n  display: flex;\n  justify-content: space-around;\n}\n",
                    "styleUrl": "./confirmation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div>\n  <div>\n    <p>{{ data.message }}</p>\n  </div>\n  <div class=\"clash-bot-confirmation-dialog-button-container\">\n    <button mat-raised-button mat-dialog-close id=\"clash-bot-dialog-box-no-button\">No</button>\n    <button mat-raised-button [mat-dialog-close]=\"true\" color=\"primary\" id=\"clash-bot-dialog-box-yes-button\">Yes</button>\n  </div>\n</div>\n"
        },
        {
            "name": "NewTeamCardComponent",
            "id": "component-NewTeamCardComponent-e79eac80af52c69ad3b45682a8b31ebae4634dab424b60d7e131b3572741a06f92a50dd63cf5bfe75d45bd55a5dcfc939ee228ae4fee01e4bd4f8c1c291b9c9b",
            "file": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-team-card",
            "styleUrls": [
                "./new-team-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-team-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "eligibleTournaments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Tournament[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "createNewTeamEvent",
                    "defaultValue": "new EventEmitter<CreateNewTeamDetails>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<CreateNewTeamDetails>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "creatingNewTeam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "roleControl",
                    "defaultValue": "new FormControl(\"\", Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "rolesAsString",
                    "defaultValue": "[\"Top\", \"Mid\", \"Jg\", \"Bot\", \"Supp\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tournamentControl",
                    "defaultValue": "new FormControl(\"\", Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewTeam",
                    "args": [
                        {
                            "name": "option",
                            "type": "MatOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "MatOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {FormControl, Validators} from \"@angular/forms\";\nimport {MatOption} from \"@angular/material/core\";\nimport {CreateNewTeamDetails} from \"../../../../interfaces/create-new-team-details\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\n\n@Component({\n  selector: \"app-new-team-card\",\n  templateUrl: \"./new-team-card.component.html\",\n  styleUrls: [\"./new-team-card.component.scss\"]\n})\nexport class NewTeamCardComponent {\n\n  @Input()\n  eligibleTournaments: Tournament[] = [];\n\n  @Output()\n  createNewTeamEvent: EventEmitter<CreateNewTeamDetails> = new EventEmitter<CreateNewTeamDetails>();\n\n  tournamentControl: FormControl = new FormControl(\"\", Validators.required);\n  roleControl: FormControl = new FormControl(\"\", Validators.required);\n  creatingNewTeam: boolean = false;\n  rolesAsString: string[] = [\"Top\", \"Mid\", \"Jg\", \"Bot\", \"Supp\"];\n\n  constructor() {}\n\n  createNewTeam(option: MatOption) {\n    option.select();\n    let role = this.roleControl.value;\n    let tournamentName = \"\";\n    let tournamentDay = \"\";\n    if (this.tournamentControl.value) {\n      let split = this.tournamentControl.value.split(\" \");\n      tournamentName = split[0];\n      tournamentDay = split[1];\n    }\n    if (tournamentName && tournamentDay && role) {\n      option.deselect();\n      const newTeamDetails: CreateNewTeamDetails = {\n        tournamentName: tournamentName,\n        tournamentDay: tournamentDay,\n        role: role\n      };\n      this.createNewTeamEvent.emit(newTeamDetails);\n      this.tournamentControl.reset();\n      this.roleControl.reset();\n      this.creatingNewTeam = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-teams-card-create-new-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  max-width: 250px;\n}\n\n.clash-bot-teams-card-create-new-form-container {\n  display: flex;\n  justify-content: center;\n}\n\n.clash-bot-teams-card-create-new-forms {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}",
                    "styleUrl": "./new-team-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "templateData": "<mat-card id=\"clash-bot-teams-card-create-new-team-card\" class=\"clash-bot-teams-card-create-new-container\">\n    <h2>Create a new Team</h2>\n    <div class=\"clash-bot-teams-card-create-new-form-container\">\n        <button id=\"clash-bot-teams-card-create-new-button\" *ngIf=\"!creatingNewTeam\" mat-mini-fab color=\"primary\"\n                aria-label=\"Create a new Team\" (click)=\"creatingNewTeam = true\">\n            <mat-icon>add</mat-icon>\n        </button>\n        <form *ngIf=\"creatingNewTeam\" class=\"clash-bot-teams-card-create-new-forms\">\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Choose a Tournament</mat-label>\n                <mat-select id=\"clash-bot-teams-card-create-new-tournament-dropdown\"\n                            [formControl]=\"tournamentControl\" required>\n                    <mat-option\n                            [id]=\"'clash-bot-teams-card-create-new-dropdown-' + eligibleTournament.tournamentName + '-' + eligibleTournament.tournamentDay\"\n                            #option=\"matOption\" (click)=\"createNewTeam(option)\" *ngFor=\"let eligibleTournament of eligibleTournaments\"\n                            value=\"{{eligibleTournament.tournamentName}} {{eligibleTournament.tournamentDay}}\">{{eligibleTournament.tournamentName}}\n                        - Day {{eligibleTournament.tournamentDay}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Choose a Role</mat-label>\n                <mat-select id=\"clash-bot-teams-card-create-new-role-dropdown\"\n                            [formControl]=\"roleControl\" required>\n                    <mat-option\n                            id=\"clash-bot-teams-card-create-new-dropdown-{{roleString | kebabcase}}\"\n                            #option=\"matOption\" (click)=\"createNewTeam(option)\" *ngFor=\"let roleString of rolesAsString\"\n                            value=\"{{roleString}}\">{{roleString}}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </form>\n    </div>\n</mat-card>\n"
        },
        {
            "name": "ProfileIconComponent",
            "id": "component-ProfileIconComponent-d835d97a85ec3ce8e674940524565a8116a4579a058fce7d06f70cfe0de8c37f18cb3461101f1cdb5cbc6100123553aae4958f7a48c236b61199a5e7ae2a364d",
            "file": "src/app/profile-icon/profile-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-icon",
            "styleUrls": [
                "./profile-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDarkModeOn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loggedIn",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "username",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "goToSettingsEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "logOutEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "toggleDarkModeEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goToLinkInNewTab",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToSettings",
                    "args": [
                        {
                            "name": "routing",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routing",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleDarkMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from \"@angular/core\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ConfirmationDialogComponent} from \"../dialogs/confirmation-dialog/confirmation-dialog.component\";\n\n@Component({\n  selector: \"app-profile-icon\",\n  templateUrl: \"./profile-icon.component.html\",\n  styleUrls: [\"./profile-icon.component.scss\"]\n})\nexport class ProfileIconComponent{\n\n  @Input()\n  username: string = \"\";\n\n  @Input()\n  loggedIn: boolean = true;\n\n  @Input()\n  isDarkModeOn: boolean = false;\n\n  @Output()\n  goToSettingsEvent: EventEmitter<string> = new EventEmitter<string>();\n\n  @Output()\n  logOutEvent: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  @Output()\n  toggleDarkModeEvent: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private matDialog: MatDialog) { }\n\n  goToSettings(routing: string) {\n    this.goToSettingsEvent.emit(routing);\n  }\n\n  logOut() {\n    let dialogRef = this.matDialog.open(ConfirmationDialogComponent,\n        {data: {message: \"Are you sure you want to log out?\"}})\n    dialogRef.afterClosed()\n        .subscribe((logOutUser) => {\n          if (logOutUser) {\n            this.logOutEvent.emit(true);\n          }\n        });\n  }\n\n  toggleDarkMode() {\n    this.toggleDarkModeEvent.emit(this.isDarkModeOn);\n  }\n\n  goToLinkInNewTab(link: string) {\n    window.open(link, \"_blank\");\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dark-mode-toggle {\n  display: flex;\n  justify-content: center;\n}",
                    "styleUrl": "./profile-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button mat-fab [disabled]=\"!loggedIn\"\n        color=\"accent\" [matMenuTriggerFor]=\"menu\" id=\"clash-bot-discord-username\">\n    <mat-icon>person</mat-icon>\n</button>\n<mat-menu #menu=\"matMenu\">\n    <div mat-menu-item disabled>\n        <mat-icon>discord</mat-icon>\n        <span>{{ username }}</span>\n    </div>\n    <button mat-menu-item\n            (click)=\"goToSettings('/user-profile')\"\n            id=\"clash-bot-menu-user-profile-page\">\n        <span>Settings</span>\n    </button>\n    <button mat-menu-item (click)=\"logOut()\">Log Out</button>\n    <button mat-menu-item (click)=\"goToLinkInNewTab('https://forms.gle/Yb5mG55M189drWXV7')\">Report an Issue</button>\n    <button mat-menu-item>\n        <div class=\"dark-mode-toggle\">\n            <mat-icon *ngIf=\"isDarkModeOn; else elseBlock\">dark_mode</mat-icon>\n            <ng-template #elseBlock>\n                <mat-icon>light_mode</mat-icon>\n            </ng-template>\n            <mat-slide-toggle [checked]=\"isDarkModeOn\" (toggleChange)=\"toggleDarkMode()\">\n            </mat-slide-toggle>\n        </div>\n    </button>\n</mat-menu>\n"
        },
        {
            "name": "ReleaseNotificationDialogComponent",
            "id": "component-ReleaseNotificationDialogComponent-70d6663cb4b1f8c00f28121acb45aa7ae117ba5d05d3805eb77aebbc01fce474d86930b1ccc65e66fb79dd263dd85320b9d29b7a77232b1b8189c7ece55addac",
            "file": "src/app/dialogs/release-notification-dialog/release-notification-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-release-notification-dialog",
            "styleUrls": [
                "./release-notification-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./release-notification-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from \"@angular/core\";\n\n@Component({\n  selector: \"app-release-notification-dialog\",\n  templateUrl: \"./release-notification-dialog.component.html\",\n  styleUrls: [\"./release-notification-dialog.component.scss\"]\n})\nexport class ReleaseNotificationDialogComponent {\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-release-notification-header {\n  font-family: 'Kaushan Script', cursive;\n}",
                    "styleUrl": "./release-notification-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<h1 mat-dialog-title class=\"clash-bot-release-notification-header\">ClashBot - Release Notification</h1>\n<mat-dialog-content>\n    <div class=\"clash-bot-release-notification-list\">\n        <div class=\"clash-bot-release-notification-release\">\n            <markdown id=\"clash-bot-release-notification-markdown-container\" src=\"assets/ReleaseNotification.md\"></markdown>\n        </div>\n    </div>\n    <mat-dialog-actions align=\"end\">\n        <button mat-raised-button mat-dialog-close id=\"clash-bot-release-notification-button-dismiss\">Dismiss</button>\n    </mat-dialog-actions>\n</mat-dialog-content>"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-9e6bcb1f6655ec8d96156774edf94e6a37e35c5f958eb3a4cd370dac6b0a37164fd0907844b5ee8c00fa7bfb38e4eefc3dd875aa80bd3b0a52d30aa5b721a5cf",
            "file": "src/app/shared/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "showSpinner",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from \"@angular/core\";\n\n@Component({\n  selector: \"app-spinner\",\n  templateUrl: \"./spinner.component.html\",\n  styleUrls: [\"./spinner.component.scss\"]\n})\nexport class SpinnerComponent {\n\n  @Input()\n  showSpinner: boolean = false;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".progress-spinner {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.loading-text {\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n}\n\n.loading-animation {\n  display: flex;\n}\n\n.animated-dot-one {\n  animation-duration: 3s;\n  animation-name: slidein;\n  animation-delay: 0.5s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n.animated-dot-two {\n  animation-duration: 3s;\n  animation-name: slidein;\n  animation-delay: 0.75s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n.animated-dot-three {\n  animation-duration: 3s;\n  animation-name: slidein;\n  animation-delay: 1s;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n}\n\n@keyframes slidein {\n  from {\n    margin-left:40%;\n  }\n}",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div class=\"progress-spinner\">\n    <mat-progress-spinner\n            class=\"example-margin\"\n            color=\"primary\"\n            mode=\"indeterminate\"\n            aria-label=\"Loading Team Data...\">\n    </mat-progress-spinner>\n    <div class=\"loading-text\">\n        <h2>Loading your requested data</h2>\n        <div class=\"loading-animation\">\n            <h2 class=\"animated-dot-one\">.</h2>\n            <h2 class=\"animated-dot-two\">.</h2>\n            <h2 class=\"animated-dot-three\">.</h2>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "TeamCardComponent",
            "id": "component-TeamCardComponent-6146d8bb72368a0d836ca34beb9c158a7155931d3f51b0a9f9f8df40d9204359391b9e95e8395650f2424e86319b202774f3c515c6a2d96d56b60c2ab77a336c",
            "file": "src/app/pages/teams-dashboard/component/team-card/team-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-card",
            "styleUrls": [
                "./team-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "team",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TeamUiWrapper",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "registerUser",
                    "defaultValue": "new EventEmitter<ClashBotUserRegister>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<ClashBotUserRegister>"
                },
                {
                    "name": "unregisterUser",
                    "defaultValue": "new EventEmitter<ClashTeam>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<ClashTeam>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "pokemonName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerToTeam",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from \"@angular/core\";\nimport {ClashTeam} from \"../../../../interfaces/clash-team\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ConfirmationDialogComponent} from \"../../../../dialogs/confirmation-dialog/confirmation-dialog.component\";\nimport {ClashBotUserRegister} from \"../../../../interfaces/clash-bot-user-register\";\nimport {TeamUiWrapper} from \"src/app/interfaces/team-ui-wrapper\";\n\n@Component({\n  selector: \"app-team-card\",\n  templateUrl: \"./team-card.component.html\",\n  styleUrls: [\"./team-card.component.scss\"]\n})\nexport class TeamCardComponent implements OnInit {\n\n  @Input()\n  team: TeamUiWrapper = {};\n\n  @Output()\n  registerUser: EventEmitter<ClashBotUserRegister> = new EventEmitter<ClashBotUserRegister>();\n\n  @Output()\n  unregisterUser: EventEmitter<ClashTeam> = new EventEmitter<ClashTeam>();\n\n  pokemonName: string = \"\";\n\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit(): void {\n    if (this.team\n        && !this.team.tournament) {\n      this.team.tournament = {\n        tournamentName: \"Placeholder\",\n        tournamentDay: \"1\"\n      };\n    }\n    if (this.team && this.team.name) {\n      this.pokemonName = this.team.name;\n    }\n  }\n\n  registerToTeam(role?: string) {\n    let dialogRef = this.dialog.open(ConfirmationDialogComponent,\n      {data: {message: `Are you sure you want to register to this Team as ${role}?`}});\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        const clashBotUserRegister: ClashBotUserRegister = {\n          role: role,\n          teamName: this.team.name,\n          server: this.team.server,\n          tournamentDetails: {\n            tournamentName: this.team.tournament?.tournamentName,\n            tournamentDay: this.team.tournament?.tournamentDay,\n          }\n        };\n        this.registerUser.emit(clashBotUserRegister);\n      }\n    })\n  }\n\n  unregisterFromTeam() {\n    let dialogRef = this.dialog.open(ConfirmationDialogComponent,\n      {data: {message: \"Are you sure you want to unregister from this Team?\"}});\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.unregisterUser.emit(this.team);\n      }\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (max-width: 500px) {\n  .clash-bot-team-card {\n    max-width: 250px;\n  }\n}\n\n@media only screen and (min-width: 501px) {\n  .clash-bot-team-card {\n    max-width: 400px;\n  }\n}\n\n.clash-bot-button-container {\n  display: flex;\n  justify-content: flex-end;\n}\n\n.player-champion-list-container {\n  margin-left: 1em;\n}\n\n.clash-bot-player-details-container {\n  display: flex;\n  justify-content: space-between;\n}\n\n.clash-bot-role-button {\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./team-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card id=\"clash-bot-team-card\" class=\"clash-bot-team-card\">\n    <div *ngIf=\"!team.error; else elseBlock\">\n        <mat-card-header>\n            <img mat-card-avatar\n                 [src]=\"'https://img.pokemondb.net/sprites/black-white/anim/normal/' + pokemonName + '.gif'\"\n            appImageFallback/>\n            <mat-card-title [id]=\"'clash-bot-team-card-' + team.id + '-title'\">{{team.name | titlecase}}</mat-card-title>\n            <mat-card-subtitle [id]=\"'clash-bot-team-card-' + team.id + '-subtitle-tournament'\"\n                               *ngIf=\"team.tournament\">{{ team.tournament.tournamentName | tournamentNameTransformer }} -\n                Day {{team.tournament.tournamentDay}}</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content [id]=\"'clash-bot-team-card-' + team.id + '-players'\">\n              <app-team-card-player-details *ngIf=\"team.teamDetails\"\n                                            [player]=\"team.teamDetails[0]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.teamDetails\"\n                                            [player]=\"team.teamDetails[1]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.teamDetails\"\n                                            [player]=\"team.teamDetails[2]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.teamDetails\"\n                                            [player]=\"team.teamDetails[3]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n              <app-team-card-player-details *ngIf=\"team.teamDetails\"\n                                            [player]=\"team.teamDetails[4]\"\n              (registerUserForRole)=\"registerToTeam($event)\"\n              (unregisterUserForRole)=\"unregisterFromTeam()\"></app-team-card-player-details>\n        </mat-card-content>\n    </div>\n    <ng-template #elseBlock>\n        <mat-card-content id=\"clash-bot-team-card-no-data\">\n            <h2>No Data :(</h2>\n        </mat-card-content>\n    </ng-template>\n</mat-card>\n"
        },
        {
            "name": "TeamCardPlayerDetailsComponent",
            "id": "component-TeamCardPlayerDetailsComponent-72f3f827ba20200cdf63768f16076cb1b060f44d2ee990cb0af79a80870d12a1ecf3c5c0b2ba3034bac3a4fc166c0f343cfd5d325c55abaed2c6edd5a617e5a9",
            "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team-card-player-details",
            "styleUrls": [
                "./team-card-player-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team-card-player-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "event",
                    "defaultValue": "new Observable<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Observable<boolean>",
                    "decorators": []
                },
                {
                    "name": "player",
                    "defaultValue": "{name: \"Hello\", id: \"1\", role: \"Top\", champions: [], isUser: false}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "PlayerUiWrapper",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "registerUserForRole",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "unregisterUserForRole",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "apiVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showPlayerDetails",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerToTeam",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output\n} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {PlayerUiWrapper} from \"src/app/interfaces/team-ui-wrapper\";\n\n@Component({\n    selector: \"app-team-card-player-details\",\n    templateUrl: \"./team-card-player-details.component.html\",\n    styleUrls: [\"./team-card-player-details.component.scss\"]\n})\nexport class TeamCardPlayerDetailsComponent implements OnInit {\n\n    @Input()\n    player: PlayerUiWrapper = {name: \"Hello\", id: \"1\", role: \"Top\", champions: [], isUser: false};\n\n    @Input()\n    event: Observable<boolean> = new Observable<boolean>();\n\n    @Output()\n    registerUserForRole: EventEmitter<string> = new EventEmitter<string>();\n\n    @Output()\n    unregisterUserForRole: EventEmitter<void> = new EventEmitter<void>();\n\n    showPlayerDetails: boolean = false;\n    apiVersion?: string;\n\n    constructor() {}\n\n    ngOnInit() {\n        if (!this.player.role) {\n            this.player.role = \"Top\";\n        }\n        const lsApiVersion = window.localStorage.getItem(\"leagueApiVersion\");\n        if (lsApiVersion && !this.apiVersion) {\n            this.apiVersion = lsApiVersion;\n        }\n        if (!this.player.champions) {\n            this.player.champions=[];\n        }\n    }\n\n    registerToTeam(role: string) {\n        this.registerUserForRole.emit(role);\n    }\n\n    unregisterFromTeam() {\n        this.unregisterUserForRole.emit();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'sass:map';\n@use 'node_modules/@angular/material/index' as mat;\n\n.clash-bot-player-details-container {\n  width: 100%;\n}\n\n.clash-bot-role-button {\n  display: flex;\n  align-items: center;\n}\n\n.player-details-player-container {\n  display: flex;\n}\n\n.player-detail-accordion-container {\n  flex-grow: 2;\n}\n\n.player-role-player-details-inner-container {\n  width: 100%;\n}\n\n.player-role-join-container {\n  width: 100%;\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: center;\n}\n\n.player-details-player-inner-container {\n  transition: opacity 200ms 0s;\n  opacity: 100;\n}\n\n.player-detail-accordion-container .mat-expansion-panel-header-title,\n.player-detail-accordion-container .mat-expansion-panel-header-description {\n  flex-basis: 0;\n}\n\n.player-detail-accordion-container .mat-expansion-panel-header-title {\n  align-items: center;\n}\n\n.player-detail-accordion-container .mat-expansion-panel-header-description {\n  justify-content: space-between;\n  align-items: center;\n}\n\n.player-role-join-text {\n  margin-top: 16px;\n}\n\n.player-role-join-btn {\n  border-radius: 11px;\n  box-shadow: 1px 1px 1px 1px black;\n  transition: width 200ms cubic-bezier(0.35, 0, 0.25, 1), background-color 300ms cubic-bezier(0.35, 0, 0.25, 1), opacity 200ms 0s;\n  opacity: 100;\n  width: 100%;\n}\n\n.player-role-join-btn:hover {\n  width: 90%;\n}\n\n.player-join-button-inner-container {\n  padding: 1em 2em 1em 2em;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  font-weight: bold;\n  font-size: large;\n}\n\n.disappear {\n  opacity: 0;\n}\n\n.appear {\n  opacity: 100;\n}\n\n.player-role-text--update {\n  opacity: 0;\n}\n\n.champion-container {\n  display: flex;\n  gap: 10px;\n  padding-bottom: 0.5em;\n}\n\n.champion-container:last-child {\n  padding-bottom: 0;\n}\n\n.champion-img {\n  width: 50px;\n  height: auto;\n}\n\n.champion-img:nth-child {\n\n}\n\n.champion-name {\n  font-style: italic;\n}\n\n",
                    "styleUrl": "./team-card-player-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"clash-bot-player-details-container\">\n    <div class=\"player-role-player-details-inner-container\">\n        <ng-container *ngIf=\"!player.name || player.name === ''; else elseBlock\">\n            <div class=\"player-role-join-container\">\n                <button mat-raised-button\n                        class=\"player-role-join-btn\"\n                        id=\"clash-bot-team-card-join-{{player.role ?? '' | kebabcase}}-register-button\"\n                        (click)=\"registerToTeam(player.role ?? '')\">\n                    <div class=\"player-join-button-inner-container\">\n                        {{player.role}}\n                        <mat-icon svgIcon=\"league-{{player.role | lowercase}}\"></mat-icon>\n                    </div>\n                </button>\n            </div>\n        </ng-container>\n        <ng-template #elseBlock>\n            <div class=\"player-details-player-container\">\n                <div *ngIf=\"player.isUser\" class=\"clash-bot-role-button\">\n                    <div class=\"clash-bot-button-container\">\n                        <button mat-icon-button\n                                color=\"warn\"\n                                id=\"clash-bot-team-card-{{player.role  ?? ''| kebabcase}}-unregister-button\"\n                                (click)=\"unregisterFromTeam()\"\n                                aria-label=\"Unregister with this Team\">\n                            <mat-icon>remove</mat-icon>\n                        </button>\n                    </div>\n                </div>\n                <mat-accordion class=\"player-detail-accordion-container\">\n                    <mat-expansion-panel id=\"clash-bot-team-card-registered-player\"\n                                         class=\"player-details-player-inner-container\">\n                        <mat-expansion-panel-header\n                                id=\"clash-bot-team-card-registered-player-{{player.role  ?? ''| kebabcase}}\">\n                            <mat-panel-title>{{player.name}}</mat-panel-title>\n                            <mat-panel-description>{{player.role}}\n                                <mat-icon svgIcon=\"league-{{player.role | lowercase}}\"></mat-icon>\n                            </mat-panel-description>\n                        </mat-expansion-panel-header>\n                        <div id=\"clash-bott-team-card-registered-player-{{player.role  ?? ''| kebabcase}}-champion-list\"\n                             class=\"player-champion-list-container\">\n                            <h4>Preferred Champions</h4>\n                            <ng-container *ngIf=\"player.champions && player.champions.length > 0\">\n                                <div class=\"champion-container\" *ngFor=\"let champion of player.champions\">\n                                    <img class=\"champion-img\"\n                                         src='https://ddragon.leagueoflegends.com/cdn/{{apiVersion}}/img/champion/{{champion}}.png'/>\n                                    <p class=\"champion-name\">{{champion}}</p>\n                                </div>\n                            </ng-container>\n                            <p *ngIf=\"player.champions && player.champions.length === 0\">None set</p>\n                        </div>\n                    </mat-expansion-panel>\n                </mat-accordion>\n            </div>\n        </ng-template>\n    </div>\n</div>\n"
        },
        {
            "name": "TeamsDashboardComponent",
            "id": "component-TeamsDashboardComponent-3eec373d97aa6c1c31267a48e0f0866a6285bae590434d00e884429b570bb09825f2d8c7105e34349d204ab7c1a0fb4f343485ea338bf2f6525d9c3a45a63a1f",
            "file": "src/app/pages/teams-dashboard/teams-dashboard/teams-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams-dashboard",
            "styleUrls": [
                "./teams-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$callObs",
                    "defaultValue": "new BehaviorSubject<TeamFilter[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TeamFilter[]>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "$destroyComponent",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "$destroyWsConnection",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "$teamsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "$updateList",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "canCreateNewTeam",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "currentApplicationDetails",
                    "defaultValue": "{loginStatus: LoginStatus.NOT_LOGGED_IN, loggedIn: false}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationDetails",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "currentSelectedGuild",
                    "defaultValue": "{\n      features: [],\n      icon: \"\",\n      id: \"\",\n      name: \"\",\n      owner: false,\n      permissions: 0,\n      permissions_new: \"\"\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "defaultServer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "eligibleTournaments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "MAX_TIMEOUT",
                    "defaultValue": "4000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "noDataAvailable",
                    "defaultValue": "{error: \"No data\"}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "{Top: 0, Mid: 1, Jg: 2, Bot: 3, Supp: 4}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "showInnerSpinner",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "showSpinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "subs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "teamFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "teams",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TeamUiWrapper[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "tentativeDataStatus",
                    "defaultValue": "\"NOT_LOADED\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "tentativeList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TentativeRecord[]",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "websocketSub",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewTeam",
                    "args": [
                        {
                            "name": "createNewTeamEvent",
                            "type": "CreateNewTeamDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 543,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createNewTeamEvent",
                            "type": "CreateNewTeamDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUserToTournamentMap",
                    "args": [
                        {
                            "name": "currentUserId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clashTournaments",
                            "type": "Tournament[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clashTeams",
                            "type": "Team[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 526,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentUserId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clashTournaments",
                            "type": "Tournament[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clashTeams",
                            "type": "Team[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterForTeamsByServer",
                    "args": [
                        {
                            "name": "valueToSearchFor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "valueToSearchFor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTeam",
                    "args": [
                        {
                            "name": "guild",
                            "type": "DiscordGuild",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "guild",
                            "type": "DiscordGuild",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getKeyByValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Role",
                    "typeParameters": [],
                    "line": 633,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleIncomingTeamsWsEvent",
                    "args": [
                        {
                            "name": "clashBotTeamEvent",
                            "type": "ClashBotTeamEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clashBotTeamEvent",
                            "type": "ClashBotTeamEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapTeamToTeamUiWrapper",
                    "args": [
                        {
                            "name": "record",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TeamUiWrapper",
                    "typeParameters": [],
                    "line": 415,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerForTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 460,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "repopulateEligibleTournaments",
                    "args": [
                        {
                            "name": "clashTeams",
                            "type": "Team[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clashTeams",
                            "type": "Team[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortFilters",
                    "args": [
                        {
                            "name": "items",
                            "type": "TeamFilter[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TeamFilter[]",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort filter values first by state,\nthen by number of Teams in descending order,\nthen the name in ascending order.\n",
                    "description": "<p>Sort filter values first by state,\nthen by number of Teams in descending order,\nthen the name in ascending order.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7054,
                                "end": 7059,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "TeamFilter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7048,
                                "end": 7053,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "tentativeRegister",
                    "args": [
                        {
                            "name": "tentativeUserDetails",
                            "type": "TentativeRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 581,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tentativeUserDetails",
                            "type": "TentativeRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "TeamUiWrapper",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 495,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "TeamUiWrapper",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTentativeList",
                    "args": [
                        {
                            "name": "guildName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "guildName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTentativeListBasedOnTeam",
                    "args": [
                        {
                            "name": "mappedTeam",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mappedTeam",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from \"@angular/core\";\nimport {TeamFilter} from \"../../../interfaces/team-filter\";\nimport {BehaviorSubject, forkJoin, Observable, of, Subject, Subscription, throwError} from \"rxjs\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {FilterType} from \"../../../interfaces/filter-type\";\nimport {\n    catchError,\n    delay,\n    finalize,\n    map,\n    retryWhen,\n    take,\n    takeUntil,\n    tap,\n    timeout\n} from \"rxjs/operators\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {ApplicationDetailsService} from \"../../../services/application-details.service\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {ClashBotUserRegister} from \"../../../interfaces/clash-bot-user-register\";\nimport {TeamsWebsocketService} from \"../../../services/teams-websocket.service\";\nimport {CreateNewTeamDetails} from \"../../../interfaces/create-new-team-details\";\nimport {ApplicationDetails} from \"../../../interfaces/application-details\";\nimport {PageLoadingService} from \"../../../services/page-loading.service\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\nimport {\n  CreateNewTeamRequest,\n  PlacePlayerOnTentativeRequest,\n  Role,\n  Team,\n  TeamService,\n  TentativeService,\n  UpdateTeamRequest\n} from \"clash-bot-service-api\";\nimport {TentativeRecord} from \"../../../interfaces/tentative-record\";\nimport {PlayerUiWrapper, TeamUiWrapper} from \"../../../interfaces/team-ui-wrapper\";\nimport {ClashBotTeamEvent, ClashBotTeamEventBehavior} from \"../../../interfaces/clash-bot-team-event\";\nimport {LoginStatus} from \"../../../login-status\";\nimport {DiscordGuild} from \"../../../interfaces/discord-guild\";\nimport {FREE_AGENT_GUILD} from \"../../../interfaces/clash-bot-constants\";\n\n@Component({\n    selector: \"app-teams-dashboard\",\n    templateUrl: \"./teams-dashboard.component.html\",\n    styleUrls: [\"./teams-dashboard.component.scss\"]\n})\nexport class TeamsDashboardComponent implements OnInit, OnDestroy {\n    currentSelectedGuild: DiscordGuild = {\n      features: [],\n      icon: \"\",\n      id: \"\",\n      name: \"\",\n      owner: false,\n      permissions: 0,\n      permissions_new: \"\"\n    };\n    roles: any = {Top: 0, Mid: 1, Jg: 2, Bot: 3, Supp: 4};\n    teams: TeamUiWrapper[] = [];\n    teamFilters: TeamFilter[] = [];\n    currentApplicationDetails: ApplicationDetails = {loginStatus: LoginStatus.NOT_LOGGED_IN, loggedIn: false};\n    private readonly MAX_TIMEOUT = 4000;\n    eligibleTournaments: Tournament[] = [];\n    tentativeList?: TentativeRecord[];\n    $teamsSub: Subscription | undefined;\n    $callObs: BehaviorSubject<TeamFilter[]> = new BehaviorSubject<TeamFilter[]>([]);\n    $updateList: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    tentativeDataStatus: string = \"NOT_LOADED\";\n    canCreateNewTeam: boolean = false;\n    defaultServer?: DiscordGuild;\n    showSpinner: boolean;\n    showInnerSpinner: boolean = false;\n    subs: Subscription[] = [];\n    websocketSub: Subscription | undefined = undefined;\n    $destroyWsConnection = new Subject();\n    $destroyComponent = new Subject();\n    private readonly noDataAvailable = {error: \"No data\"};\n\n    constructor(private _snackBar: MatSnackBar,\n                private applicationDetailsService: ApplicationDetailsService,\n                private dialog: MatDialog,\n                private teamsWebsocketService: TeamsWebsocketService,\n                private pageLoadingService: PageLoadingService,\n                private tentativeService: TentativeService,\n                private teamsService: TeamService) {\n        this.showSpinner = false;\n    }\n\n    ngOnInit(): void {\n        this.subs.push(this.applicationDetailsService.getApplicationDetails()\n            .subscribe((details) => this.currentApplicationDetails = details));\n        this.applicationDetailsService.getApplicationDetails()\n            .pipe(take(1))\n            .subscribe((appDetails) => {\n                if (appDetails.userGuilds) {\n                    const calls: Observable<TeamFilter>[] = [];\n                    appDetails.userGuilds.forEach((details) => {\n                        calls.push(this.teamsService.getTeam(details.id)\n                            .pipe(\n                                take(1),\n                                catchError((err: HttpErrorResponse) => {\n                                    this._snackBar.open(`Oops! We were unable to retrieve the Team details for Server '${details.name}'!`,\n                                        \"X\",\n                                        {duration: 5 * 1000}\n                                    );\n                                    return of(err);\n                                }),\n                                map((response) => {\n                                    let numberOfTeams = 0;\n                                    if (!(response instanceof HttpErrorResponse)) {\n                                        numberOfTeams = response.length;\n                                    }\n                                    return {\n                                        value: details,\n                                        type: FilterType.SERVER,\n                                        state: details.name === appDetails.defaultGuild?.name,\n                                        id: details.name.replace(new RegExp(/ /, \"g\"), \"-\").toLowerCase(),\n                                        numberOfTeams,\n                                    }\n                                })));\n                    });\n                    forkJoin(calls)\n                        .pipe(\n                            take(1)\n                        )\n                        .subscribe((items) => {\n                            this.$callObs.next(items);\n                            this.$updateList.next(true);\n                        });\n                    this.$updateList\n                        .pipe(\n                            map(() => this.$callObs.value.map((item) => {\n                                return {\n                                    ...item,\n                                    state: item.value.name === this.currentSelectedGuild.name\n                                }\n                            })),\n                            map((items) => this.sortFilters(items)),\n                            takeUntil(this.$destroyComponent)\n                        )\n                        .subscribe((sortedItems) => this.$callObs.next(sortedItems));\n                    if (appDetails.defaultGuild) {\n                        this.defaultServer = appDetails.defaultGuild;\n                        this.currentSelectedGuild = appDetails.defaultGuild;\n                        this.filterForTeamsByServer(appDetails.defaultGuild.id);\n                    }\n                    setTimeout(() => this.pageLoadingService.updateSubject(false), 300);\n                }\n            });\n    }\n\n    /**\n     * Sort filter values first by state,\n     * then by number of Teams in descending order,\n     * then the name in ascending order.\n     * @param items\n     */\n    sortFilters(items: TeamFilter[]): TeamFilter[] {\n        return items.sort((a, b) => {\n            if (a.value.id === FREE_AGENT_GUILD.id) {\n                return -1;\n            } else if (b.value.id === FREE_AGENT_GUILD.id) {\n                return 1;\n            } else if (a.state) {\n                return -1;\n            } else if (b.state) {\n                return 1;\n            } else if (b.numberOfTeams - a.numberOfTeams !== 0) {\n                return b.numberOfTeams - a.numberOfTeams\n            } else {\n                return a.value.name.localeCompare(b.value.name);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.subs.forEach(subscriptions => subscriptions.unsubscribe());\n        this.websocketSub?.unsubscribe();\n        this.$destroyWsConnection.unsubscribe();\n    }\n\n    updateTentativeList(guildName: string) {\n        if (this.currentApplicationDetails.loggedIn) {\n            this.tentativeDataStatus = \"LOADING\";\n\n            this.tentativeService.getTentativeDetails(guildName)\n                .pipe(take(1),\n                    timeout(this.MAX_TIMEOUT),\n                    catchError((err: HttpErrorResponse) => {\n                        this._snackBar.open(\"Oops! We were unable to retrieve the Tentative details list for the server! Please try again later.\",\n                            \"X\",\n                            {duration: 5 * 1000}\n                        );\n                        this.tentativeDataStatus = \"FAILED\";\n                        return throwError(err);\n                    }),\n                    map(response => {\n                        return response.slice(0, 4)\n                    }),\n                    map(response => {\n                        return response.map((tentative) => {\n                            const tentativeRecord: TentativeRecord = tentative as TentativeRecord;\n                            tentativeRecord.playerNames = tentative\n                                .tentativePlayers?.map((player) => player.name ?? \"\") ?? []\n                            if (tentative.tentativePlayers) {\n                                tentativeRecord.isMember = tentative\n                                    .tentativePlayers\n                                    .some((record) => record\n                                        .id === this\n                                        .currentApplicationDetails.userDetails?.id ?? \"\")\n                            } else {\n                                tentativeRecord.isMember = false;\n                            }\n                            return tentativeRecord;\n                        });\n                    })\n                )\n                .subscribe((mappedResponse) => {\n                    this.tentativeList = mappedResponse;\n                    this.tentativeDataStatus = \"SUCCESSFUL\";\n                });\n        } else {\n            this._snackBar.open(\"Oops! You are not logged in, please navigate to the Welcome page and login.\",\n                \"X\",\n                {duration: 5 * 1000});\n\n        }\n    }\n\n    filterTeam(guild: DiscordGuild) {\n        this.applicationDetailsService.getApplicationDetails()\n            .pipe(take(1))\n            .subscribe((appDetails) => {\n            const foundGuild = appDetails.userGuilds?.get(guild.id);\n            if (foundGuild) this.currentSelectedGuild = foundGuild;\n            this.$updateList.next(true);\n            this.showInnerSpinner = true;\n            if (this.$teamsSub) {\n                this.$teamsSub.unsubscribe();\n            }\n            this.teams = [];\n            this.filterForTeamsByServer(guild.id);\n        });\n    }\n\n    private filterForTeamsByServer(valueToSearchFor: string) {\n        if (!this.currentApplicationDetails.loggedIn) {\n            this._snackBar.open(\n                \"Oops! You are not logged in, \" +\n                \"please navigate to the Welcome page and login.\",\n                \"X\",\n                {duration: 5 * 1000});\n            this.teams = [this.noDataAvailable];\n        } else {\n            this.$destroyWsConnection.next();\n            this.updateTentativeList(valueToSearchFor);\n            this.showInnerSpinner = true;\n            this.teamsService\n                .getTeam(valueToSearchFor)\n                .pipe(\n                    map((records) => records.map((team) => this.mapTeamToTeamUiWrapper(team))),\n                    take(1),\n                    timeout(7000),\n                    catchError((err: HttpErrorResponse) => {\n                        return throwError(err);\n                    }),\n                    finalize(() => this.showInnerSpinner = false)\n                ).subscribe(response => {\n                    if (this.currentApplicationDetails.loggedIn) {\n                        this.teams = response;\n                        this.repopulateEligibleTournaments(response);\n                    }\n                }, () => {\n                    this.teams = [{error: \"Failed to make call.\"}];\n                    this._snackBar.open(\"Failed to retrieve Teams. \" +\n                        \"Please try again later.\",\n                        \"X\",\n                        {duration: 5 * 1000});\n                }\n            );\n            this.teamsWebsocketService.connect(this.currentSelectedGuild.id)\n                .pipe(\n                  retryWhen(errors => {\n                  return errors.pipe(tap(value => console.error(value)),\n                      delay(1000))\n                  }),\n                  map((event) => {\n                    let mappedEvent;\n                    let behavior: ClashBotTeamEventBehavior = ClashBotTeamEventBehavior.REMOVED;\n                    let foundTeam = this.teams.find((team) =>\n                      team.name === event.name\n                      && team.tournament?.tournamentName === event.tournament?.tournamentName\n                      && team.tournament?.tournamentDay === event.tournament?.tournamentDay)\n                    if (event.playerDetails) {\n                      behavior = ClashBotTeamEventBehavior.UPDATED;\n                      mappedEvent = this.mapTeamToTeamUiWrapper(event);\n                      if (!foundTeam && event.playerDetails) {\n                        behavior = ClashBotTeamEventBehavior.ADDED;\n                      }\n                    }\n                    const clashBotTeamEvent: ClashBotTeamEvent = {\n                      event: event,\n                      behavior: behavior,\n                      mappedEvent: mappedEvent,\n                      originalTeam: foundTeam\n                    };\n                    return clashBotTeamEvent;\n                  }),\n                  takeUntil(this.$destroyWsConnection),\n                )\n                .subscribe((msg) => {\n                        if (this.currentApplicationDetails.loggedIn) {\n                            this.handleIncomingTeamsWsEvent(msg);\n                        }\n                    },\n                    () => {\n                        this._snackBar.open(\n                            \"Oops! Failed to connect to server for Team updates, please try refreshing.\",\n                            \"X\",\n                            {duration: 5 * 1000});\n                        this.teams = [this.noDataAvailable];\n                    });\n        }\n    }\n\n    handleIncomingTeamsWsEvent(clashBotTeamEvent: ClashBotTeamEvent) {\n        switch (clashBotTeamEvent.behavior) {\n          case ClashBotTeamEventBehavior.UPDATED:\n            this.updateTentativeListBasedOnTeam(clashBotTeamEvent.mappedEvent ?? {});\n            this.teams.forEach(team => {\n                if (team.id === clashBotTeamEvent.mappedEvent?.id) {\n                    Object.assign(team, {...clashBotTeamEvent.mappedEvent});\n                }\n            });\n            break;\n          case ClashBotTeamEventBehavior.ADDED:\n            this.updateTentativeListBasedOnTeam(clashBotTeamEvent.mappedEvent ?? {});\n            if (this.teams.length === 1\n              && this.teams.find(team => team.error)) {\n              this.teams = [clashBotTeamEvent.mappedEvent ?? {}];\n            } else {\n              this.teams.push(clashBotTeamEvent.mappedEvent ?? {});\n            }\n            break;\n          case ClashBotTeamEventBehavior.REMOVED:\n            this.teams = this.teams\n              .filter((team) => team.name !== clashBotTeamEvent.event.name);\n            break;\n          default:\n            this._snackBar.open(\n              \"Unknown Team event occurred. Please report an issue to the Issues Form.\",\n              \"X\",\n              {duration: 5 * 1000}\n            );\n        }\n        this.repopulateEligibleTournaments(this.teams);\n    }\n\n    updateTentativeListBasedOnTeam(mappedTeam: Team) {\n        let playerNames: string[] = [];\n        if (mappedTeam.playerDetails) {\n            playerNames = Object\n                .entries(mappedTeam.playerDetails)\n                .map((entry) => entry[1].id);\n        }\n        if (this.tentativeList && playerNames.length > 0) {\n            for (let i = 0; i < this.tentativeList?.length; i++) {\n                if (this.tentativeList[i].tournamentDetails?.tournamentName === mappedTeam.tournament?.tournamentName\n                    && this.tentativeList[i].tournamentDetails?.tournamentDay === mappedTeam.tournament?.tournamentDay) {\n                    let updatedTentative = this.tentativeList[i]\n                        .tentativePlayers?.filter((player) => {\n                            if (player.name) {\n                                return !playerNames.includes(player.name);\n                            } else {\n                                return true;\n                            }\n                        });\n                    if (updatedTentative !== this.tentativeList[i].tentativePlayers\n                        && this.tentativeList[i].isMember) {\n                        this.tentativeList[i].isMember = false;\n                    }\n                    this.tentativeList[i].tentativePlayers = updatedTentative;\n                }\n            }\n        }\n    }\n\n    repopulateEligibleTournaments(clashTeams: Team[]) {\n        const currentTournaments = this.currentApplicationDetails\n            .currentTournaments ?? [];\n        if (clashTeams.length < 1) {\n            this.teams = [this.noDataAvailable];\n            this.eligibleTournaments = currentTournaments;\n            this.canCreateNewTeam = this\n                .eligibleTournaments && this\n                .eligibleTournaments.length != 0;\n        } else {\n            let map = this.createUserToTournamentMap(\n                this.currentApplicationDetails.userDetails?.id ?? 0,\n                currentTournaments,\n                this.teams\n            );\n            let newEligibleTournaments: Tournament[] = [];\n            map.forEach((value, key) => {\n                if (!value\n                    || Object.keys(value.playerDetails).length != 1) {\n                    newEligibleTournaments.push(key);\n                }\n            });\n            this.eligibleTournaments = newEligibleTournaments;\n            this.canCreateNewTeam = this.eligibleTournaments\n                && this.eligibleTournaments.length != 0;\n        }\n    }\n\n    mapTeamToTeamUiWrapper(record: Team): TeamUiWrapper {\n        let teamUiWrapper: TeamUiWrapper = record as TeamUiWrapper;\n        teamUiWrapper.id = `${record.serverId}-${record.name}`\n            .replace(new RegExp(/ /, \"g\"), \"-\")\n            .toLowerCase();\n        teamUiWrapper.server = this.currentApplicationDetails\n            .userGuilds?.get(record.serverId ?? \"0\");\n        let rolesMissing: string[] = [...Object.keys(this.roles)];\n        if (record.playerDetails) {\n            teamUiWrapper.teamDetails = Object.entries(record.playerDetails)\n                .map((record) => {\n                    let playerUiWrapper: PlayerUiWrapper = record[1] as PlayerUiWrapper;\n                    playerUiWrapper\n                        .isUser = record[1].id === this\n                        .currentApplicationDetails.userDetails?.id;\n                    playerUiWrapper.role = this.getKeyByValue(record[0]);\n                    rolesMissing = rolesMissing\n                        .filter(role => role !== record[0]);\n                    return playerUiWrapper;\n                });\n        }\n        if (!record.playerDetails\n            || Object.keys(record.playerDetails).length === 0) {\n            teamUiWrapper.teamDetails = [];\n        }\n        for (let role in rolesMissing) {\n            teamUiWrapper\n                .teamDetails?.push({\n                id: \"0\",\n                isUser: false,\n                role: this.getKeyByValue(rolesMissing[role])\n            });\n        }\n        teamUiWrapper.teamDetails?.sort((a: PlayerUiWrapper, b: PlayerUiWrapper) => {\n            if (a.role && b.role) {\n                return this.roles[a.role] - this.roles[b.role]\n                    || a.role.localeCompare(b.role);\n            } else if (a.role) {\n                return 1;\n            }\n            return -1;\n        })\n        return teamUiWrapper;\n    }\n\n    registerForTeam($event: ClashBotUserRegister) {\n        if (this.currentApplicationDetails.loggedIn &&\n            this.currentApplicationDetails.userDetails) {\n            let updateTeamRequest: UpdateTeamRequest = {\n                playerId: `${this.currentApplicationDetails.userDetails.id}`,\n                role: this.getKeyByValue($event.role),\n                serverId: $event.server?.id ?? \"\",\n                teamName: $event.teamName ?? \"\",\n                tournamentDetails: $event.tournamentDetails ?? {}\n            };\n            this.teamsService.updateTeam(updateTeamRequest)\n                .pipe(\n                    timeout(7000),\n                    catchError((err) => {\n                        let errorMessage = \"Oops! Failed to register you to the Team, missing required details.\";\n                        if (err.name === \"TimeoutError\") {\n                            errorMessage = \"Oops! Your registration timed out, please try again!\";\n                        }\n                        return throwError(errorMessage);\n                    }),\n                    take(1)\n                ).subscribe(() => {\n                },\n                (err) => {\n                    this._snackBar.open(err,\n                        \"X\",\n                        {duration: 5 * 1000});\n                });\n        } else {\n            this._snackBar.open(\"Oops! You are not logged in, please navigate to the Welcome page and login.\",\n                \"X\",\n                {duration: 5 * 1000});\n        }\n    }\n\n    unregisterFromTeam($event: TeamUiWrapper) {\n        if (this.currentApplicationDetails.loggedIn &&\n            this.currentApplicationDetails.userDetails) {\n            this.teamsService.removePlayerFromTeam(\n                $event.name ?? \"\",\n                $event.serverId ?? \"\",\n                $event.tournament?.tournamentName ?? \"\",\n                $event.tournament?.tournamentDay ?? \"\",\n                `${this.currentApplicationDetails.userDetails.id}`)\n                .pipe(\n                    timeout(7000),\n                    take(1),\n                    catchError((err) => {\n                        let errorMessage = \"Oops! Failed to unregister you from the Team.\";\n                        if (err.name === \"TimeoutError\") {\n                            errorMessage = \"Oops! Your request timed out, please try again!\";\n                        }\n                        this._snackBar.open(errorMessage,\n                            \"X\",\n                            {duration: 5 * 1000});\n                        return throwError(err);\n                    })\n                ).subscribe(() => {\n            });\n        } else {\n            this._snackBar.open(\"Oops! You are not logged in, please navigate to the Welcome page and login.\",\n                \"X\",\n                {duration: 5 * 1000});\n        }\n    }\n\n    createUserToTournamentMap(currentUserId: number, clashTournaments: Tournament[], clashTeams: Team[]) {\n        let tournamentToTeamUserMap = new Map<Tournament, any>();\n        clashTournaments.forEach((tournament) =>\n            tournamentToTeamUserMap.set(tournament, clashTeams.find(team => {\n                let reducedMap;\n                if (team.playerDetails) {\n                    reducedMap = new Set(Object.entries(team.playerDetails).map(object => object[1].id));\n                }\n                return team.tournament\n                    && team.tournament.tournamentName === tournament.tournamentName\n                    && team.tournament.tournamentDay === tournament.tournamentDay\n                    && reducedMap\n                    && reducedMap.has(`${currentUserId}`);\n            })));\n        return tournamentToTeamUserMap;\n    }\n\n    createNewTeam(createNewTeamEvent: CreateNewTeamDetails) {\n        if (this.currentApplicationDetails.loggedIn &&\n            this.currentApplicationDetails.userDetails) {\n            const createNewTeamRequest: CreateNewTeamRequest = {\n                serverId: this.currentSelectedGuild.id,\n                tournamentName: createNewTeamEvent.tournamentName,\n                tournamentDay: createNewTeamEvent.tournamentDay,\n                playerDetails: {\n                    id: `${this.currentApplicationDetails.userDetails.id}`,\n                    role: this.getKeyByValue(createNewTeamEvent.role)\n                }\n            };\n            this.teamsService.createNewTeam(createNewTeamRequest)\n                .pipe(\n                    timeout(7000),\n                    catchError((err) => {\n                        let message = \"Oops! An error occurred while creating a new team.\";\n                        if (err.name === \"TimeoutError\") {\n                            message = \"Oops! Your request to create a new Team has timed out. Please try again.\"\n                        }\n                        return throwError(message);\n                    }),\n                    take(1),\n                ).subscribe(() => {\n                },\n                (err) => {\n                    this._snackBar.open(err,\n                        \"X\",\n                        {duration: 5 * 1000});\n                });\n        } else {\n            this._snackBar.open(\"Oops! You are not logged in, please navigate to the Welcome page and login.\",\n                \"X\",\n                {duration: 5 * 1000});\n            this.teams = [this.noDataAvailable];\n        }\n    }\n\n    tentativeRegister(tentativeUserDetails: TentativeRecord) {\n        if (this.currentApplicationDetails.loggedIn &&\n            this.currentApplicationDetails.userDetails) {\n            const payload: PlacePlayerOnTentativeRequest = {\n                playerId: `${this.currentApplicationDetails.userDetails.id}`,\n                serverId: this.currentSelectedGuild.id,\n                tournamentDetails: tentativeUserDetails.tournamentDetails ?? {}\n            };\n            let obs = this.tentativeService.placePlayerOnTentative(payload);\n            if (!tentativeUserDetails.toBeAdded) {\n                obs = this.tentativeService.removePlayerFromTentative(\n                    this.currentSelectedGuild.id,\n                    `${this.currentApplicationDetails.userDetails.id}`,\n                    tentativeUserDetails.tournamentDetails?.tournamentName ?? \"\",\n                    tentativeUserDetails.tournamentDetails?.tournamentDay ?? \"\"\n                );\n            }\n            obs\n                .pipe(take(1),\n                    map(response => {\n                        const tentativeRecord: TentativeRecord = {\n                            serverId: response.serverId,\n                            tournamentDetails: response.tournamentDetails,\n                            tentativePlayers: response.tentativePlayers,\n                            playerNames: response.tentativePlayers?.map((player) => player.name ?? \"\") ?? [],\n                            isMember: response.tentativePlayers?.some((player) => {\n                                return player.id === `${this.currentApplicationDetails.userDetails?.id}`\n                            }) ?? false\n                        };\n                        return tentativeRecord;\n                    }),\n                    timeout(7000),\n                    catchError(() => {\n                        return throwError(\"Oops, we were unable to update the tentative list. Please try again later!\");\n                    })\n                ).subscribe((response) => {\n                if (this.tentativeList && tentativeUserDetails.index !== undefined) {\n                    this.tentativeList[tentativeUserDetails.index] = response;\n                    this.tentativeList = [...this.tentativeList];\n                }\n            }, (err) => {\n                this._snackBar.open(err,\n                    \"X\",\n                    {duration: 5 * 1000});\n            });\n        } else {\n            this._snackBar.open(\"Oops! You are not logged in, please navigate to the Welcome page and login.\",\n                \"X\",\n                {duration: 5 * 1000});\n        }\n    }\n\n    getKeyByValue(value?: string): Role {\n        switch (value) {\n            case \"Top\":\n                return Role.Top;\n            case \"Bot\":\n                return Role.Bot;\n            case \"Mid\":\n                return Role.Mid;\n            case \"Supp\":\n                return Role.Supp;\n            case \"Jg\":\n                return Role.Jg;\n            default:\n                return Role.Jg;\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex-grow: 1;\n  display: flex;\n  border: 1em red;\n}\n\n.team-dashboard-container {\n  flex-grow: 1;\n  display: flex;\n  border: 1em green;\n}",
                    "styleUrl": "./teams-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamsWebsocketService",
                        "type": "TeamsWebsocketService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tentativeService",
                        "type": "TentativeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamsService",
                        "type": "TeamService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamsWebsocketService",
                        "type": "TeamsWebsocketService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tentativeService",
                        "type": "TentativeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamsService",
                        "type": "TeamService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"team-dashboard-container\">\n    <ng-container *ngIf=\"currentApplicationDetails.loggedIn; else notLoggedIn\">\n        <app-spinner *ngIf=\"showSpinner; else dataLoaded\"></app-spinner>\n        <ng-template #dataLoaded>\n            <app-teams-dashboard-view\n                    [selectedServer]=\"currentSelectedGuild\"\n                    [teams]=\"teams\"\n                    [eligibleTournaments]=\"eligibleTournaments\"\n                    [defaultServer]=\"defaultServer\"\n                    [tentativeList]=\"tentativeList\"\n                    [teamFilters]=\"($callObs | async)!\"\n                    [tentativeDataStatus]=\"tentativeDataStatus\"\n                    [showSpinner]=\"showInnerSpinner\"\n                    [canCreateNewTeam]=\"canCreateNewTeam\"\n                    (registerForTeamEvent)=\"registerForTeam($event)\"\n                    (unregisterFromTeamEvent)=\"unregisterFromTeam($event)\"\n                    (tentativeRegisterEvent)=\"tentativeRegister($event)\"\n                    (filterTeamEvent)=\"filterTeam($event)\"\n                    (createTeamEvent)=\"createNewTeam($event)\"\n            ></app-teams-dashboard-view>\n        </ng-template>\n    </ng-container>\n    <ng-template #notLoggedIn>\n        <div class=\"log-in-container\">\n            <h2>You are not logged in. Please navigate back home using the menu and use the login button.</h2>\n        </div>\n    </ng-template>\n</div>"
        },
        {
            "name": "TeamsDashboardHelpDialogComponent",
            "id": "component-TeamsDashboardHelpDialogComponent-cee6f6a69a2d34175b2ae0d8424c533f55d6147a6a59433c96370ef834b9fa9fbb2a7a5c5ea94dcfedcd838f04e4cceb677e79b6d7ac8091555d62b4206417c3",
            "file": "src/app/pages/teams-dashboard/component/teams-dashboard-help-dialog/teams-dashboard-help-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams-dashboard-help-dialog",
            "styleUrls": [
                "./teams-dashboard-help-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-dashboard-help-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from \"@angular/core\";\n\n@Component({\n  selector: \"app-teams-dashboard-help-dialog\",\n  templateUrl: \"./teams-dashboard-help-dialog.component.html\",\n  styleUrls: [\"./teams-dashboard-help-dialog.component.scss\"]\n})\nexport class TeamsDashboardHelpDialogComponent {\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-teams-dashboard-help-dialog-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 425px;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content-row {\n  display: flex;\n  flex-wrap: nowrap;\n  padding-top: 0.5em;\n  padding-bottom: 0.5em;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content-icon {\n  flex-basis: 8em;\n  display: flex;\n  justify-content: center;\n  align-self: center;\n}\n\n.clash-bot-teams-dashboard-help-dialog-content-description {\n  flex: 1;\n}\n\n.clash-bot-teams-dashboard-help-dialog-player-role-join-text {\n  margin-top: 16px;\n}\n\n.clash-bot-teams-dashboard-help-dialog-player-role-join-btn {\n  background-color: white;\n  border: gray solid 0.5px;\n  border-radius: 11px;\n  box-shadow: 1px 1px 1px 1px black;\n  transition: width 200ms cubic-bezier(0.35, 0, 0.25, 1);\n  width: 80%;\n}\n\n.clash-bot-teams-dashboard-help-dialog-player-role-join-btn:hover {\n  width: 70%;\n  background-color: rgb(240, 240, 240);\n}\n",
                    "styleUrl": "./teams-dashboard-help-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"clash-bot-teams-dashboard-help-dialog-container\">\n  <h1 mat-dialog-title>Teams Dashboard Help Menu! Help is here!</h1>\n  <mat-dialog-content>\n    <div class=\"clash-bot-teams-dashboard-help-dialog-content\">\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <button class=\"clash-bot-teams-dashboard-help-dialog-player-role-join-btn\">\n            <h2 class=\"clash-bot-teams-dashboard-help-dialog-player-role-join-text\">Top</h2>\n          </button>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p>To add yourself to a Team.</p>\n        </div>\n      </div>\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <button mat-icon-button color=\"primary\">\n            <mat-icon>remove</mat-icon>\n          </button>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p>To remove yourself from a Team.</p>\n        </div>\n      </div>\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <mat-chip>Goon Squad</mat-chip>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p>To filter Teams based on the selected Server.</p>\n        </div>\n      </div>\n      <div class=\"clash-bot-teams-dashboard-help-dialog-content-row\">\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-icon\">\n          <mat-icon>warning</mat-icon>\n        </div>\n        <div class=\"clash-bot-teams-dashboard-help-dialog-content-description\">\n          <p style=\"font-weight: bolder\">DO NOT REFRESH ON THE TEAMS PAGE!</p>\n          <p> If you do, navigate back to the Welcome Page and then back to retrieve your User details again.\n            This app is still relatively new so you can help identify any issues! If you do face something that you do\n            not think is right, please use this <a href=\"https://forms.gle/wu4WBykZXZ7Jm5j26\">Google Form</a> to report\n            it. Thank you! :D</p>\n        </div>\n      </div>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-raised-button mat-dialog-close color=\"primary\">Close</button>\n  </mat-dialog-actions>\n</div>\n"
        },
        {
            "name": "TeamsDashboardViewComponent",
            "id": "component-TeamsDashboardViewComponent-67b2e63e0d2475f0ec48ff62a1a2653f2742c643a8bb553f7bbbb88c8092a5a311b2404d46f7838f1ca781ed6354533de842635653c2e968f3d0589d3fefc243",
            "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: myCustomTooltipDefaults }"
                }
            ],
            "selector": "app-teams-dashboard-view",
            "styleUrls": [
                "./teams-dashboard-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-dashboard-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canCreateNewTeam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "defaultServer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "DiscordGuild",
                    "decorators": []
                },
                {
                    "name": "eligibleTournaments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "Tournament[]",
                    "decorators": []
                },
                {
                    "name": "selectedServer",
                    "defaultValue": "{\n    features: [],\n    icon: \"\",\n    id: \"\",\n    name: \"\",\n    owner: false,\n    permissions: 0,\n    permissions_new: \"\"\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "DiscordGuild",
                    "decorators": []
                },
                {
                    "name": "showSpinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "teamFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "TeamFilter[]",
                    "decorators": []
                },
                {
                    "name": "teams",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "TeamUiWrapper[]",
                    "decorators": []
                },
                {
                    "name": "tentativeDataStatus",
                    "defaultValue": "\"NOT_LOADED\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tentativeList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "TentativeRecord[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "createTeamEvent",
                    "defaultValue": "new EventEmitter<CreateNewTeamDetails>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "EventEmitter<CreateNewTeamDetails>"
                },
                {
                    "name": "filterTeamEvent",
                    "defaultValue": "new EventEmitter<DiscordGuild>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 126,
                    "type": "EventEmitter<DiscordGuild>"
                },
                {
                    "name": "registerForTeamEvent",
                    "defaultValue": "new EventEmitter<ClashBotUserRegister>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "EventEmitter<ClashBotUserRegister>"
                },
                {
                    "name": "tentativeRegisterEvent",
                    "defaultValue": "new EventEmitter<TentativeRecord>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "EventEmitter<TentativeRecord>"
                },
                {
                    "name": "unregisterFromTeamEvent",
                    "defaultValue": "new EventEmitter<TeamUiWrapper>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "EventEmitter<TeamUiWrapper>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer",
                    "optional": true,
                    "description": "",
                    "line": 130,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drawer'"
                        }
                    ]
                },
                {
                    "name": "event",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "freeAgent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTooltip",
                    "optional": true,
                    "description": "",
                    "line": 128,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltip'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "CreateNewTeamDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "CreateNewTeamDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "DiscordGuild",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "DiscordGuild",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerForTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "ClashBotUserRegister",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tentativeRegister",
                    "args": [
                        {
                            "name": "$event",
                            "type": "TentativeRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "TentativeRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "guild",
                            "type": "TeamFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "guild",
                            "type": "TeamFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterFromTeam",
                    "args": [
                        {
                            "name": "$event",
                            "type": "TeamUiWrapper",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "TeamUiWrapper",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild\n} from \"@angular/core\";\nimport {ClashBotUserRegister} from \"../../../../interfaces/clash-bot-user-register\";\nimport {TeamFilter} from \"../../../../interfaces/team-filter\";\nimport {CreateNewTeamDetails} from \"../../../../interfaces/create-new-team-details\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\nimport {TeamUiWrapper} from \"src/app/interfaces/team-ui-wrapper\";\nimport {TentativeRecord} from \"../../../../interfaces/tentative-record\";\nimport {MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, MatTooltipDefaultOptions} from \"@angular/material/tooltip\";\nimport {MatDrawer} from \"@angular/material/sidenav\";\nimport {DiscordGuild} from \"../../../../interfaces/discord-guild\";\nimport {animate, group, query, stagger, state, style, transition, trigger} from \"@angular/animations\";\n\n/** Custom options the configure the tooltip's default show/hide delays. */\nexport const myCustomTooltipDefaults: MatTooltipDefaultOptions = {\n  showDelay: 0,\n  hideDelay: 1000,\n  touchendHideDelay: 1000,\n};\n\n@Component({\n  selector: \"app-teams-dashboard-view\",\n  templateUrl: \"./teams-dashboard-view.component.html\",\n  styleUrls: [\"./teams-dashboard-view.component.scss\"],\n  providers: [{provide: MAT_TOOLTIP_DEFAULT_OPTIONS, useValue: myCustomTooltipDefaults}],\n  animations: [\n    trigger(\n        \"inOutAnimation\",\n        [\n          transition(\n              \"* => *\", [\n              group([\n                query(\":leave\", animate(\".2s\", style({opacity: 0})), {optional: true}),\n                query(\":enter\", style({height: 0, width: 0, margin: 0, padding: 0, overflow: \"hidden\", opacity: 0}), {\n                  optional: true,\n                }),\n              ]),\n              style({overflow: \"hidden\"}),\n              group([\n                query(\":leave\", animate(\".3s ease-in\", style({height: 0, width: 0, margin: 0, padding: 0})), {\n                  optional: true,\n                }),\n                query(\n                  \":enter\",\n                  animate(\".3s ease-in\", style({height: \"*\", width: \"*\", margin: \"*\", padding: \"*\", overflow: \"visible\"})),\n                  {optional: true}\n                ),\n            ]),\n            // Now that everything is the correct size, fade in the entering element.\n            query(\":enter\", animate(\".4s\", style({opacity: 1}))),\n        ]\n      )\n    ]),\n      trigger(\n          \"flyInAnimation\",\n          [\n              transition(\"void => *\", [\n                  query(\":enter\", [\n                    style({transform: \"translateX(100%)\", opacity: 0}),\n                    stagger(250, [\n                      animate(\"0.25s ease-in\", style({transform: \"translateX(0)\", opacity: 1}))\n                    ])\n                  ])\n              ])\n          ]\n      )\n  ]\n})\nexport class TeamsDashboardViewComponent implements AfterViewInit {\n\n  @Input()\n  selectedServer: DiscordGuild = {\n    features: [],\n    icon: \"\",\n    id: \"\",\n    name: \"\",\n    owner: false,\n    permissions: 0,\n    permissions_new: \"\"\n  };\n\n  @Input()\n  eligibleTournaments: Tournament[] = [];\n\n  @Input()\n  teams: TeamUiWrapper[] = [];\n\n  @Input()\n  tentativeList?: TentativeRecord[] = [];\n\n  @Input()\n  teamFilters: TeamFilter[] = [];\n\n  @Input()\n  defaultServer?: DiscordGuild;\n\n  @Input()\n  tentativeDataStatus: string = \"NOT_LOADED\";\n\n  @Input()\n  showSpinner?: boolean;\n\n  @Input()\n  canCreateNewTeam?: boolean;\n\n  @Output()\n  createTeamEvent: EventEmitter<CreateNewTeamDetails> = new EventEmitter<CreateNewTeamDetails>();\n\n  @Output()\n  unregisterFromTeamEvent: EventEmitter<TeamUiWrapper> = new EventEmitter<TeamUiWrapper>();\n\n  @Output()\n  registerForTeamEvent: EventEmitter<ClashBotUserRegister> = new EventEmitter<ClashBotUserRegister>();\n\n  @Output()\n  tentativeRegisterEvent: EventEmitter<TentativeRecord> = new EventEmitter<TentativeRecord>();\n\n  @Output()\n  filterTeamEvent: EventEmitter<DiscordGuild> = new EventEmitter<DiscordGuild>();\n\n  @ViewChild(\"tooltip\") tooltip?: MatTooltip;\n\n  @ViewChild(\"drawer\") drawer?: MatDrawer;\n\n  freeAgent: boolean = false;\n  event: boolean = false;\n\n  constructor(private cd: ChangeDetectorRef) { }\n\n  ngAfterViewInit(): void {\n    this.tooltip?.show();\n    this.cd.detectChanges();\n    setTimeout(() => this.tooltip?.hide(), 2000);\n  }\n\n  createNewTeam($event: CreateNewTeamDetails) {\n    this.createTeamEvent.emit($event);\n  }\n\n  unregisterFromTeam($event: TeamUiWrapper) {\n    this.unregisterFromTeamEvent.emit($event);\n  }\n\n  registerForTeam($event: ClashBotUserRegister) {\n    this.registerForTeamEvent.emit($event);\n  }\n\n  tentativeRegister($event: TentativeRecord) {\n    this.tentativeRegisterEvent.emit($event)\n  }\n\n  filterTeam($event: DiscordGuild) {\n    this.filterTeamEvent.emit($event);\n    this.drawer?.toggle();\n    this.selectedServer = $event;\n  }\n\n  trackByFn(index: number, guild: TeamFilter) {\n    return guild.value.id;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex-grow: 1;\n  display: flex;\n}\n\n.team-dashboard-view-container {\n  flex-grow: 1;\n}\n\n.team-cards {\n  padding-top: 1em;\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n.team-card {\n  padding: 0.5em;\n}\n\n.clash-bot-teams-card-create-new-container {\n  display: flex;\n  justify-content: center;\n}\n\n.clash-bot-teams-card-create-new-forms {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.show-tentative-button-container {\n  display: flex;\n  align-items: center;\n}\n\n.server-filter-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.server-filter-container > h2 {\n  margin: 0 1em 0 0.5em;\n  max-width: 8em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.server-filter-container > button {\n  margin: 0 0 0 1em;\n}\n\n.server-list-item {\n  max-width: 8em;\n  width: 8em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.server-list-title {\n  display: flex;\n  justify-content: center;\n}\n\n.server-list {\n  overflow-y:auto;\n}\n\n.server-icon {\n  padding-right: 0.25em;\n}\n\n.number-of-teams {\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n.free-agent-team-btn {\n  transition: opacity 500ms;\n}\n\n.server-team-btn {\n  transition: opacity 500ms;\n}\n\n.free-agent-team-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 1em;\n}\n\n::ng-deep .ng-animating div mat-accordion mat-expansion-panel div.mat-expansion-panel-content {\n  height: 0px;\n  visibility: hidden;\n}\n",
                    "styleUrl": "./teams-dashboard-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 133,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-drawer-container class=\"team-dashboard-view-container\" autosize>\n    <mat-drawer #drawer mode=\"over\">\n        <div>\n            <mat-card>\n                <mat-card-title class=\"server-list-title\"># of Teams | Servers</mat-card-title>\n            </mat-card>\n            <div class=\"server-list\">\n                <mat-list role=\"list\">\n                    <mat-list-item *ngFor=\"let server of teamFilters; trackBy: trackByFn\"\n                                   role=\"listitem\">\n                        <button mat-raised-button\n                                id=\"number-of-teams-{{server.value.id}}\"\n                                class=\"number-of-teams\"\n                                disabled=\"true\">{{server.numberOfTeams}}</button>\n                        <div class=\"to-disappear\">\n                          <button mat-raised-button\n                                  id=\"clash-bot-teams-{{server.value.id}}\"\n                                  class=\"server-list-btn\"\n                                  (click)=\"filterTeam(server.value)\"\n                                  [disabled]=\"server.state\">\n                              <div class=\"server-list-item\">\n                                  <mat-icon *ngIf=\"server.value.id !== '-1'; else elseBlock\" class=\"server-icon\">discord</mat-icon>{{server.value.name}}\n                                  <ng-template #elseBlock>\n                                    <mat-icon class=\"server-icon\">groups</mat-icon>{{server.value.name}}\n                                  </ng-template>\n                              </div></button>\n                        </div>\n                    </mat-list-item>\n                </mat-list>\n            </div>\n        </div>\n    </mat-drawer>\n    <div class=\"server-filter-container\">\n        <mat-icon>discord</mat-icon>\n        <h2 id=\"selected-server\">{{selectedServer.name}}</h2>\n        <button mat-mini-fab\n                id=\"change-server-btn\"\n                #tooltip=\"matTooltip\"\n                matTooltip=\"Click to change Servers\"\n                (click)=\"drawer.toggle()\">\n            <mat-icon>filter_list</mat-icon>\n        </button>\n    </div>\n    <app-teams-tentative-table [tentativeList]=\"tentativeList\"\n                               [tentativeDataStatus]=\"tentativeDataStatus\"\n                               (register)=\"tentativeRegister($event)\"></app-teams-tentative-table>\n    <div class=\"team-cards\" [@flyInAnimation]=\"teams.length\" *ngIf=\"!showSpinner; else elseBlock\">\n        <app-team-card *ngFor=\"let team of teams; index as i;\"\n                       id=\"clash-bot-teams-card-{{team.id}}\"\n                       [team]=\"team\"\n                       class=\"team-card\" (registerUser)=\"registerForTeam($event)\"\n                       (unregisterUser)=\"unregisterFromTeam($event)\"></app-team-card>\n        <app-new-team-card\n                *ngIf=\"canCreateNewTeam\"\n                [eligibleTournaments]=\"eligibleTournaments\"\n                (createNewTeamEvent)=\"createNewTeam($event)\"></app-new-team-card>\n    </div>\n    <ng-template #elseBlock>\n      <mat-progress-bar mode=\"query\"></mat-progress-bar>\n    </ng-template>\n</mat-drawer-container>\n"
        },
        {
            "name": "TeamsTentativeTableComponent",
            "id": "component-TeamsTentativeTableComponent-2000a0d1418131dc8629be9e94ceec42aa7e16d98d94bb1f0ed42ee5d959180fcb235ef3e3b85d049b66c4deafb38175a3aa9c91571465ad38b0b2b07212d217",
            "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teams-tentative-table",
            "styleUrls": [
                "./teams-tentative-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams-tentative-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tentativeDataStatus",
                    "defaultValue": "\"NOT_LOADED\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tentativeList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TentativeRecord[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "register",
                    "defaultValue": "new EventEmitter<TentativeRecord>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<TentativeRecord>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showTentative",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<TentativeRecord>",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tentativeRegister",
                    "args": [
                        {
                            "name": "element",
                            "type": "TentativeRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "TentativeRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild} from \"@angular/core\";\nimport {MatTable} from \"@angular/material/table\";\nimport {ConfirmationDialogComponent} from \"../../../../dialogs/confirmation-dialog/confirmation-dialog.component\";\nimport {take} from \"rxjs/operators\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {TentativeRecord} from \"../../../../interfaces/tentative-record\";\n\n@Component({\n    selector: \"app-teams-tentative-table\",\n    templateUrl: \"./teams-tentative-table.component.html\",\n    styleUrls: [\"./teams-tentative-table.component.scss\"]\n})\nexport class TeamsTentativeTableComponent implements OnChanges {\n\n    showTentative: boolean = false;\n\n    @Input()\n    tentativeList?: TentativeRecord[] = [];\n\n    @Input()\n    tentativeDataStatus: string = \"NOT_LOADED\";\n\n    @Output()\n    register: EventEmitter<TentativeRecord> = new EventEmitter<TentativeRecord>();\n\n    @ViewChild(MatTable) table?: MatTable<TentativeRecord>;\n\n    constructor(private dialog: MatDialog) {}\n\n    tentativeRegister(element: TentativeRecord, index: number) {\n        let actionMessage = \"added to\";\n        element.toBeAdded = true;\n        if (element.isMember) {\n            actionMessage = \"removed from\";\n            element.toBeAdded = false;\n        }\n        let dialogRef = this.dialog.open(ConfirmationDialogComponent,\n            {\n                data: {\n                    message: `Are you sure you want to be ${actionMessage} the Tentative list for this tournament?`\n                }\n            });\n        dialogRef.afterClosed().pipe(take(1)).subscribe((result) => {\n            if (result) {\n                element.index = index;\n\n                this.register.emit(element)\n            }\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.table?.renderRows();\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".show-tentative-button-container {\n  display: flex;\n  align-items: center;\n}",
                    "styleUrl": "./teams-tentative-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"tentativeDataStatus === 'LOADING'\" class=\"show-tentative-button-container\">\n    <mat-icon>hourglass_empty</mat-icon>\n    <div>Loading Tournament Details...</div>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'FAILED'\" class=\"show-tentative-button-container\">\n    <mat-icon>error</mat-icon>\n    <div>Unable to load Tournament Details for Server.</div>\n</div>\n<div *ngIf=\"tentativeDataStatus === 'SUCCESSFUL'\" class=\"show-tentative-button-container\">\n    <button id=\"clash-bot-teams-dashboard-show-tentative\" mat-icon-button\n            aria-label=\"Show Tentative List\" (click)=\"showTentative = !showTentative\">\n        <mat-icon>pending</mat-icon>\n    </button>\n    <div>click to toggle view of upcoming Clash Tournaments</div>\n</div>\n<mat-table *ngIf=\"showTentative && tentativeList && tentativeDataStatus === 'SUCCESSFUL'\" [dataSource]=\"tentativeList\"\n           class=\"mat-elevation-z8\">\n    <ng-container matColumnDef=\"tournamentName\">\n        <mat-header-cell *matHeaderCellDef> Tournament</mat-header-cell>\n        <mat-cell\n                id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tournament-name\"\n                *matCellDef=\"let element\"> {{element.tournamentDetails.tournamentName}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"tournamentDay\">\n        <mat-header-cell *matHeaderCellDef> Day</mat-header-cell>\n        <mat-cell\n                id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tournament-day\"\n                *matCellDef=\"let element\"> {{element.tournamentDetails.tournamentDay}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"tentativePlayers\">\n        <mat-header-cell *matHeaderCellDef> Tentative Players</mat-header-cell>\n        <mat-cell\n                id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-tentative-players\"\n                *matCellDef=\"let element\"> {{element.playerNames}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"action\" stickyEnd>\n        <th mat-header-cell *matHeaderCellDef>+/-</th>\n        <td mat-cell *matCellDef=\"let element; index as i\">\n            <div *ngIf=\"!element.isMember; else elseBlock\">\n                <button\n                        id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-add\"\n                        mat-icon-button color=\"primary\"\n                        aria-label=\"Add to Tentative\"\n                        (click)=\"tentativeRegister(element, i)\">\n                    <mat-icon>add</mat-icon>\n                </button>\n            </div>\n            <ng-template #elseBlock>\n                <button\n                        id=\"clash-bot-teams-dashboard-{{element.tournamentDetails.tournamentName}}-{{element.tournamentDetails.tournamentDay}}-remove\"\n                        mat-icon-button color=\"warn\"\n                        aria-label=\"Remove from Tentative\"\n                        (click)=\"tentativeRegister(element, i)\">\n                    <mat-icon>remove</mat-icon>\n                </button>\n            </ng-template>\n        </td>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"['tournamentName', 'tournamentDay', 'tentativePlayers', 'action']\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: ['tournamentName', 'tournamentDay', 'tentativePlayers', 'action'];\"></mat-row>\n</mat-table>"
        },
        {
            "name": "UpcomingTournamentDetailsCardComponent",
            "id": "component-UpcomingTournamentDetailsCardComponent-bdd2dc77831b50183965258451932253b0e8591284e50584f25352dc5f995d4ad472c00779649a4cbd628ad190ecf2f4b88f85d85287c5b392d5c39c1d8dfecf",
            "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upcoming-tournament-details-card",
            "styleUrls": [
                "./upcoming-tournament-details-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upcoming-tournament-details-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tournaments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Tournament[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "\"MMM d, y h:mm a\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "timezoneOffset",
                    "defaultValue": "Intl.DateTimeFormat().resolvedOptions().timeZone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from \"@angular/core\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\n\n@Component({\n  selector: \"app-upcoming-tournament-details-card\",\n  templateUrl: \"./upcoming-tournament-details-card.component.html\",\n  styleUrls: [\"./upcoming-tournament-details-card.component.scss\"]\n})\nexport class UpcomingTournamentDetailsCardComponent {\n\n  @Input()\n  tournaments: Tournament[] = [];\n  currentDate?: Date = new Date();\n  dateFormat: string = \"MMM d, y h:mm a\";\n  timezoneOffset: string = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  constructor() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".upcoming-clash-tournament-card {\n  max-width: 275px;\n}\n\n.upcoming-tournament-name {\n  font-style: italic;\n  font-size: 150%;\n}",
                    "styleUrl": "./upcoming-tournament-details-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<mat-card class=\"upcoming-clash-tournament-card\">\n  <mat-card-title id=\"clash-bot-upcoming-tournaments-title\">Upcoming Tournaments</mat-card-title>\n  <mat-card-subtitle id=\"clash-bot-upcoming-tournaments-subtitle\">Here are the details for the upcoming League of Legends Clash Tournaments.</mat-card-subtitle>\n  <mat-list id=\"clash-bot-upcoming-tournaments-list\" role=\"list\">\n    <mat-list-item id=\"clash-bot-clash-bot-upcoming-tournament\" *ngFor=\"let tournament of tournaments\" role=\"listitem\">\n      <mat-icon mat-list-icon>emoji_events</mat-icon>\n      <div class=\"upcoming-tournament-name\" id=\"clash-bot-upcoming-tournaments-{{tournament.tournamentName}}-{{tournament.tournamentDay}}-name\" mat-line>{{tournament.tournamentName | tournamentNameTransformer}}</div>\n      <div id=\"clash-bot-upcoming-tournaments-{{tournament.tournamentName}}-{{tournament.tournamentDay}}-day\" mat-line>Day {{tournament.tournamentDay}}</div>\n      <div id=\"clash-bot-upcoming-tournaments-{{tournament.tournamentName}}-{{tournament.tournamentDay}}-time\" mat-line>{{tournament.startTime | date:dateFormat:timezoneOffset}}</div>\n    </mat-list-item>\n  </mat-list>\n  <mat-card-footer class=\"subtext\" align=\"end\">As of : {{currentDate | date:dateFormat:timezoneOffset}}</mat-card-footer>\n</mat-card>\n"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-eca97a8485bef54e85b685563e11b9c9f56d55acdb856cc8460be3d945c73e4961ccae3cf0490494634a33d22221174b00f766a72c1134ecd18ab60d44bb6bd5",
            "file": "src/app/pages/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [
                "./user-profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "championAutoCompleteCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "championInput",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'championInput'"
                        }
                    ]
                },
                {
                    "name": "championsAutofillArray",
                    "defaultValue": "of()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "defaultGuild",
                    "defaultValue": "{\n        features: [],\n        icon: \"\",\n        id: \"\",\n        name: \"\",\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "guilds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "initialAutoCompleteArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "initialFormControlState",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "listOfChampions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "preferredChampions",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<string>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "removable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedGuild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, COMMA]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "userDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDetails",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "userDetailsForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": true,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkFormState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "compareArray",
                    "args": [
                        {
                            "name": "arr1",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "arr2",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arr1",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arr2",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notInListValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "champion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "champion",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sliderUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "syncChampionsList",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {Observable, of, throwError, EMPTY, forkJoin} from \"rxjs\";\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn} from \"@angular/forms\";\nimport {COMMA, ENTER} from \"@angular/cdk/keycodes\";\nimport {catchError, finalize, map, mergeMap, startWith, take, timeout} from \"rxjs/operators\";\nimport {MatAutocompleteSelectedEvent} from \"@angular/material/autocomplete\";\nimport {RiotDdragonService} from \"../../services/riot-ddragon.service\";\nimport {DiscordGuild} from \"../../interfaces/discord-guild\";\nimport {UserDetails} from \"../../interfaces/user-details\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {ApplicationDetailsService} from \"../../services/application-details.service\";\nimport {PageLoadingService} from \"../../services/page-loading.service\";\nimport {UserService} from \"clash-bot-service-api\";\n\n@Component({\n    selector: \"app-user-profile\",\n    templateUrl: \"./user-profile.component.html\",\n    styleUrls: [\"./user-profile.component.scss\"]\n})\nexport class UserProfileComponent implements OnInit {\n\n    selectable = true;\n    removable = true;\n    separatorKeysCodes: number[] = [ENTER, COMMA];\n    championAutoCompleteCtrl = new FormControl();\n    championsAutofillArray: Observable<string[]> = of();\n    preferredChampions: Set<string> = new Set<string>();\n    listOfChampions: string[] = [];\n    initialFormControlState: any = {};\n    initialAutoCompleteArray: string[] = [];\n    defaultGuild: DiscordGuild = {\n        features: [],\n        icon: \"\",\n        id: \"\",\n        name: \"\",\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    };\n    userDetails?: UserDetails;\n    guilds: DiscordGuild[] = [];\n\n    @ViewChild(\"championInput\") championInput: any = \"\";\n    userDetailsForm?: FormGroup;\n    selectedGuild?: string;\n\n    constructor(private riotDdragonService: RiotDdragonService,\n                private applicationDetailsService: ApplicationDetailsService,\n                private matSnackBar: MatSnackBar,\n                private pageLoadingService: PageLoadingService,\n                private userService: UserService) {\n    }\n\n    notInListValidator(): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            const contained = !this.listOfChampions.includes(control.value);\n            return contained ? {forbiddenName: {value: control.value}} : null;\n        };\n    }\n\n    ngOnInit(): void {\n        this.applicationDetailsService.getApplicationDetails()\n            .pipe(\n                take(1),\n                mergeMap(details => details.userDetails ?\n                    this.userService.getUser(`${details.userDetails.id}`)\n                        .pipe(\n                            take(1),\n                            timeout(4000),\n                            catchError((err) => {\n                                this.matSnackBar.open(\"Oops! Failed to retrieve your User Information. Please try again later.\",\n                                    \"X\",\n                                    {duration: 5000});\n                                return throwError(err);\n                            }),\n                            map(clashBotUserDetails => {\n                                return {\n                                    clashBotUserDetails: clashBotUserDetails,\n                                    appDetails: details\n                                }\n                            }))\n                    : EMPTY),\n                mergeMap(details =>\n                    this.riotDdragonService.getListOfChampions()\n                        .pipe(take(1),\n                            timeout(7000),\n                            catchError((err) => {\n                                this.matSnackBar.open(\"Oops! Failed to retrieve League Champion names. Please try again later.\",\n                                    \"X\",\n                                    {duration: 5000});\n                                return throwError(err);\n                            }),\n                            map(championList => {\n                                return {\n                                    clashBotUserDetails: details.clashBotUserDetails,\n                                    appDetails: details.appDetails,\n                                    championList: championList\n                                }\n                            }))),\n                finalize(() => setTimeout(() => this.pageLoadingService.updateSubject(false), 300))\n            )\n            .subscribe((userProfileDetails) => {\n                userProfileDetails.appDetails.userGuilds?.forEach(guild => this.guilds.push(guild));\n                if (!userProfileDetails.appDetails.loggedIn) {\n                    this.matSnackBar.open(\n                        \"Oops! You are not logged in. Please navigate back to the home screen and log in.\",\n                        \"X\",\n                        {duration: 5000})\n                } else if (userProfileDetails.clashBotUserDetails) {\n                    this.userDetails = userProfileDetails.appDetails.userDetails;\n                    if (!userProfileDetails.clashBotUserDetails || !userProfileDetails.clashBotUserDetails.id) {\n                        userProfileDetails.clashBotUserDetails.serverId = this.guilds[0].id;\n                        userProfileDetails.clashBotUserDetails.champions = [];\n                        userProfileDetails.clashBotUserDetails.subscriptions = [{\n                            key: \"UpcomingClashTournamentDiscordDM\",\n                            isOn: false\n                        }];\n                    }\n                    let foundGuild = userProfileDetails\n                        .appDetails\n                        .userGuilds?.get(userProfileDetails.clashBotUserDetails.serverId ?? \"-1\");\n                    this.defaultGuild = foundGuild ?? this.guilds[0];\n                    console.dir(this.defaultGuild);\n                    let preferredChampions = Array.isArray(userProfileDetails.clashBotUserDetails.champions) ? userProfileDetails.clashBotUserDetails.champions : [];\n                    this.listOfChampions = Object.keys(userProfileDetails.championList.data);\n                    this.listOfChampions = this.listOfChampions.filter(record => !preferredChampions.includes(record));\n                    this.initialAutoCompleteArray = JSON.parse(JSON.stringify(this.listOfChampions));\n                    this.userDetailsForm = new FormGroup({\n                        preferredChampionsFC: new FormControl([...preferredChampions]),\n                        subscribedDiscordDMFC: new FormControl(userProfileDetails.clashBotUserDetails.subscriptions === undefined\n                            ? false : userProfileDetails.clashBotUserDetails.subscriptions[0].isOn),\n                        defaultGuildFC: new FormControl(this.defaultGuild.name)\n                    });\n                    this.preferredChampions = new Set<string>(userProfileDetails.clashBotUserDetails.champions);\n                    this.initialFormControlState = JSON.parse(JSON.stringify(this.userDetailsForm.value));\n                    this.championsAutofillArray = this.championAutoCompleteCtrl.valueChanges.pipe(\n                        startWith(null),\n                        map((champion: string | null) => champion ? this._filter(champion) : this.listOfChampions.slice()));\n                }\n            });\n    }\n\n    private syncChampionsList(value: string) {\n        if (this.listOfChampions.indexOf(value) > -1 && this.preferredChampions.size < 5) {\n            this.listOfChampions.splice(this.listOfChampions.indexOf(value), 1);\n            this.listOfChampions.sort();\n            this.preferredChampions.add(value);\n        } else {\n            this.preferredChampions.delete(value);\n            this.listOfChampions.push(value);\n            this.listOfChampions.sort();\n        }\n        this.userDetailsForm?.controls.preferredChampionsFC.setValue([...this.preferredChampions]);\n        this.checkFormState();\n    }\n\n    private checkFormState() {\n        if (this.compareArray([...this.preferredChampions], this.initialFormControlState.preferredChampionsFC)\n            && this.userDetailsForm?.controls.subscribedDiscordDMFC.value === this.initialFormControlState.subscribedDiscordDMFC) {\n            this.userDetailsForm?.markAsPristine()\n        } else {\n            this.userDetailsForm?.markAsDirty();\n        }\n    }\n\n    remove(champion: string): void {\n        this.syncChampionsList(champion);\n    }\n\n    selected(event: MatAutocompleteSelectedEvent): void {\n        this.syncChampionsList(event.option.viewValue);\n        this.championInput.nativeElement.value = \"\";\n        this.championAutoCompleteCtrl.setValue(null);\n    }\n\n    private _filter(value: string): string[] {\n        const filterValue = value.toLowerCase();\n        return this.listOfChampions.filter(champion => champion.toLowerCase().includes(filterValue));\n    }\n\n    resetState() {\n        this.userDetailsForm?.reset(this.initialFormControlState);\n        this.preferredChampions = new Set<string>(this.initialFormControlState.preferredChampionsFC);\n        this.listOfChampions = JSON.parse(JSON.stringify(this.initialAutoCompleteArray));\n    }\n\n    onSubmit() {\n        if (this.userDetailsForm && this.userDetails) {\n            this.userDetailsForm.markAsPending();\n\n            const updateCallsToMake = [];\n            const foundGuild = this.guilds.find(guild => guild.name === this.userDetailsForm?.value.defaultGuildFC);\n            if (this.userDetailsForm.value\n                .defaultGuildFC !== this.initialFormControlState\n                .defaultGuildFC && foundGuild) {\n                updateCallsToMake.push(this.userService.updateUser({\n                    id: `${this.userDetails.id}`,\n                    name: this.userDetails.username,\n                    serverId: foundGuild.id,\n                }).pipe(timeout(4000),\n                    catchError((err) => throwError(err))));\n            } if (!this.compareArray(this.userDetailsForm.value\n                .preferredChampionsFC, this.initialFormControlState\n                .preferredChampionsFC)) {\n                updateCallsToMake.push(this.userService.createNewListOfPreferredChampions(\n                    `${this.userDetails.id}`,\n                    {\n                        champions: Array.from(new Set<string>(this.userDetailsForm.value.preferredChampionsFC))\n                    },\n                ).pipe(timeout(4000),\n                    catchError((err) => throwError(err))));\n            } if (this.userDetailsForm.value\n                .subscribedDiscordDMFC !== this.initialFormControlState\n                .subscribedDiscordDMFC) {\n                if (this.userDetailsForm.value\n                    .subscribedDiscordDMFC) {\n                    updateCallsToMake.push(this.userService.subscribeUser(`${this.userDetails.id}`)\n                        .pipe(timeout(4000),\n                            catchError((err) => throwError(err))));\n                } else {\n                    updateCallsToMake.push(this.userService.unsubscribeUser(`${this.userDetails.id}`)\n                        .pipe(timeout(4000),\n                            catchError((err) => throwError(err))));\n                }\n            }\n\n            forkJoin(updateCallsToMake)\n                .subscribe(() => {\n                    this.initialFormControlState = JSON.parse(JSON.stringify(this.userDetailsForm?.value));\n                    this.userDetailsForm?.markAsPristine();\n                    this.applicationDetailsService.getApplicationDetails()\n                        .pipe(take(1))\n                        .subscribe((appDetails) => {\n                            appDetails.defaultGuild = this.userDetailsForm?.value.defaultGuildFC;\n                            this.applicationDetailsService.setApplicationDetails(appDetails);\n                        })\n                }, () => {\n                    this.matSnackBar.open(\"Oops! Failed to persist your requested update. Please try again.\", \"X\", {duration: 5000});\n                });\n        }\n    }\n\n    sliderUpdate() {\n        this.checkFormState();\n    }\n\n    compareArray(arr1: any[], arr2: any[]): boolean {\n        if ((Array.isArray(arr1) && Array.isArray(arr2))\n            && arr1.length === arr2.length) {\n            for (let value of arr2) {\n                if (!arr1.includes(value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".clash-bot-user-profile-save-button-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.clash-bot-user-profile-save-button-container > button {\n  margin: 0.5em;\n}\n\n.example-chip-list {\n  width: 100%;\n}\n\n.example-headers-align .mat-expansion-panel-header-title,\n.example-headers-align .mat-expansion-panel-header-description {\n  flex-basis: 0;\n}\n\n.example-headers-align .mat-expansion-panel-header-description .mat-panel-title {\n  justify-content: space-between;\n}\n\n.example-headers-align .mat-form-field + .mat-form-field {\n  margin-left: 8px;\n}\n\nmat-expansion-panel {\n  padding: 2em 0 2em 0;\n}\n\nmat-expansion-panel.mat-expansion-panel:nth-of-type(1n+1) {\n  margin-top: 1em !important;\n}\n\n",
                    "styleUrl": "./user-profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "riotDdragonService",
                        "type": "RiotDdragonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "riotDdragonService",
                        "type": "RiotDdragonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-accordion class=\"example-headers-align\" multi>\n  <form *ngIf=\"userDetailsForm\" [formGroup]=\"userDetailsForm\" (ngSubmit)=\"userDetailsForm.valid && onSubmit()\">\n    <mat-expansion-panel [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          User Information\n        </mat-panel-title>\n        <mat-panel-description>\n          Clash Bot User Information\n          <mat-icon>account_circle</mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <mat-list>\n        <mat-list-item>\n          <mat-icon mat-list-icon>discord</mat-icon>\n          <div id=\"clash-bot-user-profile-username\" mat-line>{{userDetails?.username}}</div>\n        </mat-list-item>\n        <mat-list-item>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Default Guild</mat-label>\n            <mat-select id=\"clash-bot-user-profile-default-guild\" name=\"defaultGuild\" formControlName=\"defaultGuildFC\">\n              <mat-option id=\"clash-bot-user-profile-autocomplete-{{ guild.name | kebabcase }}-guild\" *ngFor=\"let guild of guilds\"\n                          [value]=\"guild.name\">\n                {{guild.name}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </mat-list-item>\n        <mat-list-item>\n          <p>NOTE: This will affect the guild sent with your Discord DM.</p>\n        </mat-list-item>\n      </mat-list>\n    </mat-expansion-panel>\n\n    <mat-expansion-panel [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          League of Legends\n        </mat-panel-title>\n        <mat-panel-description>\n          League of Legends User Preferences\n          <mat-icon>groups</mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <p>Cannot exceed 5 champions.</p>\n      <mat-form-field id=\"clash-bot-user-profile-preferred-champions-list\" class=\"example-chip-list\" appearance=\"fill\">\n        <mat-label>Current Preferred Champions</mat-label>\n        <mat-chip-list #chipList aria-label=\"Preferred Champion selection\">\n          <mat-chip\n            *ngFor=\"let champion of preferredChampions\"\n            id=\"clash-bot-user-profile-preferred-champion-{{ champion | kebabcase }}\"\n            [selectable]=\"selectable\"\n            [removable]=\"removable\"\n            (removed)=\"remove(champion)\">\n            {{champion}}\n            <mat-icon id=\"clash-bot-user-profile-preferred-champion-{{ champion }}-remove\" matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n          </mat-chip>\n          <input\n            placeholder=\"Add Champion...\"\n            #championInput\n            id=\"clash-bot-user-profile-preferred-champion-input\"\n            [formControl]=\"championAutoCompleteCtrl\"\n            [matAutocomplete]=\"auto\"\n            [matChipInputFor]=\"chipList\"\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\">\n        </mat-chip-list>\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n          <mat-option *ngFor=\"let champion of championsAutofillArray | async\" id=\"clash-bot-user-profile-preferred-champion-{{ champion | kebabcase }}-autocomplete\" [value]=\"champion\">\n            {{champion}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </mat-expansion-panel>\n    <mat-expansion-panel [expanded]=\"true\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          Notification Subscriptions\n        </mat-panel-title>\n        <mat-panel-description>\n          Clash Bot notification settings\n          <mat-icon>notifications</mat-icon>\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n      <mat-slide-toggle\n        class=\"example-margin\"\n        id=\"clash-bot-user-profile-discord-dm-notification-toggle\"\n        formControlName=\"subscribedDiscordDMFC\"\n        (change)=\"sliderUpdate()\">\n        Monday before Tournament Discord direct message\n      </mat-slide-toggle>\n    </mat-expansion-panel>\n    <div class=\"clash-bot-user-profile-save-button-container\">\n      <mat-progress-bar id=\"clash-bot-user-profile-call-in-progress-bar\" *ngIf=\"userDetailsForm && userDetailsForm.pending && !userDetailsForm.pristine\" mode=\"indeterminate\"></mat-progress-bar>\n      <button mat-raised-button id=\"clash-bot-user-profile-undo\" type=\"reset\" [disabled]=\"!userDetailsForm.dirty\" (click)=\"resetState()\">Undo</button>\n      <button mat-raised-button id=\"clash-bot-user-profile-submit\" type=\"submit\" color=\"primary\" [disabled]=\"!userDetailsForm.dirty\">Save</button>\n    </div>\n  </form>\n</mat-accordion>\n"
        },
        {
            "name": "WelcomeDashboardComponent",
            "id": "component-WelcomeDashboardComponent-4b7fde288e9048f68ceba18d2cc45d82735fbfbe28c9c95e86174e0ac34f3fd013ec1da77990d793f4929d206f3958d9439d79b76197e1d6ea30ba38f1dcb9eb",
            "file": "src/app/pages/welcome-dashboard/welcome-dashboard.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome-dashboard",
            "styleUrls": [
                "./welcome-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$applicationDetailsServiceObs",
                    "defaultValue": "this\n      .applicationDetailsService.getApplicationDetails().asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ApplicationDetails>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dataLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "LOGGED_IN",
                    "defaultValue": "LoginStatus.LOGGED_IN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginStatus",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "LOGGING_IN",
                    "defaultValue": "LoginStatus.LOGGING_IN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginStatus",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "NOT_LOGGED_IN",
                    "defaultValue": "LoginStatus.NOT_LOGGED_IN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LoginStatus",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tournamentDays",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "tournaments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tournament[]",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getCodePartsFromUrl",
                    "args": [
                        {
                            "name": "queryString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "queryString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initUserDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginToDiscord",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapLoggedInApplicationDetails",
                    "args": [
                        {
                            "name": "appDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "discordUser",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "guilds",
                            "type": "DiscordGuild[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clashBotUserDetails",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ApplicationDetails",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "appDetails",
                            "type": "ApplicationDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "discordUser",
                            "type": "UserDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "guilds",
                            "type": "DiscordGuild[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clashBotUserDetails",
                            "type": "Player",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit, ViewEncapsulation} from \"@angular/core\";\nimport {OAuthService, UrlHelperService} from \"angular-oauth2-oidc\";\nimport {environment} from \"../../../environments/environment\";\nimport {DiscordService} from \"../../services/discord.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {ApplicationDetailsService} from \"../../services/application-details.service\";\nimport {catchError, finalize, map, mergeMap, retryWhen, take} from \"rxjs/operators\";\nimport {from, Observable, of, throwError, timer} from \"rxjs\";\nimport {ApplicationDetails} from \"../../interfaces/application-details\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {\n  ReleaseNotificationDialogComponent\n} from \"../../dialogs/release-notification-dialog/release-notification-dialog.component\";\nimport {UserDetails} from \"../../interfaces/user-details\";\nimport {DiscordGuild} from \"../../interfaces/discord-guild\";\nimport {PageLoadingService} from \"../../services/page-loading.service\";\nimport {TournamentService, UserService} from \"clash-bot-service-api\";\nimport {Tournament} from \"clash-bot-service-api/model/tournament\";\nimport {Player} from \"clash-bot-service-api/model/player\";\nimport {LoginStatus} from \"../../login-status\";\nimport {FREE_AGENT_GUILD} from \"../../interfaces/clash-bot-constants\";\n\n@Component({\n    selector: \"app-welcome-dashboard\",\n    templateUrl: \"./welcome-dashboard.component.html\",\n    styleUrls: [\"./welcome-dashboard.component.scss\"],\n    encapsulation: ViewEncapsulation.None\n})\nexport class WelcomeDashboardComponent implements OnInit {\n    readonly NOT_LOGGED_IN: LoginStatus = LoginStatus.NOT_LOGGED_IN;\n    readonly LOGGING_IN: LoginStatus = LoginStatus.LOGGING_IN;\n    readonly LOGGED_IN: LoginStatus = LoginStatus.LOGGED_IN;\n    tournamentDays: any[] = [];\n    tournaments?: Tournament[];\n    dataLoaded: boolean = false;\n    $applicationDetailsServiceObs: Observable<ApplicationDetails> = this\n      .applicationDetailsService.getApplicationDetails().asObservable();\n\n    constructor(private oauthService: OAuthService,\n                private discordService: DiscordService,\n                private applicationDetailsService: ApplicationDetailsService,\n                private _snackBar: MatSnackBar,\n                private matDialog: MatDialog,\n                private pageLoadingService: PageLoadingService,\n                private userService: UserService,\n                private tournamentService: TournamentService,\n                private urlHelperService: UrlHelperService) {\n    }\n\n    ngOnInit(): void {\n        if (localStorage.getItem(\"version\") !== environment.version) {\n            this.matDialog.open(ReleaseNotificationDialogComponent, {autoFocus: false});\n            localStorage.setItem(\"version\", environment.version);\n        }\n        this.tournamentService.getTournaments()\n            .pipe(\n                take(1),\n                map(tournaments => {\n                    tournaments.forEach(tournament => this.tournamentDays\n                        .push(new Date(tournament.startTime === undefined ? \"\": tournament.startTime)));\n                    return tournaments;\n                }))\n            .subscribe((data) => {\n                this.tournaments = data;\n                this.dataLoaded = true;\n                this.applicationDetailsService.getApplicationDetails()\n                    .pipe(take(1))\n                    .subscribe((appDetails) => {\n                        appDetails.currentTournaments = data;\n                        this.applicationDetailsService.setApplicationDetails(appDetails);\n                    })\n            });\n        if (this.oauthService.hasValidAccessToken()) {\n            this.initUserDetails();\n        } else {\n            const parts: any = this.getCodePartsFromUrl(window.location.search);\n            if (parts && parts[\"code\"] && parts[\"state\"]) {\n                this.applicationDetailsService.loggingIn();\n                this.oauthService.tryLogin()\n                    .then(() => this.initUserDetails())\n                    .catch(() => {\n                        this.applicationDetailsService.logOutUser();\n                        this._snackBar.open(\"Failed to get authorization from Discord.\",\n                            \"X\",\n                            {duration: 5 * 1000});\n                    });\n            }\n        }\n    }\n\n    private getCodePartsFromUrl(queryString: string): object {\n        if (!queryString || queryString.length === 0) {\n            return this.urlHelperService.getHashFragmentParams();\n        }\n\n        if (queryString.charAt(0) === \"?\") {\n            queryString = queryString.substr(1);\n        }\n\n        return this.urlHelperService.parseQueryString(queryString);\n    }\n\n    initUserDetails() {\n        this.discordService.getUserDetails()\n            .pipe(\n                retryWhen(error =>\n                    error.pipe(\n                        take(3),\n                        mergeMap((response) => {\n                            if (response.status == 429) {\n                                this._snackBar.open(`Retrying to retrieve your details after ${response.error.retry_after}ms...`,\n                                    \"X\",\n                                    {duration: 5 * 1000}\n                                );\n                                return timer(response.error.retry_after);\n                            } else if (response.status === 401) {\n                              return from(this.oauthService.refreshToken())\n                                  .pipe(catchError((error) => {\n                                      if (error.status === 401) {\n                                        this.oauthService.logOut();\n                                        this.loginToDiscord();\n                                        return of();\n                                      } else {\n                                        return throwError(error);\n                                      }\n                                }));\n                            } else {\n                                return throwError(response);\n                            }\n                        })\n                    )),\n                catchError(error => throwError(error)),\n                mergeMap(userDetails => this.discordService.getGuilds()\n                    .pipe(retryWhen(error =>\n                            error.pipe(\n                                take(3),\n                                mergeMap((response) => {\n                                    if (response.status == 429) {\n                                        this._snackBar.open(\n                                            `Retrying to retrieve your server details after ${response.error.retry_after}ms...`,\n                                            \"X\",\n                                            {duration: 5 * 1000}\n                                        );\n                                        return timer(response.error.retry_after);\n                                    } else {\n                                        return throwError(response);\n                                    }\n                                }))),\n                        map(response => {\n                            response.push(FREE_AGENT_GUILD);\n                            return {\n                                discordUser: userDetails,\n                                discordGuilds: response\n                            }\n                        }))),\n                mergeMap(discordDetails => this.userService.getUser(`${discordDetails.discordUser.id}`)\n                    .pipe(\n                        catchError(err => {\n                            if (err.status === 404 && err.error === \"Resource not found.\") {\n                                 const player: Player = {}\n                                return of(player);\n                            } else {\n                                return throwError(err);\n                            }\n                        }),\n                        map(response => {\n                            return {\n                                discordUser: discordDetails.discordUser,\n                                discordGuilds: discordDetails.discordGuilds,\n                                clashBotUserDetails: response\n                            }\n                        }))),\n                mergeMap(loginDetails => {\n                    if (!loginDetails.clashBotUserDetails.id) {\n                        return this.userService.createUser({\n                            id: `${loginDetails.discordUser.id}`,\n                            serverId: loginDetails.discordGuilds[0].id,\n                            name: loginDetails.discordUser.username,\n                        }).pipe(\n                                catchError(err => throwError(err)),\n                                mergeMap(response =>\n                                    this.applicationDetailsService.getApplicationDetails()\n                                        .pipe(\n                                            take(1),\n                                            map(appDetails =>\n                                                this.mapLoggedInApplicationDetails(appDetails,\n                                                    loginDetails.discordUser,\n                                                    loginDetails.discordGuilds,\n                                                    response)\n                                            )\n                                        )));\n                    } else if (!loginDetails.clashBotUserDetails.name ||\n                        loginDetails.discordUser.username !== loginDetails.clashBotUserDetails.name) {\n                        return this.userService.updateUser({\n                            id: `${loginDetails.discordUser.id}`,\n                            serverId: loginDetails.clashBotUserDetails.serverId\n                              ?? loginDetails.discordGuilds[0].id,\n                            name: loginDetails.discordUser.username,\n                        })\n                            .pipe(\n                                catchError(err => throwError(err)),\n                                mergeMap(response =>\n                                    this.applicationDetailsService.getApplicationDetails()\n                                        .pipe(\n                                            take(1),\n                                            map(appDetails =>\n                                                this.mapLoggedInApplicationDetails(appDetails,\n                                                    loginDetails.discordUser,\n                                                    loginDetails.discordGuilds,\n                                                    response)\n                                            )\n                                        ))\n                            );\n                    } else {\n                        return this.applicationDetailsService.getApplicationDetails()\n                            .pipe(\n                                take(1),\n                                map(appDetails =>\n                                    this.mapLoggedInApplicationDetails(appDetails,\n                                        loginDetails.discordUser,\n                                        loginDetails.discordGuilds,\n                                        loginDetails.clashBotUserDetails)\n                                ));\n                    }\n                }),\n                finalize(() => setTimeout(() => this.pageLoadingService.updateSubject(false), 300))\n            )\n            .subscribe(value => {\n                this.applicationDetailsService.setApplicationDetails(value);\n            }, () => this._snackBar\n                .open(\n                    \"Failed to log you in.\",\n                    \"X\",\n                    {duration: 5 * 1000}\n                )\n            );\n    }\n\n    mapLoggedInApplicationDetails(appDetails: ApplicationDetails,\n                                  discordUser: UserDetails,\n                                  guilds: DiscordGuild[],\n                                  clashBotUserDetails: Player) {\n        let guildMap = new Map<string, DiscordGuild>();\n        guilds.forEach((guild) => guildMap.set(guild.id, guild));\n        appDetails.userDetails = discordUser;\n        appDetails.userGuilds = guildMap;\n        appDetails.clashBotUserDetails = clashBotUserDetails;\n        appDetails.defaultGuild = guildMap.get(<string>clashBotUserDetails.serverId);\n        appDetails.loggedIn = true;\n        appDetails.loginStatus = LoginStatus.LOGGED_IN;\n        return appDetails;\n    }\n\n    loginToDiscord(): void {\n        this.oauthService.initLoginFlow();\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media only screen and (max-width: 700px) {\n  .main-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n}\n\n@media only screen and (min-width: 701px) {\n  .main-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    flex-wrap: wrap;\n    align-items: flex-start;\n  }\n}\n\n.clash-bot-welcome-card {\n  max-width: 25em;\n  min-width: 25em;\n  min-height: 12em;\n  margin-bottom: 1em;\n}\n\n.upcoming-tournament-card {\n  min-width: 25em;\n  min-height: 15em;\n}\n\n.tournament-calendar-card {\n  min-width: 25em;\n  min-height: 15em;\n  margin-top: 1em;\n}\n\n#WelcomeMessage-PreseasonNotification {\n  font-size: 1.05em;\n  border: 0.35em outset #3f51b5;\n  -webkit-box-shadow: 5px 5px 15px rgb(0 0 0 / 40%);\n  font-style: oblique;\n}\n\n.welcome-message-container {\n  max-width: 500px;\n  padding-bottom: 0.5em;\n}\n\n.clash-bot-welcome-dashboard-buttons-container {\n  display: flex;\n}\n\n.demo-inline-calendar-card {\n  min-width: 200px;\n}\n\n.header {\n  font-weight: bold;\n}\n",
                    "styleUrl": "./welcome-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "discordService",
                        "type": "DiscordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tournamentService",
                        "type": "TournamentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "urlHelperService",
                        "type": "UrlHelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "oauthService",
                        "type": "OAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "discordService",
                        "type": "DiscordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationDetailsService",
                        "type": "ApplicationDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageLoadingService",
                        "type": "PageLoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tournamentService",
                        "type": "TournamentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "urlHelperService",
                        "type": "UrlHelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\">\n  <mat-card class=\"clash-bot-welcome-card\">\n    <mat-card-title id=\"WelcomeMessage-Title\">Welcome to Clash-Bot!</mat-card-title>\n    <mat-card-content id=\"WelcomeMessage-Message\">\n      <p>This site is here to help you and your\n        friends quickly group up through\n        discord to compete in a League of\n        Legends Clash Tournament.</p>\n      <p id=\"WelcomeMessage-LoginMessage\" *ngIf=\"NOT_LOGGED_IN === ( $applicationDetailsServiceObs | async )?.loginStatus\">\n        Please login to discord using the button below before continuing.\n      </p>\n      <p *ngIf=\"LOGGED_IN === ( $applicationDetailsServiceObs | async )?.loginStatus\">Please use the menu above to see the available content.</p>\n    </mat-card-content>\n    <mat-divider inset></mat-divider>\n    <mat-card-actions class=\"clash-bot-welcome-dashboard-buttons-container\">\n      <button mat-raised-button id=\"WelcomeMessage-DiscordLogin-Btn\" (click)=\"loginToDiscord()\"\n              *ngIf=\"NOT_LOGGED_IN === ( $applicationDetailsServiceObs | async )?.loginStatus\" color=\"primary\" align=\"end\">\n        <mat-icon>discord</mat-icon>\n        <span>Login to Discord</span>\n      </button>\n      <a mat-raised-button href=\"https://top.gg/bot/837629412328734740\" target=\"_blank\">Add Discord bot to Server</a>\n    </mat-card-actions>\n    <mat-card-footer *ngIf=\"LOGGING_IN === ( $applicationDetailsServiceObs | async )?.loginStatus\">\n      <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n    </mat-card-footer>\n  </mat-card>\n  <app-upcoming-tournament-details-card class=\"upcoming-tournament-card\" *ngIf=\"dataLoaded && tournaments\" [tournaments]=\"tournaments\"></app-upcoming-tournament-details-card>\n  <app-clash-tournament-calendar class=\"tournament-calendar-card\" id=\"WelcomeMessage-Calendar\" [daysSelected]=\"tournamentDays\" *ngIf=\"dataLoaded\"></app-clash-tournament-calendar>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-2736f37771f08e0c54b9c31f9b262c6e68b4b124b3df54c07f661e4466d9b0390091e6f13fa090b6ee0d232450a1978e51b2f7ab7cb872eee5c7058b1d0be06b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule, SecurityContext} from \"@angular/core\";\nimport {BrowserModule} from \"@angular/platform-browser\";\n\nimport {AppRoutingModule} from \"./app-routing.module\";\nimport {AppComponent} from \"./app.component\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport {WelcomeDashboardComponent} from \"./pages/welcome-dashboard/welcome-dashboard.component\";\nimport {MatDatepickerModule} from \"@angular/material/datepicker\";\nimport {MatNativeDateModule} from \"@angular/material/core\";\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {ClashTournamentCalendarComponent} from \"./clash-tournament-calendar/clash-tournament-calendar.component\";\nimport {ClashTournamentCalendarHeaderComponent} from \"./clash-tournament-calendar-header/clash-tournament-calendar-header.component\";\nimport {OAuthModule, OAuthStorage} from \"angular-oauth2-oidc\";\nimport {DiscordInterceptor} from \"./services/discord-interceptor.service\";\nimport {DiscordService} from \"./services/discord.service\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {UpcomingTournamentDetailsCardComponent} from \"./upcoming-tournament-details-card/upcoming-tournament-details-card.component\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {ReleaseNotificationDialogComponent} from \"./dialogs/release-notification-dialog/release-notification-dialog.component\";\nimport {MarkdownModule} from \"ngx-markdown\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {PageLoadingService} from \"./services/page-loading.service\";\nimport {SharedModule} from \"./shared/shared.module\";\nimport {ApiModule, BASE_PATH} from \"clash-bot-service-api\"\nimport {environment} from \"../environments/environment\";\nimport {ProfileIconComponent} from \"./profile-icon/profile-icon.component\";\n\nexport function storageFactory(): OAuthStorage {\n  return localStorage;\n}\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        WelcomeDashboardComponent,\n        ClashTournamentCalendarComponent,\n        ClashTournamentCalendarHeaderComponent,\n        UpcomingTournamentDetailsCardComponent,\n        ReleaseNotificationDialogComponent,\n        ProfileIconComponent\n    ],\n    imports: [\n        ApiModule,\n        BrowserModule,\n        HttpClientModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        MatCardModule,\n        MatDialogModule,\n        MatButtonModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatSnackBarModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatMenuModule,\n        MatProgressBarModule,\n        MatListModule,\n        MatSlideToggleModule,\n        ReactiveFormsModule,\n        SharedModule,\n        OAuthModule.forRoot(),\n        MarkdownModule.forRoot({\n            sanitize: SecurityContext.HTML\n        })\n    ],\n    providers: [\n        DiscordService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: DiscordInterceptor,\n            multi: true\n        },\n        {\n          provide: OAuthStorage,\n          useFactory: storageFactory\n        },\n        PageLoadingService,\n        {\n            provide: BASE_PATH, useValue: environment.basePath\n        }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DiscordInterceptor"
                        },
                        {
                            "name": "DiscordService"
                        },
                        {
                            "name": "PageLoadingService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ClashTournamentCalendarComponent"
                        },
                        {
                            "name": "ClashTournamentCalendarHeaderComponent"
                        },
                        {
                            "name": "ProfileIconComponent"
                        },
                        {
                            "name": "ReleaseNotificationDialogComponent"
                        },
                        {
                            "name": "UpcomingTournamentDetailsCardComponent"
                        },
                        {
                            "name": "WelcomeDashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-97d33f1d6165b7e4afcd1fb70bfcdfa2522f1221f4d7635aca5cc3e9de537511b6d45d448cab1ccc9267423bab8c37f40a306e8d1d0e0545dd2447229c1537f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {WelcomeDashboardComponent} from \"./pages/welcome-dashboard/welcome-dashboard.component\";\n\nlet routes: Routes = [\n  {path: \"\", component: WelcomeDashboardComponent},\n  {path: \"teams\", loadChildren: () => \"import(\\\"./pages/teams-dashboard/teams.module\\\").then(m => m.TeamsModule)\"},\n  {path: \"user-profile\", loadChildren: () => \"import(\\\"./pages/user-profile/user-profile.module\\\").then(m => m.UserProfileModule)\"},\n  {path: \"walkthrough\", loadChildren: () => \"import(\\\"./pages/clashbot-walkthrough/clashbot-walkthrough.module\\\").then(m => m.ClashbotWalkthroughModule)\"},\n  {path: \"**\", redirectTo: \"\"}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClashbotWalkthroughModule",
            "id": "module-ClashbotWalkthroughModule-eb2cf7884d47b94bcb65842ce0f472e752ff3c8a35d90f516f95c673e0b5047be9e41cb92c9b21e222b164a80faa066fa08898a6d5ac35f24b2e75bbafe22052",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {ClashbotWalkthroughComponent} from \"./clashbot-walkthrough.component\";\nimport {MatStepperModule} from \"@angular/material/stepper\";\nimport {ClashbotWalkthroughRoutingModule} from \"./clashbot-walkthrough-routing.module\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {TeamsModule} from \"../teams-dashboard/teams.module\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {MatIconRegisteryModule} from \"../teams-dashboard/component/mat-icon-registery.module\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\n\n\n\n@NgModule({\n  declarations: [\n      ClashbotWalkthroughComponent\n  ],\n  imports: [\n    CommonModule,\n    MatStepperModule,\n    ClashbotWalkthroughRoutingModule,\n    MatButtonModule,\n    MatIconModule,\n    TeamsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatIconRegisteryModule,\n    MatExpansionModule\n  ]\n})\nexport class ClashbotWalkthroughModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClashbotWalkthroughComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ClashbotWalkthroughRoutingModule"
                        },
                        {
                            "name": "MatIconRegisteryModule"
                        },
                        {
                            "name": "TeamsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ClashbotWalkthroughRoutingModule",
            "id": "module-ClashbotWalkthroughRoutingModule-03aeb64205069483ab8cb28f80af86a20e1b951a0a10e395afb7a383bbe9d8cd5996bfd8ce51bcadaab69d256450ca396c293acce1074a2b3bc756b35bd8a5bd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ClashbotWalkthroughComponent} from \"./clashbot-walkthrough.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ClashbotWalkthroughComponent\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ClashbotWalkthroughRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MatIconRegisteryModule",
            "id": "module-MatIconRegisteryModule-d08da3046b847d814c437945748c4b5e0f3d847468812ab50dcac0023036b39a2ce4c24b19281de8e80a68b73ed95ab96a47d96188a7a6efb2be595f9f1fe646",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/teams-dashboard/component/mat-icon-registery.module.ts",
            "methods": [],
            "sourceCode": "import {HttpClientModule} from \"@angular/common/http\";\nimport {MatIconRegistry} from \"@angular/material/icon\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {NgModule} from \"@angular/core\";\n\n@NgModule({\n  imports: [\n    HttpClientModule\n  ]\n})\nexport class MatIconRegisteryModule {\n  constructor(private matIconRegistry: MatIconRegistry,\n              private sanitizer: DomSanitizer) {\n    this.matIconRegistry.addSvgIcon(\"league-top\",\n      this.sanitizer.bypassSecurityTrustResourceUrl(\"assets/top.svg\"));\n    this.matIconRegistry.addSvgIcon(\"league-mid\",\n      this.sanitizer.bypassSecurityTrustResourceUrl(\"assets/mid.svg\"));\n    this.matIconRegistry.addSvgIcon(\"league-jg\",\n      this.sanitizer.bypassSecurityTrustResourceUrl(\"assets/jg.svg\"));\n    this.matIconRegistry.addSvgIcon(\"league-bot\",\n      this.sanitizer.bypassSecurityTrustResourceUrl(\"assets/bot.svg\"));\n    this.matIconRegistry.addSvgIcon(\"league-supp\",\n      this.sanitizer.bypassSecurityTrustResourceUrl(\"assets/supp.svg\"));\n  }\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-f68796ed51a663159b9dfef3279e91af00e3cc43aaa7cbe8e276f69fe892016591286077b47f1864a1f5fe873964198be1baed7800ceab7087367b8ce780ca83",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {KebabCasePipe} from \"./kebab-case.pipe\";\nimport {ImageFallbackDirective} from \"./image-fallback.directive\";\nimport {SpinnerComponent} from \"./spinner/spinner.component\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {TournamentNameTransformerPipe} from \"./tournament-name-transformer.pipe\";\n\n@NgModule({\n    declarations: [\n        KebabCasePipe,\n        ImageFallbackDirective,\n        SpinnerComponent,\n        TournamentNameTransformerPipe\n    ],\n    imports: [\n        MatProgressSpinnerModule,\n        CommonModule\n    ],\n    exports: [\n        KebabCasePipe,\n        ImageFallbackDirective,\n        SpinnerComponent,\n        TournamentNameTransformerPipe\n    ]\n})\nexport class SharedModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImageFallbackDirective"
                        },
                        {
                            "name": "KebabCasePipe"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TournamentNameTransformerPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImageFallbackDirective"
                        },
                        {
                            "name": "KebabCasePipe"
                        },
                        {
                            "name": "SpinnerComponent"
                        },
                        {
                            "name": "TournamentNameTransformerPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamsModule",
            "id": "module-TeamsModule-85a987ad89f1b2ab9b3e8f8cd03a9c96b7bd769e6c4ad511eef6b5382bb4595c3c90090b1f90addd289875dac40b06e26fb3e8535329551682c516981d873215",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/teams-dashboard/teams.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {TeamsRoutingModule} from \"./teams-routing.module\";\nimport {TeamsDashboardComponent} from \"./teams-dashboard/teams-dashboard.component\";\nimport {MatChipsModule} from \"@angular/material/chips\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {TeamCardComponent} from \"./component/team-card/team-card.component\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatDialogModule} from \"@angular/material/dialog\";\nimport {ConfirmationDialogComponent} from \"../../dialogs/confirmation-dialog/confirmation-dialog.component\";\nimport {MatOptionModule} from \"@angular/material/core\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {TeamsDashboardHelpDialogComponent} from \"./component/teams-dashboard-help-dialog/teams-dashboard-help-dialog.component\";\nimport {MatTableModule} from \"@angular/material/table\";\nimport {TeamCardPlayerDetailsComponent} from \"./component/team-card/team-card-player-details/team-card-player-details.component\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {TeamsTentativeTableComponent} from \"./component/teams-tentative-table/teams-tentative-table.component\";\nimport {NewTeamCardComponent} from \"./component/new-team-card/new-team-card.component\";\nimport {TeamsDashboardViewComponent} from \"./teams-dashboard/view/teams-dashboard-view.component\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {MatSidenavModule} from \"@angular/material/sidenav\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatBadgeModule} from \"@angular/material/badge\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\n\n\n@NgModule({\n    declarations: [\n        TeamsDashboardComponent,\n        TeamCardComponent,\n        ConfirmationDialogComponent,\n        TeamsDashboardHelpDialogComponent,\n        TeamCardPlayerDetailsComponent,\n        TeamsTentativeTableComponent,\n        NewTeamCardComponent,\n        TeamsDashboardViewComponent\n    ],\n    exports: [\n        TeamCardComponent,\n        NewTeamCardComponent,\n        TeamsTentativeTableComponent\n    ],\n    imports: [\n        CommonModule,\n        TeamsRoutingModule,\n        MatChipsModule,\n        MatProgressSpinnerModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatCardModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatOptionModule,\n        MatSelectModule,\n        MatTableModule,\n        MatExpansionModule,\n        SharedModule,\n        MatProgressBarModule,\n        MatSidenavModule,\n        MatListModule,\n        MatBadgeModule,\n        MatTooltipModule\n    ]\n})\nexport class TeamsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "NewTeamCardComponent"
                        },
                        {
                            "name": "TeamCardComponent"
                        },
                        {
                            "name": "TeamCardPlayerDetailsComponent"
                        },
                        {
                            "name": "TeamsDashboardComponent"
                        },
                        {
                            "name": "TeamsDashboardHelpDialogComponent"
                        },
                        {
                            "name": "TeamsDashboardViewComponent"
                        },
                        {
                            "name": "TeamsTentativeTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TeamsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NewTeamCardComponent"
                        },
                        {
                            "name": "TeamCardComponent"
                        },
                        {
                            "name": "TeamsTentativeTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TeamsRoutingModule",
            "id": "module-TeamsRoutingModule-85ace19810d61cae453d5367d47297132a4d708241c3d4195e8079fd68658cc37d60b0816441d6235cf388a4728f92802b7e9fd16bb355636b0e2404bce4f817",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/teams-dashboard/teams-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {TeamsDashboardComponent} from \"./teams-dashboard/teams-dashboard.component\";\nimport {RouterModule, Routes} from \"@angular/router\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TeamsDashboardComponent\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TeamsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserProfileModule",
            "id": "module-UserProfileModule-a3c3b327de80bfebef83e4248c426fb3e017d0abd55061e26bfe07ed4e5b6a02e88774ca129b972486e90956b02b392bddb04ae41137001ccdf09b41d3416a70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/user-profile/user-profile.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {UserProfileComponent} from \"./user-profile.component\";\nimport {UserProfileRoutingModule} from \"./user-profile-routing.module\";\nimport {MatExpansionModule} from \"@angular/material/expansion\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatDatepickerModule} from \"@angular/material/datepicker\";\nimport {MatListModule} from \"@angular/material/list\";\nimport {MatChipsModule} from \"@angular/material/chips\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {MatOptionModule} from \"@angular/material/core\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {MatRadioModule} from \"@angular/material/radio\";\nimport {MatSliderModule} from \"@angular/material/slider\";\nimport {MatSlideToggleModule} from \"@angular/material/slide-toggle\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatSelectModule} from \"@angular/material/select\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {SharedModule} from \"../../shared/shared.module\";\n\n@NgModule({\n    declarations: [UserProfileComponent],\n    imports: [\n        CommonModule,\n        UserProfileRoutingModule,\n        MatExpansionModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatDatepickerModule,\n        MatListModule,\n        MatChipsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatOptionModule,\n        MatAutocompleteModule,\n        MatRadioModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        MatButtonModule,\n        MatSelectModule,\n        MatProgressBarModule,\n        SharedModule\n    ],\n})\nexport class UserProfileModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserProfileRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserProfileRoutingModule",
            "id": "module-UserProfileRoutingModule-24507caf76d7dba65f10498f9197fa38adff60e9d4ad8427a602c5620621d3db14ff3a41abe56cd667da24f9180dae03944071f397867ce5d6425d21efad83cf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/user-profile/user-profile-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {UserProfileComponent} from \"./user-profile.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: UserProfileComponent\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserProfileRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Bot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BotWithDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "createGuild",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string, id: string) => {\n    return {\n        features: [],\n        icon: \"\",\n        id,\n        name,\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    };\n}"
            },
            {
                "name": "createMockFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string, id: string, numberOfTeams: number = 0) => {\n    return {\n        value: createMockGuild(name, id),\n        type: FilterType.SERVER,\n        state: false,\n        id: id,\n        numberOfTeams\n    }\n}"
            },
            {
                "name": "createMockGuild",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string, id: string) => {\n  return {\n    features: [],\n    icon: \"\",\n    id,\n    name,\n    owner: false,\n    permissions: 0,\n    permissions_new: \"\"\n  }\n}"
            },
            {
                "name": "createMockGuild",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string, id: string) => {\n    return {\n        features: [],\n        icon: \"\",\n        id,\n        name,\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    }\n}"
            },
            {
                "name": "CreateNewTeam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CurrentPlayerWithChampions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyBot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyJg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyMid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptySupp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyTop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.int.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  discordClientId: \"839586949748228156\",\n  version: \"v4.0.1\",\n  gTag: undefined,\n  basePath: \"http://localhost:8080/api/v2\",\n  authPath: \"http://localhost:8082/auth/token\"\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  discordClientId: \"837629412328734740\",\n  gTag: \"G-3V8T97537S\",\n  version: \"--APP-VERSION--\",\n  basePath: \"api/v2\",\n  authPath: \"/auth/token\"\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  discordClientId: \"839586949748228156\",\n  version: \"v4.0.1\",\n  gTag: false,\n  basePath: \"http://localhost:8080/api/v2\",\n  authPath: \"http://localhost:8082/auth/token\"\n}"
            },
            {
                "name": "Failed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FREE_AGENT_GUILD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/interfaces/clash-bot-constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "DiscordGuild",
                "defaultValue": "{\n    id: \"-1\",\n    name: \"Free Agents\",\n    icon: \"\",\n    owner: false,\n    permissions: 0,\n    features: [],\n    permissions_new: \"0\"\n}"
            },
            {
                "name": "gtag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/google-analytics.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Function"
            },
            {
                "name": "guildMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<string, DiscordGuild>()"
            },
            {
                "name": "Jg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "JgWithDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile-icon/profile-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile-icon/profile-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Mid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MidWithDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "myCustomTooltipDefaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatTooltipDefaultOptions",
                "defaultValue": "{\n  showDelay: 0,\n  hideDelay: 1000,\n  touchendHideDelay: 1000,\n}",
                "rawdescription": "Custom options the configure the tooltip's default show/hide delays.",
                "description": "<p>Custom options the configure the tooltip&#39;s default show/hide delays.</p>\n"
            },
            {
                "name": "NoData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoDates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryWithChampions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryWithoutChampions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Successful",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Supp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SuppWithDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClashTournamentCalendarComponent>",
                "defaultValue": "(args: ClashTournamentCalendarComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/profile-icon/profile-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProfileIconComponent>",
                "defaultValue": "(args: ProfileIconComponent) => ({\n    props: {\n        ...args,\n        goToSettingsEvent: action(\"goToSettingsEvent\"),\n        logOutEvent: action(\"logOutEvent\"),\n        toggleDarkModeEvent: action(\"toggleDarkModeEvent\")\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<UpcomingTournamentDetailsCardComponent>",
                "defaultValue": "(args: UpcomingTournamentDetailsCardComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ClashbotWalkthroughComponent>",
                "defaultValue": "(args: ClashbotWalkthroughComponent) => ({\n    props: {\n        ...args\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpinnerComponent>",
                "defaultValue": "(args: SpinnerComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NewTeamCardComponent>",
                "defaultValue": "(args: NewTeamCardComponent) => ({\n    props: {\n      eligibleTournaments: args.eligibleTournaments,\n      tournamentControl: new FormControl(\"\", Validators.required),\n      roleControl: new FormControl(\"\", Validators.required),\n      rolesAsString: [\"Top\", \"Mid\", \"Jg\", \"Bot\", \"Supp\"],\n      createNewTeamEvent: action(\"createNewTeamEvent\")\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamCardComponent>",
                "defaultValue": "(args: TeamCardComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamsTentativeTableComponent>",
                "defaultValue": "(args: TeamsTentativeTableComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamsDashboardViewComponent>",
                "defaultValue": "(args: TeamsDashboardViewComponent) => ({\n    props: {\n        ...args,\n        createTeamEvent: action(\"createTeamEvent\"),\n        unregisterFromTeamEvent: action(\"unregisterFromTeamEvent\"),\n        registerForTeamEvent: action(\"registerForTeamEvent\"),\n        tentativeRegisterEvent: action(\"tentativeRegisterEvent\"),\n        filterTeamEvent: action(\"filterTeamEvent\"),\n    },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TeamCardPlayerDetailsComponent>",
                "defaultValue": "(args: TeamCardPlayerDetailsComponent) => ({\n    props: {\n        ...args,\n        apiVersion: \"12.8.1\",\n        registerUserForRole: action(\"registerUserForRole\"),\n        unregisterUserForRole: action(\"unregisterUserForRole\")\n    },\n})"
            },
            {
                "name": "TopWithDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TwentyServers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "storageFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "OAuthStorage"
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ClashBotTeamEventBehavior",
                "childs": [
                    {
                        "name": "ADDED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "REMOVED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "UPDATED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/interfaces/clash-bot-team-event.ts"
            },
            {
                "name": "FilterType",
                "childs": [
                    {
                        "name": "SERVER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TOURNAMENT_NAME",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TOURNAMENT_DAY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/interfaces/filter-type.ts"
            },
            {
                "name": "LoginStatus",
                "childs": [
                    {
                        "name": "NOT_LOGGED_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NOT_LOGGED_IN"
                    },
                    {
                        "name": "LOGGING_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LOGGING_IN"
                    },
                    {
                        "name": "LOGGED_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LOGGED_IN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/login-status.ts"
            }
        ],
        "groupedVariables": {
            "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts": [
                {
                    "name": "Bot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "createMockGuild",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string, id: string) => {\n  return {\n    features: [],\n    icon: \"\",\n    id,\n    name,\n    owner: false,\n    permissions: 0,\n    permissions_new: \"\"\n  }\n}"
                },
                {
                    "name": "Jg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Mid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Supp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamCardComponent>",
                    "defaultValue": "(args: TeamCardComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts": [
                {
                    "name": "BotWithDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CurrentPlayerWithChampions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptyBot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptyJg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptyMid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptySupp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptyTop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "JgWithDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MidWithDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryWithChampions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryWithoutChampions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SuppWithDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamCardPlayerDetailsComponent>",
                    "defaultValue": "(args: TeamCardPlayerDetailsComponent) => ({\n    props: {\n        ...args,\n        apiVersion: \"12.8.1\",\n        registerUserForRole: action(\"registerUserForRole\"),\n        unregisterUserForRole: action(\"unregisterUserForRole\")\n    },\n})"
                },
                {
                    "name": "TopWithDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts": [
                {
                    "name": "createGuild",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string, id: string) => {\n    return {\n        features: [],\n        icon: \"\",\n        id,\n        name,\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    };\n}"
                },
                {
                    "name": "guildMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Map<string, DiscordGuild>()"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClashbotWalkthroughComponent>",
                    "defaultValue": "(args: ClashbotWalkthroughComponent) => ({\n    props: {\n        ...args\n    },\n})"
                }
            ],
            "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts": [
                {
                    "name": "createMockFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string, id: string, numberOfTeams: number = 0) => {\n    return {\n        value: createMockGuild(name, id),\n        type: FilterType.SERVER,\n        state: false,\n        id: id,\n        numberOfTeams\n    }\n}"
                },
                {
                    "name": "createMockGuild",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string, id: string) => {\n    return {\n        features: [],\n        icon: \"\",\n        id,\n        name,\n        owner: false,\n        permissions: 0,\n        permissions_new: \"\"\n    }\n}"
                },
                {
                    "name": "CreateNewTeam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamsDashboardViewComponent>",
                    "defaultValue": "(args: TeamsDashboardViewComponent) => ({\n    props: {\n        ...args,\n        createTeamEvent: action(\"createTeamEvent\"),\n        unregisterFromTeamEvent: action(\"unregisterFromTeamEvent\"),\n        registerForTeamEvent: action(\"registerForTeamEvent\"),\n        tentativeRegisterEvent: action(\"tentativeRegisterEvent\"),\n        filterTeamEvent: action(\"filterTeamEvent\"),\n    },\n})"
                },
                {
                    "name": "TwentyServers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/environments/environment.int.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.int.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  discordClientId: \"839586949748228156\",\n  version: \"v4.0.1\",\n  gTag: undefined,\n  basePath: \"http://localhost:8080/api/v2\",\n  authPath: \"http://localhost:8082/auth/token\"\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  discordClientId: \"837629412328734740\",\n  gTag: \"G-3V8T97537S\",\n  version: \"--APP-VERSION--\",\n  basePath: \"api/v2\",\n  authPath: \"/auth/token\"\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  discordClientId: \"839586949748228156\",\n  version: \"v4.0.1\",\n  gTag: false,\n  basePath: \"http://localhost:8080/api/v2\",\n  authPath: \"http://localhost:8082/auth/token\"\n}"
                }
            ],
            "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts": [
                {
                    "name": "Failed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Successful",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TeamsTentativeTableComponent>",
                    "defaultValue": "(args: TeamsTentativeTableComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/interfaces/clash-bot-constants.ts": [
                {
                    "name": "FREE_AGENT_GUILD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/interfaces/clash-bot-constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DiscordGuild",
                    "defaultValue": "{\n    id: \"-1\",\n    name: \"Free Agents\",\n    icon: \"\",\n    owner: false,\n    permissions: 0,\n    features: [],\n    permissions_new: \"0\"\n}"
                }
            ],
            "src/app/google-analytics.service.ts": [
                {
                    "name": "gtag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/google-analytics.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function"
                }
            ],
            "src/app/profile-icon/profile-icon.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile-icon/profile-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile-icon/profile-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/profile-icon/profile-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProfileIconComponent>",
                    "defaultValue": "(args: ProfileIconComponent) => ({\n    props: {\n        ...args,\n        goToSettingsEvent: action(\"goToSettingsEvent\"),\n        logOutEvent: action(\"logOutEvent\"),\n        toggleDarkModeEvent: action(\"toggleDarkModeEvent\")\n    },\n})"
                }
            ],
            "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.component.ts": [
                {
                    "name": "myCustomTooltipDefaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTooltipDefaultOptions",
                    "defaultValue": "{\n  showDelay: 0,\n  hideDelay: 1000,\n  touchendHideDelay: 1000,\n}",
                    "rawdescription": "Custom options the configure the tooltip's default show/hide delays.",
                    "description": "<p>Custom options the configure the tooltip&#39;s default show/hide delays.</p>\n"
                }
            ],
            "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts": [
                {
                    "name": "NoDates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ClashTournamentCalendarComponent>",
                    "defaultValue": "(args: ClashTournamentCalendarComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<UpcomingTournamentDetailsCardComponent>",
                    "defaultValue": "(args: UpcomingTournamentDetailsCardComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/shared/spinner/spinner.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpinnerComponent>",
                    "defaultValue": "(args: SpinnerComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NewTeamCardComponent>",
                    "defaultValue": "(args: NewTeamCardComponent) => ({\n    props: {\n      eligibleTournaments: args.eligibleTournaments,\n      tournamentControl: new FormControl(\"\", Validators.required),\n      roleControl: new FormControl(\"\", Validators.required),\n      rolesAsString: [\"Top\", \"Mid\", \"Jg\", \"Bot\", \"Supp\"],\n      createNewTeamEvent: action(\"createNewTeamEvent\")\n    },\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "storageFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "OAuthStorage"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/interfaces/clash-bot-team-event.ts": [
                {
                    "name": "ClashBotTeamEventBehavior",
                    "childs": [
                        {
                            "name": "ADDED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "REMOVED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "UPDATED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/interfaces/clash-bot-team-event.ts"
                }
            ],
            "src/app/interfaces/filter-type.ts": [
                {
                    "name": "FilterType",
                    "childs": [
                        {
                            "name": "SERVER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TOURNAMENT_NAME",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TOURNAMENT_DAY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/interfaces/filter-type.ts"
                }
            ],
            "src/app/login-status.ts": [
                {
                    "name": "LoginStatus",
                    "childs": [
                        {
                            "name": "NOT_LOGGED_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NOT_LOGGED_IN"
                        },
                        {
                            "name": "LOGGING_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LOGGING_IN"
                        },
                        {
                            "name": "LOGGED_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LOGGED_IN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/login-status.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "WelcomeDashboardComponent"
                    },
                    {
                        "path": "teams",
                        "loadChildren": "./pages/teams-dashboard/teams.module#TeamsModule"
                    },
                    {
                        "path": "user-profile",
                        "loadChildren": "./pages/user-profile/user-profile.module#UserProfileModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/user-profile/user-profile-routing.module.ts",
                                        "module": "UserProfileRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UserProfileComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UserProfileModule"
                            }
                        ]
                    },
                    {
                        "path": "walkthrough",
                        "loadChildren": "./pages/clashbot-walkthrough/clashbot-walkthrough.module#ClashbotWalkthroughModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough-routing.module.ts",
                                        "module": "ClashbotWalkthroughRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ClashbotWalkthroughComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ClashbotWalkthroughModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "storageFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar-header/clash-tournament-calendar-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClashTournamentCalendarHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar/clash-tournament-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClashTournamentCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/clash-tournament-calendar/clash-tournament-calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dialogs/release-notification-dialog/release-notification-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReleaseNotificationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/google-analytics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoogleAnalyticsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/google-analytics.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gtag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/application-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationDetails",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/championData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChampionData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FREE_AGENT_GUILD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-generic-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotGenericResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-team-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotTeamEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-user-register.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashBotUserRegister",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-bot-user-register.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashTeam",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerDetails",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-team.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/clash-tournaments.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClashTournaments",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/create-new-team-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateNewTeamDetails",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/dialog-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/discord-guild.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DiscordGuild",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/routing-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RoutingDetails",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/server.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Server",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/team-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TeamFilter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/team-ui-wrapper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlayerUiWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/team-ui-wrapper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TeamUiWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/tentative-record.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TentativeRecord",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/user-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetails",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClashbotWalkthroughComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockApplicationDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createGuild",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "guildMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/clashbot-walkthrough/clashbot-walkthrough.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewTeamCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/new-team-card/new-team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamCardPlayerDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BotWithDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CurrentPlayerWithChampions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyBot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyJg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyMid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptySupp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyTop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JgWithDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MidWithDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryWithChampions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryWithoutChampions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuppWithDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card-player-details/team-card-player-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopWithDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockGuild",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Jg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Supp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/team-card/team-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/teams-dashboard-help-dialog/teams-dashboard-help-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsDashboardHelpDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsTentativeTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Failed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Successful",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/component/teams-tentative-table/teams-tentative-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/teams-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsDashboardComponent",
                "coveragePercent": 2,
                "coverageCount": "1/39",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsDashboardViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myCustomTooltipDefaults",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMockGuild",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CreateNewTeam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/teams-dashboard/teams-dashboard/view/teams-dashboard-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TwentyServers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/welcome-dashboard/welcome-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-icon/profile-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-icon/profile-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-icon/profile-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/profile-icon/profile-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/application-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dev-mode.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DevModeService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/discord-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "DiscordInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/discord.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DiscordService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/page-loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PageLoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/riot-ddragon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RiotDdragonService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/teams-websocket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamsWebsocketService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/image-fallback.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ImageFallbackDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/kebab-case.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "KebabCasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/tournament-name-transformer.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TournamentNameTransformerPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/upcoming-tournament-details-card/upcoming-tournament-details-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpcomingTournamentDetailsCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/upcoming-tournament-details-card/upcoming-tournament-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.int.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}