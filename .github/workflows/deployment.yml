name: Deployment - Clash Bot WebApp

on:
  push:
    tags:
      - 'v*'

jobs:
  check-applications:
    runs-on: ubuntu-latest

    outputs:
      deploy-ui: ${{ steps.check-apps.outputs.uiUpdate }}
      deploy-service: ${{ steps.check-apps.outputs.serviceUpdate }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run shell to check which App to deploy
        id: check-apps
        run: |
          chmod 755 ./check_diff_between_tags.sh
          ./check_diff_between_tags.sh

      - name: Check Output for Service
        run: echo ${{ steps.check-apps.outputs.serviceUpdate }}

      - name: Check Output for UI
        run: echo ${{ steps.check-apps.outputs.uiUpdate }}

  deploy-service:
    needs: check-applications
    if: ${{ needs.check-applications.outputs.deploy-service == 'true'}}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Service
        run: |
          echo "Running Service!"
          ls -lha

  build-ui:
    needs: check-applications
    if: ${{ needs.check-applications.outputs.deploy-ui == 'true'}}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy UI
        run: echo "Running UI!"

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Dependencies
        working-directory: ./ClashBot-UI
        run: npm i

      - name: Build distribution
        working-directory: ./ClashBot-UI
        run: npm run-script build

      - name: Archive dist
        uses: actions/upload-artifact@v2
        working-directory: ./ClashBot-UI
        with:
          name: dist
          if-no-files-found: error
          path: |
            dist/Clash-Bot

  deploy-ui:
    needs: build-ui
    runs-on: ubuntu-latest

    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Remove old files from S3
        run: aws s3 rm ${{ secrets.S3_BUCKET_NAME }} --recursive

      - name: Push to s3
        working-directory: dist
        run: aws s3 cp . ${{ secrets.S3_BUCKET_NAME }} --recursive
