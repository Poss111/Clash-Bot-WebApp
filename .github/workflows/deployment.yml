name: Deployment - Clash Bot WebApp

on:
  push:
    tags:
      - 'v*'

jobs:
  check-applications:
    runs-on: ubuntu-latest

    outputs:
      deploy-ui: ${{ steps.check-apps.outputs.uiUpdate }}
      deploy-service: ${{ steps.check-apps.outputs.serviceUpdate }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run shell to check which App to deploy
        id: check-apps
        run: |
          chmod 755 ./check_diff_between_tags.sh
          ./check_diff_between_tags.sh

      - name: Check Output for Service
        run: echo ${{ steps.check-apps.outputs.serviceUpdate }}

      - name: Check Output for UI
        run: echo ${{ steps.check-apps.outputs.uiUpdate }}

  build-service:
    needs: check-applications
    if: ${{ needs.check-applications.outputs.deploy-service == 'true'}}
    runs-on: ubuntu-latest

    steps:
      - name: Build In Progress Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - Service Build - Notification'
          message: 'Build in progress...'
          message-color: '16750902'

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Archive service artifact
        uses: actions/upload-artifact@v2
        with:
          name: service
          if-no-files-found: error
          path: ClashBot-Service

  deploy-service:
    needs: build-service
    runs-on: ubuntu-latest

    steps:
      - name: Deployment In Progress Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - Service Deployment - Notification'
          message: 'Deployment in progress...'
          message-color: '16750902'

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: service

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Clash-Bot image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: poss11111/clash-bot-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update task-definition file for deployment
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: server-config/task-def.json
          container-name: clash-bot-service
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Clash-Bot
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: clash-bot-service
          cluster: clash-bot
          wait-for-service-stability: true

      - name: Deployment Succeeded Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        if: ${{ success() }}
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - Service Deployment - Notification'
          message: 'Successfully deployed Clash Bot WebApp - Service!'
          message-color: '65345'

      - name: Deployment Failed Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        if: ${{ failure() }}
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - Service Deployment - Notification'
          message: 'Failed to deploy Clash Bot WebApp - Service!'
          message-color: '16711680'

  build-ui:
    needs: check-applications
    if: ${{ needs.check-applications.outputs.deploy-ui == 'true'}}
    runs-on: ubuntu-latest

    steps:
      - name: Build In Progress Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - UI Build - Notification'
          message: 'Build in progress...'
          message-color: '16750902'

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Dependencies
        working-directory: ./ClashBot-UI
        run: npm i

      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "--APP-VERSION--"
          replace: "${GITHUB_REF##*/}"
          include: "ClashBot-UI/src/environments/environment.prod.ts"

      - name: Build distribution
        working-directory: ./ClashBot-UI
        run: npm run-script build

      - name: Archive dist
        uses: actions/upload-artifact@v2
        with:
          name: dist
          if-no-files-found: error
          path: ClashBot-UI/dist/Clash-Bot-gzip

  deploy-ui:
    needs: build-ui
    runs-on: ubuntu-latest

    steps:
      - name: Deployment In Progress Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - UI Deployment - Notification'
          message: 'Deployment in progress...'
          message-color: '16750902'

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Check directory
        run: ls -lha

      - name: Remove old files from S3
        run: aws s3 rm ${{ secrets.S3_BUCKET_NAME }} --recursive

      - name: Push to index.html s3
        run: aws s3 cp index.html ${{ secrets.S3_BUCKET_NAME }} --content-encoding gzip --cache-control max-age=0

      - name: Push to dist s3
        run: aws s3 cp . ${{ secrets.S3_BUCKET_NAME }} --content-encoding gzip --exclude "index.html" --recursive

      - name: Deployment Succeeded Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        if: ${{ success() }}
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - UI Deployment - Notification'
          message: 'Successfully deployed Clash Bot WebApp - UI!'
          message-color: '65345'

      - name: Deployment Failed Discord Webhook
        uses: Poss111/discord-hook-action@v1.6.8
        if: ${{ failure() }}
        with:
          discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: 'Clash Bot Web App - UI Deployment - Notification'
          message: 'Failed to deploy Clash Bot WebApp - UI!'
          message-color: '16711680'
